# FILE: app.py


import streamlit as st
import datetime
import time
from src.styles.material_ui import load_material_ui_css
from src.utils.api import fetch_imex_details
from src.utils.larkbase import (
    larkbase_find_by_field,
    larkbase_write_data,
    larkbase_update_data,
    larkbase_delete_record,
)
from src.utils.config import (
    LARKBASE_FIELDS, API_FIELDS,
    CREATABLE_FIELDS, UPDATABLE_FIELDS, LOCK_FIELDS
)


APP_TOKEN = "Rm9PbvKLeaFFZcsSQpElnRjIgXg"
TABLE_ID = "tblJJPUEFhsXHaxY"


# --- Helper Functions (Kh√¥ng thay ƒë·ªïi) ---
def get_current_timestamp_ms():
    return int(time.time() * 1000)


def convert_date_string_to_ms(date_string: str) -> int | None:
    if not date_string or not isinstance(date_string, str):
        return None
    try:
        dt_obj = datetime.datetime.strptime(date_string, "%Y-%m-%d %H:%M:%S")
        return int(dt_obj.timestamp() * 1000)
    except ValueError:
        return None


def format_timestamp_ms_to_string(ts_ms) -> str:
    if not ts_ms:
        return ""
    try:
        return datetime.datetime.fromtimestamp(int(ts_ms) / 1000).strftime("%Y-%m-%d %H:%M:%S")
    except (ValueError, TypeError):
        return str(ts_ms)


# --- Callback functions ƒë·ªÉ x·ª≠ l√Ω form submissions ---


def handle_success(message: str):
    """ƒê·∫∑t th√¥ng b√°o th√†nh c√¥ng v√† reset √¥ nh·∫≠p li·ªáu."""
    st.session_state.last_success_message = message
    # G√°n l·∫°i gi√° tr·ªã cho widget trong session state, ƒë√¢y l√† c√°ch l√†m ƒë√∫ng trong callback
    st.session_state.bill_id_input = ""


def handle_update(record_id, original_bill_id):
    """Callback cho n√∫t 'L∆∞u ch·ªânh s·ª≠a'."""
    update_data = {}
    date_fields = ["Ng√†y nh·∫≠n h√†ng"]
    numeric_fields = ["S·ªë l∆∞·ª£ng bao/t·∫£i giao", "S·ªë l∆∞·ª£ng bao t·∫£i nh·∫≠n", "Thi·∫øu th·ª´a bao"]

    # L·∫•y d·ªØ li·ªáu ƒë√£ s·ª≠a t·ª´ c√°c widget trong form th√¥ng qua st.session_state
    for col in UPDATABLE_FIELDS:
        key = f"update_{col}"
        if key in st.session_state:
            val = st.session_state[key]
            if col in date_fields and val is not None:
                dt_obj = datetime.datetime.combine(val, datetime.datetime.min.time())
                update_data[col] = int(dt_obj.timestamp() * 1000)
            elif val is not None:
                 update_data[col] = val

    if not update_data:
        st.warning("Kh√¥ng c√≥ thay ƒë·ªïi n√†o ƒë·ªÉ l∆∞u.")
        return

    result = larkbase_update_data(APP_TOKEN, TABLE_ID, record_id, update_data)
    if result:
        handle_success(f"üìù C·∫≠p nh·∫≠t th√†nh c√¥ng cho Bill ID: {original_bill_id}. Giao di·ªán ƒë√£ ƒë∆∞·ª£c reset.")
    else:
        st.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t d·ªØ li·ªáu!")


def handle_delete(record_id, original_bill_id):
    """Callback cho n√∫t 'X√≥a Bill n√†y' v·ªõi logic ki·ªÉm tra l·∫°i tr∆∞·ªõc khi x√≥a."""
    # 1. T·∫£i l·∫°i d·ªØ li·ªáu m·ªõi nh·∫•t c·ªßa record t·ª´ Larkbase ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng c√≥ g√¨ thay ƒë·ªïi
    st.info("ƒêang ki·ªÉm tra l·∫°i tr·∫°ng th√°i record tr∆∞·ªõc khi x√≥a...")
    latest_record = larkbase_find_by_field(APP_TOKEN, TABLE_ID, "ID", original_bill_id)

    if not latest_record:
        st.error(f"‚ùå Kh√¥ng t√¨m th·∫•y record v·ªõi Bill ID: {original_bill_id}. C√≥ th·ªÉ ƒë√£ b·ªã ng∆∞·ªùi kh√°c x√≥a.")
        # X√≥a th√¥ng b√°o info
        st.empty()
        return

    # 2. Ki·ªÉm tra l·∫°i ƒëi·ªÅu ki·ªán kh√≥a tr√™n d·ªØ li·ªáu m·ªõi nh·∫•t
    fields = latest_record.get("fields", {})
    has_lock_values = any(fields.get(f) for f in LOCK_FIELDS)

    # 3. N·∫øu b·ªã kh√≥a, b√°o l·ªói v√† d·ª´ng l·∫°i
    if has_lock_values:
        locked_fields_found = [f for f in LOCK_FIELDS if fields.get(f)]
        st.error(
            f"‚ùå Kh√¥ng th·ªÉ x√≥a! Record ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t b·ªüi ng∆∞·ªùi kh√°c v√† b·ªã kh√≥a b·ªüi c√°c tr∆∞·ªùng: "
            f"{', '.join(locked_fields_found)}. Vui l√≤ng t·∫£i l·∫°i trang."
        )
        # X√≥a th√¥ng b√°o info
        st.empty()
        return

    # 4. N·∫øu kh√¥ng b·ªã kh√≥a, ti·∫øn h√†nh x√≥a
    result = larkbase_delete_record(APP_TOKEN, TABLE_ID, record_id)
    if result:
        handle_success(f"üóëÔ∏è ƒê√£ x√≥a th√†nh c√¥ng Bill ID: {original_bill_id}. Giao di·ªán ƒë√£ ƒë∆∞·ª£c reset.")
    else:
        st.error("‚ùå X√≥a kh√¥ng th√†nh c√¥ng!")


def handle_create(api_data, original_bill_id):
    """Callback cho n√∫t 'Th√™m m·ªõi v√†o Larkbase'."""
    new_fields = {}
    # L·∫•y d·ªØ li·ªáu t·ª´ c√°c widget trong form
    for col in CREATABLE_FIELDS:
        key = f"add_{col}"
        if key in st.session_state:
            new_fields[col] = st.session_state[key]

    # Th√™m c√°c tr∆∞·ªùng t·ª± ƒë·ªông t·∫°o
    new_fields["ID"] = api_data['ID']
    new_fields["Ng√†y b√†n giao"] = get_current_timestamp_ms()

    record_data = {**new_fields, **api_data}
    final_record_data = {k: v for k, v in record_data.items() if v is not None and str(v) != ""}

    try:
        ok = larkbase_write_data(APP_TOKEN, TABLE_ID, final_record_data)
        if ok:
            # L·∫•y th√¥ng tin ƒë√£ nh·∫≠p ƒë·ªÉ hi·ªÉn th·ªã trong th√¥ng b√°o
            so_luong_giao = new_fields.get("S·ªë l∆∞·ª£ng bao/t·∫£i giao", "kh√¥ng c√≥")
            nguoi_ban_giao = new_fields.get("Ng∆∞·ªùi b√†n giao", "kh√¥ng c√≥")

            # T·∫°o chu·ªói th√¥ng b√°o m·ªõi
            success_message = (
                f"‚úÖ ƒê√£ th√™m th√†nh c√¥ng Bill ID: {original_bill_id}. "
                f"S·ªë l∆∞·ª£ng bao/t·∫£i giao: {so_luong_giao}. "
                f"Ng∆∞·ªùi b√†n giao: '{nguoi_ban_giao}'."
            )
            handle_success(success_message)
        else:
            st.error("‚ùå Kh√¥ng th·ªÉ th√™m m·ªõi. Ki·ªÉm tra l·∫°i th√¥ng b√°o l·ªói t·ª´ API b√™n tr√™n n·∫øu c√≥.")
    except Exception as e:
        st.error(f"L·ªói khi ghi d·ªØ li·ªáu: {e}")



# --- Streamlit App UI ---
st.set_page_config(layout="centered")


# Kh·ªüi t·∫°o session state n·∫øu ch∆∞a t·ªìn t·∫°i
if 'last_success_message' not in st.session_state:
    st.session_state.last_success_message = None
if 'bill_id_input' not in st.session_state:
    st.session_state.bill_id_input = ""


load_material_ui_css()
st.markdown(
    '<div style="text-align:center;"><h2>üì¶ Ph√¢n ph·ªëi giao nh·∫≠n IMEX</h2>'
    '<p style="color:#1976d2"><b>Nh·∫≠p Bill ID, tra c·ª©u, th√™m, s·ª≠a, x√≥a th√¥ng tin giao nh·∫≠n</b></p></div>',
    unsafe_allow_html=True,
)


# Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng (n·∫øu c√≥) v√† x√≥a ƒëi
if st.session_state.last_success_message:
    st.success(st.session_state.last_success_message)
    st.session_state.last_success_message = None


# Gi√° tr·ªã c·ªßa widget gi·ªù s·∫Ω ƒë∆∞·ª£c ƒëi·ªÅu khi·ªÉn b·ªüi c√°c h√†m callback
bill_id = st.text_input(
    "Nh·∫≠p Bill ID:",
    placeholder="Nh·∫≠p m√£ Bill ID giao nh·∫≠n",
    key="bill_id_input"
).strip()


if bill_id:
    record = larkbase_find_by_field(APP_TOKEN, TABLE_ID, "ID", bill_id)


    # --- RECORD EXISTS: VIEW / UPDATE / DELETE ---
    if record:
        fields = record.get("fields", {})
        st.markdown(f"<b>ƒê√£ t·ªìn t·∫°i th√¥ng tin Bill ID <span style='color: #1976d2'>{bill_id}</span>!</b>", unsafe_allow_html=True)

        has_lock_values = any(fields.get(f) for f in LOCK_FIELDS)
        numeric_fields = ["S·ªë l∆∞·ª£ng bao/t·∫£i giao", "S·ªë l∆∞·ª£ng bao t·∫£i nh·∫≠n", "Thi·∫øu th·ª´a bao"]
        date_fields = ["Ng√†y nh·∫≠n h√†ng"]

        with st.form("update_or_delete"):
            for col in LARKBASE_FIELDS:
                val = fields.get(col, "")
                is_editable = (col in UPDATABLE_FIELDS) and not (col in LOCK_FIELDS and val)

                if not is_editable:
                    display_val = format_timestamp_ms_to_string(val) if col in date_fields or col == "Ng√†y b√†n giao" else val
                    st.text_input(col, display_val, key=f"readonly_{col}", disabled=True)
                else:
                    if col in numeric_fields:
                        default_val = int(val) if val else 0
                        st.number_input(col, key=f"update_{col}", step=1, value=default_val, format="%d")
                    elif col in date_fields:
                        default_val = datetime.datetime.fromtimestamp(int(val) / 1000).date() if val else None
                        st.date_input(col, key=f"update_{col}", value=default_val)
                    else:
                        st.text_input(col, val, key=f"update_{col}")

            col1, col2 = st.columns(2)
            with col1:
                st.form_submit_button(
                    "L∆∞u ch·ªânh s·ª≠a",
                    on_click=handle_update,
                    args=(record["record_id"], bill_id),
                    use_container_width=True
                )

            can_delete = not has_lock_values
            with col2:
                st.form_submit_button(
                    "X√≥a Bill n√†y",
                    disabled=not can_delete,
                    type="secondary",
                    on_click=handle_delete,
                    args=(record["record_id"], bill_id),
                    use_container_width=True
                )

            if not can_delete:
                st.info(f"L∆∞u √Ω: Bill n√†y kh√¥ng th·ªÉ x√≥a v√¨ ƒë√£ c√≥ th√¥ng tin ·ªü m·ªôt trong c√°c tr∆∞·ªùng sau: {', '.join(LOCK_FIELDS)}. Do ƒë√≥, n√∫t x√≥a ƒë√£ ƒë∆∞·ª£c v√¥ hi·ªáu h√≥a.")


    # --- RECORD NOT FOUND: CREATE NEW ---
    else:
        st.info(f"ƒêang t·ª± ƒë·ªông tra c·ª©u v√† th√™m m·ªõi Bill ID: {bill_id}...")

        with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu t·ª´ API..."):
            imex_items = fetch_imex_details(bill_id)

        if not imex_items:
            st.error("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu chi ti·∫øt, ki·ªÉm tra l·∫°i Bill ID.")
        else:
            example_item = imex_items[0]
            api_data = {
                "ID": bill_id, "Kho ƒëi": example_item.get("fromDepotId", ""), "Kho ƒë·∫øn": example_item.get("toDepotId", ""),
                "S·ªë l∆∞·ª£ng": int(example_item.get("realQuantity") or 0), "S·ªë l∆∞·ª£ng s·∫£n ph·∫©m y√™u c·∫ßu": int(example_item.get("requiredQuantity") or 0),
                "S·ªë l∆∞·ª£ng s·∫£n ph·∫©m h·ªèng": int(example_item.get("damagedQuantity") or 0), "S·ªë l∆∞·ª£ng s·∫£n ph·∫©m y√™u c·∫ßu ƒë∆∞·ª£c duy·ªát": int(example_item.get("approvedQuantity") or 0),
                "S·ªë l∆∞·ª£ng s·∫£n ph·∫©m y√™u c·∫ßu ƒë∆∞·ª£c x√°c nh·∫≠n": int(example_item.get("realQuantity") or 0), "Ng√†y t·∫°o": convert_date_string_to_ms(example_item.get("requiredAt", "")),
                "Ng√†y duy·ªát": convert_date_string_to_ms(example_item.get("approvedAt", "")), "Ng√†y x√°c nh·∫≠n": convert_date_string_to_ms(example_item.get("confirmedAt", "")),
                "Ng∆∞·ªùi x√°c nh·∫≠n": example_item.get("approvedByUser", ""),
            }

            with st.form("create_new"):
                numeric_fields = ["S·ªë l∆∞·ª£ng bao/t·∫£i giao"]

                for col in LARKBASE_FIELDS:
                    is_creatable = col in CREATABLE_FIELDS
                    if is_creatable:
                        if col in numeric_fields:
                            st.number_input(col, key=f"add_{col}", step=1, value=0, format="%d")
                        else:
                            st.text_input(col, "", key=f"add_{col}")
                    else:
                        if col == "ID":
                            st.text_input(col, api_data['ID'], key=f"add_{col}_disabled", disabled=True)
                        elif col == "Ng√†y b√†n giao":
                            ts_ms = get_current_timestamp_ms()
                            st.text_input(col, format_timestamp_ms_to_string(ts_ms), key=f"add_{col}_disabled", disabled=True)
                        else:
                            st.text_input(col, "", key=f"add_{col}_disabled", disabled=True, help="Tr∆∞·ªùng n√†y s·∫Ω ƒë∆∞·ª£c nh·∫≠p ·ªü b∆∞·ªõc c·∫≠p nh·∫≠t sau.")

                st.form_submit_button(
                    "Th√™m m·ªõi v√†o Larkbase",
                    on_click=handle_create,
                    args=(api_data, bill_id),
                    use_container_width=True
                )
