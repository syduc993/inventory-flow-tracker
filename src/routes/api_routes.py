# src/routes/api_routes.py - API Routes
from fastapi import APIRouter, Request, Form, Depends
from fastapi.responses import HTMLResponse, JSONResponse
import time
import logging

from src.services.record_service import RecordService
from src.services.employee_service import EmployeeService
from src.services.transport_service import TransportProviderService
from src.services.depot_service import DepotService
from src.core.dependencies import get_current_user, templates, get_record_service, get_employee_service, get_transport_service, get_depot_service

router = APIRouter(tags=["api"])
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler()]
)

logger = logging.getLogger(__name__)

@router.get("/", response_class=HTMLResponse)
async def read_root(
    request: Request,
    record_service: RecordService = Depends(get_record_service),
    employee_service: EmployeeService = Depends(get_employee_service),
    transport_service: TransportProviderService = Depends(get_transport_service),
    depot_service: DepotService = Depends(get_depot_service)
):
    print("üîç Loading template: pages/index.html")
    user = get_current_user(request)
    return templates.TemplateResponse("pages/index.html", {
        "request": request,
        "user": user,
        "employees": employee_service.get_employees(),
        "transport_providers": transport_service.get_transport_providers(),
        "depots": depot_service.get_depots()
    })



# src/routes/api_routes.py

@router.post("/validate-bill-id")
async def validate_bill_id(
    request: Request, 
    bill_id: str = Form(...),
    # from_depot: str = Form(None), # ‚ùå B·ªé D√íNG N√ÄY
    to_depot: str = Form(...),      # ‚úÖ S·ª¨A: ƒê√°nh d·∫•u l√† tr∆∞·ªùng b·∫Øt bu·ªôc
    record_service: RecordService = Depends(get_record_service)
):
    """Validate single bill ID - ch·ªâ d√πng cho bulk form"""
    try:
        # ‚úÖ S·ª¨A: Ch·ªâ c·∫ßn ki·ªÉm tra Kho ƒë·∫øn l√† ƒë·ªß
        if not to_depot:
            return JSONResponse({
                "valid": False,
                "message": "C·∫ßn ch·ªçn Kho ƒë·∫øn tr∆∞·ªõc"
            })
        
        imex_items = record_service.get_api_data(bill_id)
        if not imex_items:
            return JSONResponse({
                "valid": False,
                "message": "ID kh√¥ng h·ª£p l·ªá"
            })
        
        # ... (Ph·∫ßn logic ki·ªÉm tra status gi·ªØ nguy√™n)
        try:
            all_statuses = {int(item.get("status", 0)) for item in imex_items}
        except (ValueError, TypeError):
            return JSONResponse(...)

        valid_statuses = {3, 4, 5, 6}
        is_valid_bill = any(status in valid_statuses for status in all_statuses)

        if not is_valid_bill:
            return JSONResponse({
                "valid": False,
                "message": "ID ch∆∞a ƒë∆∞·ª£c duy·ªát"
            })
        
        example_item = imex_items[0]
        
        # ‚ùå B·ªé: Kh√¥ng c·∫ßn ki·ªÉm tra kho ƒëi n·ªØa
        # if example_item.get("fromDepotId", "") != from_depot:
        #     return JSONResponse({
        #         "valid": False,
        #         "message": "Kh√¥ng ƒë√∫ng kho ƒëi"
        #     })
        
        # ‚úÖ GI·ªÆ L·∫†I: V·∫´n ki·ªÉm tra kho ƒë·∫øn
        if example_item.get("toDepotId", "") != to_depot:
            return JSONResponse({
                "valid": False,
                "message": "Kh√¥ng ƒë√∫ng kho ƒë·∫øn"
            })
        
        return JSONResponse({
            "valid": True,
            "message": "ID h·ª£p l·ªá",
            "from_depot": example_item.get("fromDepotName", ""),
            "to_depot": example_item.get("toDepotName", "")
        })
        
    except Exception as e:
        return JSONResponse({
            "valid": False,
            "message": "L·ªói ki·ªÉm tra"
        })





# @router.post("/validate-bill-id")
# async def validate_bill_id(
#     request: Request, 
#     bill_id: str = Form(...),
#     from_depot: str = Form(None),
#     to_depot: str = Form(None),
#     record_service: RecordService = Depends(get_record_service)
# ):
#     """Validate single bill ID - ch·ªâ d√πng cho bulk form"""
#     try:
#         # ‚úÖ TH√äM: Ki·ªÉm tra b·∫Øt bu·ªôc c√≥ Kho ƒëi/Kho ƒë·∫øn
#         if not from_depot or not to_depot:
#             return JSONResponse({
#                 "valid": False,
#                 "message": "C·∫ßn ch·ªçn Kho ƒëi v√† Kho ƒë·∫øn tr∆∞·ªõc"
#             })
        
#         imex_items = record_service.get_api_data(bill_id)
#         if not imex_items:
#             return JSONResponse({
#                 "valid": False,
#                 "message": "ID kh√¥ng h·ª£p l·ªá"
#             })
        
        
#         # L·∫•y t·∫•t c·∫£ status t·ª´ c√°c d√≤ng s·∫£n ph·∫©m
#         try:
#             all_statuses = {int(item.get("status", 0)) for item in imex_items}
#         except (ValueError, TypeError):
#             return JSONResponse({
#                 "valid": False,
#                 "message": "L·ªói d·ªØ li·ªáu status t·ª´ API"
#             })

#         # Ki·ªÉm tra xem c√≥ B·∫§T K·ª≤ status n√†o h·ª£p l·ªá kh√¥ng
#         valid_statuses = {3, 4, 5, 6}
#         is_valid_bill = any(status in valid_statuses for status in all_statuses)

#         if not is_valid_bill:
#             # Ch·ªâ b√°o l·ªói n·∫øu T·∫§T C·∫¢ c√°c d√≤ng ƒë·ªÅu kh√¥ng h·ª£p l·ªá
#             return JSONResponse({
#                 "valid": False,
#                 "message": "ID ch∆∞a ƒë∆∞·ª£c duy·ªát"
#             })
        

#         # V·∫´n d√πng example_item ƒë·ªÉ ki·ªÉm tra th√¥ng tin chung nh∆∞ kho
#         example_item = imex_items[0]
        
#         # Validate kho ƒëi/kho ƒë·∫øn v·ªõi th√¥ng tin chung
#         if example_item.get("fromDepotId", "") != from_depot:
#             return JSONResponse({
#                 "valid": False,
#                 "message": "Kh√¥ng ƒë√∫ng kho ƒëi"
#             })
        
#         if example_item.get("toDepotId", "") != to_depot:
#             return JSONResponse({
#                 "valid": False,
#                 "message": "Kh√¥ng ƒë√∫ng kho ƒë·∫øn"
#             })
        
#         return JSONResponse({
#             "valid": True,
#             "message": "ID h·ª£p l·ªá",
#             "from_depot": example_item.get("fromDepotName", ""),
#             "to_depot": example_item.get("toDepotName", "")
#         })
        
#     except Exception as e:
#         return JSONResponse({
#             "valid": False,
#             "message": "L·ªói ki·ªÉm tra"
#         })



@router.post("/bulk-create-records", response_class=HTMLResponse)
async def bulk_create_records(
    request: Request,
    record_service: RecordService = Depends(get_record_service),
    depot_service: DepotService = Depends(get_depot_service)
):
    """Create multiple records at once"""
    user = get_current_user(request)
    
    try:
        body = await request.json()
        # ‚ùå B·ªé: Kh√¥ng c·∫ßn from_depot n·ªØa
        # from_depot = body.get("from_depot")
        to_depot = body.get("to_depot") 
        handover_person = body.get("handover_person")
        transport_provider = body.get("transport_provider", "")
        bill_data = body.get("bill_data", [])
        
        # ‚úÖ S·ª¨A: Ch·ªâ validate nh·ªØng th√¥ng tin c·∫ßn thi·∫øt
        # ‚ùå B·ªé: Kh√¥ng check from_depot n·ªØa  
        # if not from_depot:
        #     return HTMLResponse('<div class="error">‚ùå Thi·∫øu th√¥ng tin kho ƒëi</div>')
        if not to_depot:
            return HTMLResponse('<div class="error">‚ùå Thi·∫øu th√¥ng tin kho ƒë·∫øn</div>')
        if not handover_person:
            return HTMLResponse('<div class="error">‚ùå Thi·∫øu th√¥ng tin ng∆∞·ªùi b√†n giao</div>')
        if not transport_provider:
            return HTMLResponse('<div class="error">‚ùå Thi·∫øu th√¥ng tin ƒë∆°n v·ªã v·∫≠n chuy·ªÉn</div>')
        
        # ‚úÖ S·ª¨A: Validate s·ªë l∆∞·ª£ng b·∫Øt bu·ªôc cho t·∫•t c·∫£ Bill ID
        for item in bill_data:
            bill_id = item.get("bill_id")
            quantity = item.get("quantity", 0)
            if not quantity or quantity == 0:
                return HTMLResponse(f'<div class="error">‚ùå Bill ID "{bill_id}": B·∫Øt bu·ªôc nh·∫≠p s·ªë l∆∞·ª£ng bao/t·∫£i</div>')
        
        # ‚úÖ S·ª¨A: Ch·ªâ validate kho ƒë·∫øn
        to_valid, to_name = depot_service.validate_depot(to_depot)
        
        if not to_valid:
            return HTMLResponse(f'<div class="error">‚ùå Kho ƒë·∫øn kh√¥ng h·ª£p l·ªá: {to_name}</div>')
        
        # ‚úÖ S·ª¨A: Counters cho summary - kh√¥ng l∆∞u t·ª´ng th√¥ng b√°o n·ªØa
        success_count = 0
        error_count = 0
        total_count = len(bill_data)
        error_samples = []  # Ch·ªâ l∆∞u m·∫´u l·ªói ƒë·ªÉ hi·ªÉn th·ªã
        
        # ‚úÖ S·ª¨A: Chu·∫©n b·ªã data cho batch creation
        records_to_create = []
        valid_bill_ids = []
        
        for item in bill_data:
            bill_id = item.get("bill_id")
            quantity = item.get("quantity", 0)
            bag_quantity = item.get("bag_quantity", 0)
            group_id = item.get("group_id")
            
            imex_items = record_service.get_api_data(bill_id)
            if not imex_items:
                error_count += 1
                if len(error_samples) < 3:
                    error_samples.append(f"{bill_id}: ID kh√¥ng h·ª£p l·ªá")
                continue
            
            try:
                all_statuses = {int(item.get("status", 0)) for item in imex_items}
            except (ValueError, TypeError):
                error_count += 1
                if len(error_samples) < 3:
                    error_samples.append(f"{bill_id}: L·ªói d·ªØ li·ªáu status")
                continue

            valid_statuses = {3, 4, 5, 6}
            is_valid_bill = any(status in valid_statuses for status in all_statuses)

            if not is_valid_bill:
                error_count += 1
                if len(error_samples) < 3:
                    error_samples.append(f"{bill_id}: ID ch∆∞a ƒë∆∞·ª£c duy·ªát")
                continue
            
            # V·∫´n d√πng example_item ƒë·ªÉ ki·ªÉm tra th√¥ng tin chung
            example_item = imex_items[0]

            # ‚ùå B·ªé: Kh√¥ng check kho ƒëi n·ªØa
            # if example_item.get("fromDepotId", "") != from_depot:
            #     error_count += 1
            #     if len(error_samples) < 3:
            #         error_samples.append(f"{bill_id}: Kh√¥ng ƒë√∫ng kho ƒëi")
            #     continue
            
            # ‚úÖ GI·ªÆ: V·∫´n check kho ƒë·∫øn
            if example_item.get("toDepotId", "") != to_depot:
                error_count += 1
                if len(error_samples) < 3:
                    error_samples.append(f"{bill_id}: Kh√¥ng ƒë√∫ng kho ƒë·∫øn")
                continue

            # ‚≠ê T√çNH TO√ÅN T·ªîNG S·ªê L∆Ø·ª¢NG T·ª™ API
            total_required_quantity = 0
            total_damaged_quantity = 0
            total_approved_quantity = 0
            total_real_quantity = 0

            for detail_item in imex_items:
                try:
                    total_required_quantity += int(detail_item.get("requiredQuantity") or 0)
                    total_damaged_quantity += int(detail_item.get("damagedQuantity") or 0)
                    total_approved_quantity += int(detail_item.get("approvedQuantity") or 0)
                    total_real_quantity += int(detail_item.get("realQuantity") or 0)
                except (ValueError, TypeError):
                    continue

            # ‚≠ê C·∫¨P NH·∫¨T `record_data` - l·∫•y kho ƒëi t·ª´ API thay v√¨ form
            record_data = {
                "ID": bill_id,
                "ID kho ƒëi": example_item.get("fromDepotId", ""),  # ‚úÖ L·∫•y t·ª´ API
                "Kho ƒëi": example_item.get("fromDepotName", ""),   # ‚úÖ L·∫•y t·ª´ API
                "ID kho ƒë·∫øn": example_item.get("toDepotId", ""),
                "Kho ƒë·∫øn": example_item.get("toDepotName", ""),
                "S·ªë l∆∞·ª£ng": total_real_quantity,
                "S·ªë l∆∞·ª£ng bao": int(quantity),
                "Ng∆∞·ªùi b√†n giao": handover_person,
                "ƒê∆°n v·ªã v·∫≠n chuy·ªÉn": transport_provider,
                "Ng√†y b√†n giao": int(time.time() * 1000),

                # Th√™m 4 tr∆∞·ªùng m·ªõi t·ª´ API
                "S·ªë l∆∞·ª£ng s·∫£n ph·∫©m y√™u c·∫ßu": total_required_quantity,
                "S·ªë l∆∞·ª£ng s·∫£n ph·∫©m h·ªèng": total_damaged_quantity,
                "S·ªë l∆∞·ª£ng s·∫£n ph·∫©m y√™u c·∫ßu ƒë∆∞·ª£c duy·ªát": total_approved_quantity,
                "S·ªë l∆∞·ª£ng s·∫£n ph·∫©m y√™u c·∫ßu ƒë∆∞·ª£c x√°c nh·∫≠n": total_real_quantity
            }
            
            # ‚úÖ TH√äM: Th√™m th√¥ng tin Group Bill n·∫øu c√≥
            if bag_quantity > 0:
                record_data["S·ªë l∆∞·ª£ng t√∫i"] = int(bag_quantity)
            
            if group_id:
                record_data["Group ID"] = group_id
            
            records_to_create.append(record_data)
            valid_bill_ids.append(bill_id)

        # ‚úÖ S·ª¨A: S·ª≠ d·ª•ng batch creation
        if records_to_create:
            batch_success, batch_message = record_service.batch_create_records(records_to_create)
            
            if batch_success:
                success_count = len(valid_bill_ids)
            else:
                logger.warning(f"Batch creation failed: {batch_message}")
                return HTMLResponse(f'<div class="error">‚ùå L·ªói khi t·∫°o h√†ng lo·∫°t: {batch_message}</div>')

        # ‚úÖ S·ª¨A: Format k·∫øt qu·∫£ ng·∫Øn g·ªçn
        if success_count == total_count:
            result_html = f'<div class="success">üìä Ho√†n th√†nh: {success_count}/{total_count} b·∫£n ghi th√†nh c√¥ng</div>'
        elif success_count > 0 and error_count > 0:
            result_html = f'<div class="info">üìä Ho√†n th√†nh: {success_count}/{total_count} b·∫£n ghi th√†nh c√¥ng'
            result_html += f'<br>‚ùå {error_count} b·∫£n ghi th·∫•t b·∫°i'
            
            if error_samples:
                result_html += f'<br><small>V√≠ d·ª• l·ªói: {"; ".join(error_samples)}'
                if error_count > len(error_samples):
                    result_html += f' v√† {error_count - len(error_samples)} l·ªói kh√°c'
                result_html += '</small>'
            
            result_html += '</div>'
        else:
            result_html = f'<div class="error">‚ùå Kh√¥ng th·ªÉ t·∫°o b·∫£n ghi n√†o ({error_count}/{total_count} th·∫•t b·∫°i)'
            
            if error_samples:
                result_html += f'<br>L·ªói: {"; ".join(error_samples)}'
                if error_count > len(error_samples):
                    result_html += f' v√† {error_count - len(error_samples)} l·ªói kh√°c'
            
            result_html += '</div>'
        
        logger.info(f"User {user.get('name')} bulk created {success_count}/{total_count} records")
        return HTMLResponse(result_html)
        
    except Exception as e:
        logger.error(f"Error in bulk create: {e}")
        return HTMLResponse(f'<div class="error">‚ùå L·ªói h·ªá th·ªëng: {str(e)}</div>')



# @router.post("/bulk-create-records", response_class=HTMLResponse)
# async def bulk_create_records(
#     request: Request,
#     record_service: RecordService = Depends(get_record_service),
#     depot_service: DepotService = Depends(get_depot_service)
# ):
#     """Create multiple records at once"""
#     user = get_current_user(request)
    
#     try:
#         body = await request.json()
#         from_depot = body.get("from_depot")
#         to_depot = body.get("to_depot") 
#         handover_person = body.get("handover_person")
#         transport_provider = body.get("transport_provider", "")
#         bill_data = body.get("bill_data", [])
        
#         # ‚úÖ S·ª¨A: T·∫•t c·∫£ th√¥ng tin ƒë·ªÅu b·∫Øt bu·ªôc
#         if not from_depot:
#             return HTMLResponse('<div class="error">‚ùå Thi·∫øu th√¥ng tin kho ƒëi</div>')
#         if not to_depot:
#             return HTMLResponse('<div class="error">‚ùå Thi·∫øu th√¥ng tin kho ƒë·∫øn</div>')
#         if not handover_person:
#             return HTMLResponse('<div class="error">‚ùå Thi·∫øu th√¥ng tin ng∆∞·ªùi b√†n giao</div>')
#         if not transport_provider:
#             return HTMLResponse('<div class="error">‚ùå Thi·∫øu th√¥ng tin ƒë∆°n v·ªã v·∫≠n chuy·ªÉn</div>')
        
#         # ‚úÖ S·ª¨A: Validate s·ªë l∆∞·ª£ng b·∫Øt bu·ªôc cho t·∫•t c·∫£ Bill ID
#         for item in bill_data:
#             bill_id = item.get("bill_id")
#             quantity = item.get("quantity", 0)
#             if not quantity or quantity == 0:
#                 return HTMLResponse(f'<div class="error">‚ùå Bill ID "{bill_id}": B·∫Øt bu·ªôc nh·∫≠p s·ªë l∆∞·ª£ng bao/t·∫£i</div>')
        
#         # Validate depots
#         from_valid, from_name = depot_service.validate_depot(from_depot)
#         to_valid, to_name = depot_service.validate_depot(to_depot)
        
#         if not from_valid:
#             return HTMLResponse(f'<div class="error">‚ùå Kho ƒëi kh√¥ng h·ª£p l·ªá: {from_name}</div>')
#         if not to_valid:
#             return HTMLResponse(f'<div class="error">‚ùå Kho ƒë·∫øn kh√¥ng h·ª£p l·ªá: {to_name}</div>')
        
#         # ‚úÖ S·ª¨A: Counters cho summary - kh√¥ng l∆∞u t·ª´ng th√¥ng b√°o n·ªØa
#         success_count = 0
#         error_count = 0
#         total_count = len(bill_data)
#         error_samples = []  # Ch·ªâ l∆∞u m·∫´u l·ªói ƒë·ªÉ hi·ªÉn th·ªã
        
#         # ‚úÖ S·ª¨A: Chu·∫©n b·ªã data cho batch creation
#         records_to_create = []
#         valid_bill_ids = []
        
#         for item in bill_data:
#             bill_id = item.get("bill_id")
#             quantity = item.get("quantity", 0)
#             # ‚úÖ TH√äM: L·∫•y th√™m bag_quantity v√† group_id t·ª´ JavaScript
#             bag_quantity = item.get("bag_quantity", 0)
#             group_id = item.get("group_id")  # Group ID t·ª´ JavaScript (c√≥ th·ªÉ l√† None cho single records)
            
#             imex_items = record_service.get_api_data(bill_id)
#             if not imex_items:
#                 error_count += 1
#                 if len(error_samples) < 3:  # Ch·ªâ l∆∞u 3 m·∫´u l·ªói ƒë·∫ßu ti√™n
#                     error_samples.append(f"{bill_id}: ID kh√¥ng h·ª£p l·ªá")
#                 continue
            
#             try:
#                 all_statuses = {int(item.get("status", 0)) for item in imex_items}
#             except (ValueError, TypeError):
#                 error_count += 1
#                 if len(error_samples) < 3:
#                     error_samples.append(f"{bill_id}: L·ªói d·ªØ li·ªáu status")
#                 continue

#             valid_statuses = {3, 4, 5, 6}
#             is_valid_bill = any(status in valid_statuses for status in all_statuses)

#             if not is_valid_bill:
#                 error_count += 1
#                 if len(error_samples) < 3:
#                     error_samples.append(f"{bill_id}: ID ch∆∞a ƒë∆∞·ª£c duy·ªát")
#                 continue
            
            
#             # V·∫´n d√πng example_item ƒë·ªÉ ki·ªÉm tra th√¥ng tin chung
#             example_item = imex_items[0]

#             if example_item.get("fromDepotId", "") != from_depot:
#                 error_count += 1
#                 if len(error_samples) < 3:
#                     error_samples.append(f"{bill_id}: Kh√¥ng ƒë√∫ng kho ƒëi")
#                 continue
#             if example_item.get("toDepotId", "") != to_depot:
#                 error_count += 1
#                 if len(error_samples) < 3:
#                     error_samples.append(f"{bill_id}: Kh√¥ng ƒë√∫ng kho ƒë·∫øn")
#                 continue

#             # Chu·∫©n b·ªã record data cho batch creation v·ªõi t√™n c·ªôt ƒë√£ ƒë·ªìng b·ªô
#             record_data = {
#                 "ID": bill_id,
#                 "ID kho ƒëi": example_item.get("fromDepotId", ""),
#                 "Kho ƒëi": example_item.get("fromDepotName", ""),
#                 "ID kho ƒë·∫øn": example_item.get("toDepotId", ""),
#                 "Kho ƒë·∫øn": example_item.get("toDepotName", ""),
#                 "S·ªë l∆∞·ª£ng": int(example_item.get("realQuantity") or 0),
#                 "S·ªë l∆∞·ª£ng bao": int(quantity), # <<< ƒê√É S·ª¨A T·ª™ "S·ªë l∆∞·ª£ng t·∫£i"
#                 "Ng∆∞·ªùi b√†n giao": handover_person,
#                 "ƒê∆°n v·ªã v·∫≠n chuy·ªÉn": transport_provider,
#                 "Ng√†y b√†n giao": int(time.time() * 1000)
#             }
            
#             # ‚úÖ TH√äM: Th√™m th√¥ng tin Group Bill n·∫øu c√≥
#             if bag_quantity > 0:
#                 record_data["S·ªë l∆∞·ª£ng t√∫i"] = int(bag_quantity) # <<< ƒê√É S·ª¨A T·ª™ "S·ªë l∆∞·ª£ng bao"
            
#             if group_id:
#                 record_data["Group ID"] = group_id
            
#             records_to_create.append(record_data)
#             valid_bill_ids.append(bill_id)

#         # ‚úÖ S·ª¨A: S·ª≠ d·ª•ng batch creation thay v√¨ t·∫°o t·ª´ng record
#         if records_to_create:
#             batch_success, batch_message = record_service.batch_create_records(records_to_create)
            
#             if batch_success:
#                 # Batch th√†nh c√¥ng - t·∫•t c·∫£ records h·ª£p l·ªá ƒë·ªÅu ƒë∆∞·ª£c t·∫°o
#                 success_count = len(valid_bill_ids)
#             else:
#                 # Batch th·∫•t b·∫°i - fallback v·ªÅ t·∫°o t·ª´ng record
#                 logger.warning(f"Batch creation failed: {batch_message}, falling back to individual creation")
#                 return HTMLResponse(f'<div class="error">‚ùå L·ªói batch create: {batch_message}</div>')

#         # ‚úÖ S·ª¨A: Format k·∫øt qu·∫£ ng·∫Øn g·ªçn - kh√¥ng li·ªát k√™ t·ª´ng ID
#         if success_count == total_count:
#             # T·∫•t c·∫£ th√†nh c√¥ng
#             result_html = f'<div class="success">üìä Ho√†n th√†nh: {success_count}/{total_count} b·∫£n ghi th√†nh c√¥ng</div>'
#         elif success_count > 0 and error_count > 0:
#             # M·ªôt ph·∫ßn th√†nh c√¥ng
#             result_html = f'<div class="info">üìä Ho√†n th√†nh: {success_count}/{total_count} b·∫£n ghi th√†nh c√¥ng'
#             result_html += f'<br>‚ùå {error_count} b·∫£n ghi th·∫•t b·∫°i'
            
#             # Ch·ªâ hi·ªÉn th·ªã m·∫´u l·ªói n·∫øu c√≥
#             if error_samples:
#                 result_html += f'<br><small>V√≠ d·ª• l·ªói: {"; ".join(error_samples)}'
#                 if error_count > len(error_samples):
#                     result_html += f' v√† {error_count - len(error_samples)} l·ªói kh√°c'
#                 result_html += '</small>'
            
#             result_html += '</div>'
#         else:
#             # T·∫•t c·∫£ th·∫•t b·∫°i
#             result_html = f'<div class="error">‚ùå Kh√¥ng th·ªÉ t·∫°o b·∫£n ghi n√†o ({error_count}/{total_count} th·∫•t b·∫°i)'
            
#             # Hi·ªÉn th·ªã m·∫´u l·ªói
#             if error_samples:
#                 result_html += f'<br>L·ªói: {"; ".join(error_samples)}'
#                 if error_count > len(error_samples):
#                     result_html += f' v√† {error_count - len(error_samples)} l·ªói kh√°c'
            
#             result_html += '</div>'
        
#         logger.info(f"User {user.get('name')} bulk created {success_count}/{total_count} records")
#         return HTMLResponse(result_html)
        
#     except Exception as e:
#         logger.error(f"Error in bulk create: {e}")
#         return HTMLResponse(f'<div class="error">‚ùå L·ªói h·ªá th·ªëng: {str(e)}</div>')



@router.get("/health")
async def health_check():
    """Health check endpoint (public)"""
    return {"status": "ok", "service": "inventory-flow-tracker"}