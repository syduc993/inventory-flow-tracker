# # src/auth/auth_middleware.py
# import logging
# from typing import List
# from fastapi import Request, Response, HTTPException
# from fastapi.responses import RedirectResponse
# from starlette.middleware.base import BaseHTTPMiddleware
# from .session_manager import SessionManager

# logger = logging.getLogger(__name__)

# class AuthMiddleware(BaseHTTPMiddleware):
#     def __init__(self, app, session_manager: SessionManager, public_paths: List[str] = None):
#         super().__init__(app)
#         self.session_manager = session_manager
#         # ‚úÖ S·ª¨A: Sync public paths v·ªõi main.py ƒë·ªÉ tr√°nh inconsistency
#         self.public_paths = public_paths or [
#             "/login",
#             "/auth/callback",
#             "/auth/lark",  # ‚Üê TH√äM: ƒê·∫£m b·∫£o consistent v·ªõi main.py
#             "/health",
#             "/static",
#             "/favicon.ico"
#         ]

#     def is_public_path(self, path: str) -> bool:
#         """Ki·ªÉm tra xem path c√≥ ph·∫£i l√† public kh√¥ng"""
#         return any(path.startswith(public_path) for public_path in self.public_paths)

#     async def dispatch(self, request: Request, call_next):
#         # Skip auth cho public paths
#         if self.is_public_path(request.url.path):
#             return await call_next(request)

#         # L·∫•y session token t·ª´ cookie
#         session_token = request.cookies.get("session_token")
        
#         if not session_token:
#             logger.info(f"No session token, redirecting to login: {request.url.path}")
#             return RedirectResponse(url="/login", status_code=302)

#         # Verify token
#         user_info = self.session_manager.get_user_from_token(session_token)
#         if not user_info:
#             logger.info(f"Invalid session token, redirecting to login: {request.url.path}")
#             response = RedirectResponse(url="/login", status_code=302)
#             response.delete_cookie("session_token")
#             return response

#         # Th√™m user info v√†o request state
#         request.state.user = user_info
        
#         # Try to refresh token if needed
#         refreshed_token = self.session_manager.refresh_token_if_needed(session_token)
        
#         response = await call_next(request)
        
#         # Set refreshed token if available
#         if refreshed_token and refreshed_token != session_token:
#             response.set_cookie(
#                 "session_token", 
#                 refreshed_token, 
#                 httponly=True,
#                 secure=False,  # Set True in production with HTTPS
#                 samesite="lax",
#                 max_age=24*60*60  # 24 hours
#             )
#             logger.info("Session token refreshed and set in cookie")

#         return response

# src/auth/auth_middleware.py


import logging
from typing import List
from fastapi import Request, Response, HTTPException
from fastapi.responses import RedirectResponse
from starlette.middleware.base import BaseHTTPMiddleware
from .session_manager import SessionManager

logger = logging.getLogger(__name__)


class AuthMiddleware(BaseHTTPMiddleware):
    """
    Middleware x·ª≠ l√Ω authentication cho to√†n b·ªô ·ª©ng d·ª•ng FastAPI
    
    Ch·ª©c nƒÉng ch√≠nh:
    - Ki·ªÉm tra session token t·ª´ cookie cho t·∫•t c·∫£ requests
    - Redirect user ƒë·∫øn trang login n·∫øu ch∆∞a authenticate
    - B·ªè qua ki·ªÉm tra cho c√°c public paths
    - T·ª± ƒë·ªông refresh token khi c·∫ßn thi·∫øt
    - Inject user info v√†o request state
    
    Flow x·ª≠ l√Ω:
    1. Ki·ªÉm tra xem path c√≥ ph·∫£i public kh√¥ng
    2. L·∫•y session token t·ª´ cookie
    3. Verify token v·ªõi SessionManager
    4. Th√™m user info v√†o request state
    5. Refresh token n·∫øu c·∫ßn v√† set cookie m·ªõi
    """
    
    def __init__(self, app, session_manager: SessionManager, public_paths: List[str] = None):
        """
        Kh·ªüi t·∫°o Authentication Middleware
        
        Args:
            app: FastAPI application instance
            session_manager: SessionManager instance ƒë·ªÉ verify tokens
            public_paths: List c√°c paths kh√¥ng c·∫ßn authentication
        """
        super().__init__(app)
        self.session_manager = session_manager
        
        # ‚úÖ STEP 1: Thi·∫øt l·∫≠p danh s√°ch public paths m·∫∑c ƒë·ªãnh
        self.public_paths = public_paths or [
            "/login",           # Trang ƒëƒÉng nh·∫≠p
            "/auth/callback",   # OAuth callback endpoint
            "/auth/lark",       # ‚Üê TH√äM: ƒê·∫£m b·∫£o consistent v·ªõi main.py
            "/health",          # Health check endpoint
            "/static",          # Static files (CSS, JS, images)
            "/favicon.ico"      # Favicon request
        ]

    def is_public_path(self, path: str) -> bool:
        """
        Ki·ªÉm tra xem path c√≥ ph·∫£i l√† public path kh√¥ng c·∫ßn authentication
        
        Args:
            path: Request path c·∫ßn ki·ªÉm tra
            
        Returns:
            bool: True n·∫øu l√† public path, False n·∫øu c·∫ßn authentication
            
        Logic:
        - S·ª≠ d·ª•ng startswith ƒë·ªÉ match prefix paths (vd: /static/*)
        - Return True ngay khi t√¨m th·∫•y match ƒë·∫ßu ti√™n
        """
        # ‚úÖ STEP 1: Duy·ªát qua t·ª´ng public path ƒë·ªÉ ki·ªÉm tra
        return any(path.startswith(public_path) for public_path in self.public_paths)

    async def dispatch(self, request: Request, call_next):
        """
        Main middleware function x·ª≠ l√Ω authentication cho m·ªói request
        
        Args:
            request: FastAPI Request object
            call_next: Next middleware/route handler
            
        Returns:
            Response: HTTP response (c√≥ th·ªÉ l√† redirect ho·∫∑c t·ª´ route handler)
            
        Flow x·ª≠ l√Ω:
        1. Ki·ªÉm tra public path ‚Üí skip auth n·∫øu ƒë√∫ng
        2. L·∫•y session token t·ª´ cookie
        3. Verify token v·ªõi SessionManager
        4. Inject user info v√†o request state
        5. Process request v√† refresh token n·∫øu c·∫ßn
        6. Set refreshed token v√†o cookie response
        
        Error Handling:
        - No token ‚Üí redirect to /login
        - Invalid token ‚Üí redirect to /login + clear cookie
        - Token refresh fails ‚Üí log warning nh∆∞ng v·∫´n proceed
        """
        
        # ‚úÖ STEP 1: B·ªè qua authentication cho public paths
        if self.is_public_path(request.url.path):
            # Kh√¥ng c·∫ßn auth cho public endpoints
            return await call_next(request)

        # ‚úÖ STEP 2: L·∫•y session token t·ª´ HTTP cookie
        session_token = request.cookies.get("session_token")
        
        # ‚ùå ERROR CASE 1: Kh√¥ng c√≥ session token
        if not session_token:
            logger.info(f"üîç No session token, redirecting to login: {request.url.path}")
            return RedirectResponse(url="/login", status_code=302)

        # ‚úÖ STEP 3: Verify token v·ªõi SessionManager
        user_info = self.session_manager.get_user_from_token(session_token)
        
        # ‚ùå ERROR CASE 2: Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n
        if not user_info:
            logger.info(f"‚ùå Invalid session token, redirecting to login: {request.url.path}")
            # T·∫°o redirect response v√† x√≥a cookie kh√¥ng h·ª£p l·ªá
            response = RedirectResponse(url="/login", status_code=302)
            response.delete_cookie("session_token")
            return response

        # ‚úÖ STEP 4: Inject user info v√†o request state ƒë·ªÉ routes c√≥ th·ªÉ s·ª≠ d·ª•ng
        request.state.user = user_info
        
        # ‚úÖ STEP 5: Th·ª≠ refresh token n·∫øu s·∫Øp h·∫øt h·∫°n
             # Check v√† refresh token proactively
        refreshed_token = self.session_manager.refresh_token_if_needed(session_token)
        
        # ‚úÖ STEP 6: Ti·∫øp t·ª•c x·ª≠ l√Ω request v·ªõi middleware/route handler ti·∫øp theo
        response = await call_next(request)
        
        # ‚úÖ STEP 7: Set refreshed token v√†o cookie n·∫øu c√≥ token m·ªõi
        if refreshed_token and refreshed_token != session_token:
            # C·∫≠p nh·∫≠t cookie v·ªõi token m·ªõi ƒë∆∞·ª£c refresh
            response.set_cookie(
                "session_token", 
                refreshed_token, 
                httponly=True,      # B·∫£o m·∫≠t: ch·ªâ server c√≥ th·ªÉ ƒë·ªçc
                secure=False,       # Set True in production v·ªõi HTTPS
                samesite="lax",     # CSRF protection
                max_age=24*60*60    # 24 gi·ªù expiry
            )
            logger.info("‚úÖ Session token refreshed and set in cookie")

        return response

