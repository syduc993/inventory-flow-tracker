================================================================================
TH√îNG TIN D·ª∞ √ÅN HO√ÄN CH·ªàNH
================================================================================
Th·ªùi gian t·∫°o: 2025-08-06 13:48:26
Th∆∞ m·ª•c g·ªëc: d:\Atino\extension\inventory-flow-tracker
================================================================================

üìÅ C·∫§U TR√öC THU M·ª§C
--------------------------------------------------
‚îú‚îÄ‚îÄ üìÅ src/
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ styles/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÑ material_ui.py
‚îÇ   ‚îî‚îÄ‚îÄ üìÅ utils/
‚îÇ       ‚îú‚îÄ‚îÄ üìÑ api.py
‚îÇ       ‚îú‚îÄ‚îÄ üìÑ config.py
‚îÇ       ‚îî‚îÄ‚îÄ üìÑ larkbase.py
‚îú‚îÄ‚îÄ üìÑ .gitignore
‚îú‚îÄ‚îÄ üìÑ app.py
‚îú‚îÄ‚îÄ üìÑ docker-compose.yml
‚îú‚îÄ‚îÄ üìÑ Dockerfile
‚îú‚îÄ‚îÄ üìÑ Get detail code.ipynb
‚îú‚îÄ‚îÄ üìÑ project_complete_info.txt
‚îú‚îÄ‚îÄ üìÑ README.md
‚îî‚îÄ‚îÄ üìÑ requirements.txt


üìÑ DANH S√ÅCH T·∫§T C·∫¢ FILE
--------------------------------------------------
.gitignore (327 bytes)
app.py (12486 bytes)
docker-compose.yml (241 bytes)
Dockerfile (945 bytes)
Get detail code.ipynb (8697 bytes)
project_complete_info.txt (0 bytes)
README.md (260 bytes)
requirements.txt (0 bytes)
src\styles\material_ui.py (1932 bytes)
src\utils\api.py (1940 bytes)
src\utils\config.py (1673 bytes)
src\utils\larkbase.py (6380 bytes)

T·ªïng c·ªông: 12 file

üíª N·ªòI DUNG T·∫§T C·∫¢ FILE CODE
================================================================================

============================================================
FILE: app.py
============================================================
# FILE: app.py


import streamlit as st
import datetime
import time
from src.styles.material_ui import load_material_ui_css
from src.utils.api import fetch_imex_details
from src.utils.larkbase import (
    larkbase_find_by_field,
    larkbase_write_data,
    larkbase_update_data,
    larkbase_delete_record,
)
from src.utils.config import (
    LARKBASE_FIELDS, API_FIELDS,
    CREATABLE_FIELDS, UPDATABLE_FIELDS, LOCK_FIELDS
)


APP_TOKEN = "Rm9PbvKLeaFFZcsSQpElnRjIgXg"
TABLE_ID = "tblJJPUEFhsXHaxY"


# --- Helper Functions (Kh√¥ng thay ƒë·ªïi) ---
def get_current_timestamp_ms():
    return int(time.time() * 1000)


def convert_date_string_to_ms(date_string: str) -> int | None:
    if not date_string or not isinstance(date_string, str):
        return None
    try:
        dt_obj = datetime.datetime.strptime(date_string, "%Y-%m-%d %H:%M:%S")
        return int(dt_obj.timestamp() * 1000)
    except ValueError:
        return None


def format_timestamp_ms_to_string(ts_ms) -> str:
    if not ts_ms:
        return ""
    try:
        return datetime.datetime.fromtimestamp(int(ts_ms) / 1000).strftime("%Y-%m-%d %H:%M:%S")
    except (ValueError, TypeError):
        return str(ts_ms)


# --- Callback functions ƒë·ªÉ x·ª≠ l√Ω form submissions ---


def handle_success(message: str):
    """ƒê·∫∑t th√¥ng b√°o th√†nh c√¥ng v√† reset √¥ nh·∫≠p li·ªáu."""
    st.session_state.last_success_message = message
    # G√°n l·∫°i gi√° tr·ªã cho widget trong session state, ƒë√¢y l√† c√°ch l√†m ƒë√∫ng trong callback
    st.session_state.bill_id_input = ""


def handle_update(record_id, original_bill_id):
    """Callback cho n√∫t 'L∆∞u ch·ªânh s·ª≠a'."""
    update_data = {}
    date_fields = ["Ng√†y nh·∫≠n h√†ng"]
    numeric_fields = ["S·ªë l∆∞·ª£ng bao/t·∫£i giao", "S·ªë l∆∞·ª£ng bao t·∫£i nh·∫≠n", "Thi·∫øu th·ª´a bao"]

    # L·∫•y d·ªØ li·ªáu ƒë√£ s·ª≠a t·ª´ c√°c widget trong form th√¥ng qua st.session_state
    for col in UPDATABLE_FIELDS:
        key = f"update_{col}"
        if key in st.session_state:
            val = st.session_state[key]
            if col in date_fields and val is not None:
                dt_obj = datetime.datetime.combine(val, datetime.datetime.min.time())
                update_data[col] = int(dt_obj.timestamp() * 1000)
            elif val is not None:
                 update_data[col] = val

    if not update_data:
        st.warning("Kh√¥ng c√≥ thay ƒë·ªïi n√†o ƒë·ªÉ l∆∞u.")
        return

    result = larkbase_update_data(APP_TOKEN, TABLE_ID, record_id, update_data)
    if result:
        handle_success(f"üìù C·∫≠p nh·∫≠t th√†nh c√¥ng cho Bill ID: {original_bill_id}. Giao di·ªán ƒë√£ ƒë∆∞·ª£c reset.")
    else:
        st.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t d·ªØ li·ªáu!")


def handle_delete(record_id, original_bill_id):
    """Callback cho n√∫t 'X√≥a Bill n√†y' v·ªõi logic ki·ªÉm tra l·∫°i tr∆∞·ªõc khi x√≥a."""
    # 1. T·∫£i l·∫°i d·ªØ li·ªáu m·ªõi nh·∫•t c·ªßa record t·ª´ Larkbase ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng c√≥ g√¨ thay ƒë·ªïi
    st.info("ƒêang ki·ªÉm tra l·∫°i tr·∫°ng th√°i record tr∆∞·ªõc khi x√≥a...")
    latest_record = larkbase_find_by_field(APP_TOKEN, TABLE_ID, "ID", original_bill_id)

    if not latest_record:
        st.error(f"‚ùå Kh√¥ng t√¨m th·∫•y record v·ªõi Bill ID: {original_bill_id}. C√≥ th·ªÉ ƒë√£ b·ªã ng∆∞·ªùi kh√°c x√≥a.")
        # X√≥a th√¥ng b√°o info
        st.empty()
        return

    # 2. Ki·ªÉm tra l·∫°i ƒëi·ªÅu ki·ªán kh√≥a tr√™n d·ªØ li·ªáu m·ªõi nh·∫•t
    fields = latest_record.get("fields", {})
    has_lock_values = any(fields.get(f) for f in LOCK_FIELDS)

    # 3. N·∫øu b·ªã kh√≥a, b√°o l·ªói v√† d·ª´ng l·∫°i
    if has_lock_values:
        locked_fields_found = [f for f in LOCK_FIELDS if fields.get(f)]
        st.error(
            f"‚ùå Kh√¥ng th·ªÉ x√≥a! Record ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t b·ªüi ng∆∞·ªùi kh√°c v√† b·ªã kh√≥a b·ªüi c√°c tr∆∞·ªùng: "
            f"{', '.join(locked_fields_found)}. Vui l√≤ng t·∫£i l·∫°i trang."
        )
        # X√≥a th√¥ng b√°o info
        st.empty()
        return

    # 4. N·∫øu kh√¥ng b·ªã kh√≥a, ti·∫øn h√†nh x√≥a
    result = larkbase_delete_record(APP_TOKEN, TABLE_ID, record_id)
    if result:
        handle_success(f"üóëÔ∏è ƒê√£ x√≥a th√†nh c√¥ng Bill ID: {original_bill_id}. Giao di·ªán ƒë√£ ƒë∆∞·ª£c reset.")
    else:
        st.error("‚ùå X√≥a kh√¥ng th√†nh c√¥ng!")


def handle_create(api_data, original_bill_id):
    """Callback cho n√∫t 'Th√™m m·ªõi v√†o Larkbase'."""
    new_fields = {}
    # L·∫•y d·ªØ li·ªáu t·ª´ c√°c widget trong form
    for col in CREATABLE_FIELDS:
        key = f"add_{col}"
        if key in st.session_state:
            new_fields[col] = st.session_state[key]

    # Th√™m c√°c tr∆∞·ªùng t·ª± ƒë·ªông t·∫°o
    new_fields["ID"] = api_data['ID']
    new_fields["Ng√†y b√†n giao"] = get_current_timestamp_ms()

    record_data = {**new_fields, **api_data}
    final_record_data = {k: v for k, v in record_data.items() if v is not None and str(v) != ""}

    try:
        ok = larkbase_write_data(APP_TOKEN, TABLE_ID, final_record_data)
        if ok:
            # L·∫•y th√¥ng tin ƒë√£ nh·∫≠p ƒë·ªÉ hi·ªÉn th·ªã trong th√¥ng b√°o
            so_luong_giao = new_fields.get("S·ªë l∆∞·ª£ng bao/t·∫£i giao", "kh√¥ng c√≥")
            nguoi_ban_giao = new_fields.get("Ng∆∞·ªùi b√†n giao", "kh√¥ng c√≥")

            # T·∫°o chu·ªói th√¥ng b√°o m·ªõi
            success_message = (
                f"‚úÖ ƒê√£ th√™m th√†nh c√¥ng Bill ID: {original_bill_id}. "
                f"S·ªë l∆∞·ª£ng bao/t·∫£i giao: {so_luong_giao}. "
                f"Ng∆∞·ªùi b√†n giao: '{nguoi_ban_giao}'."
            )
            handle_success(success_message)
        else:
            st.error("‚ùå Kh√¥ng th·ªÉ th√™m m·ªõi. Ki·ªÉm tra l·∫°i th√¥ng b√°o l·ªói t·ª´ API b√™n tr√™n n·∫øu c√≥.")
    except Exception as e:
        st.error(f"L·ªói khi ghi d·ªØ li·ªáu: {e}")



# --- Streamlit App UI ---
st.set_page_config(layout="centered")


# Kh·ªüi t·∫°o session state n·∫øu ch∆∞a t·ªìn t·∫°i
if 'last_success_message' not in st.session_state:
    st.session_state.last_success_message = None
if 'bill_id_input' not in st.session_state:
    st.session_state.bill_id_input = ""


load_material_ui_css()
st.markdown(
    '<div style="text-align:center;"><h2>üì¶ Ph√¢n ph·ªëi giao nh·∫≠n IMEX</h2>'
    '<p style="color:#1976d2"><b>Nh·∫≠p Bill ID, tra c·ª©u, th√™m, s·ª≠a, x√≥a th√¥ng tin giao nh·∫≠n</b></p></div>',
    unsafe_allow_html=True,
)


# Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng (n·∫øu c√≥) v√† x√≥a ƒëi
if st.session_state.last_success_message:
    st.success(st.session_state.last_success_message)
    st.session_state.last_success_message = None


# Gi√° tr·ªã c·ªßa widget gi·ªù s·∫Ω ƒë∆∞·ª£c ƒëi·ªÅu khi·ªÉn b·ªüi c√°c h√†m callback
bill_id = st.text_input(
    "Nh·∫≠p Bill ID:",
    placeholder="Nh·∫≠p m√£ Bill ID giao nh·∫≠n",
    key="bill_id_input"
).strip()


if bill_id:
    record = larkbase_find_by_field(APP_TOKEN, TABLE_ID, "ID", bill_id)


    # --- RECORD EXISTS: VIEW / UPDATE / DELETE ---
    if record:
        fields = record.get("fields", {})
        st.markdown(f"<b>ƒê√£ t·ªìn t·∫°i th√¥ng tin Bill ID <span style='color: #1976d2'>{bill_id}</span>!</b>", unsafe_allow_html=True)

        has_lock_values = any(fields.get(f) for f in LOCK_FIELDS)
        numeric_fields = ["S·ªë l∆∞·ª£ng bao/t·∫£i giao", "S·ªë l∆∞·ª£ng bao t·∫£i nh·∫≠n", "Thi·∫øu th·ª´a bao"]
        date_fields = ["Ng√†y nh·∫≠n h√†ng"]

        with st.form("update_or_delete"):
            for col in LARKBASE_FIELDS:
                val = fields.get(col, "")
                is_editable = (col in UPDATABLE_FIELDS) and not (col in LOCK_FIELDS and val)

                if not is_editable:
                    display_val = format_timestamp_ms_to_string(val) if col in date_fields or col == "Ng√†y b√†n giao" else val
                    st.text_input(col, display_val, key=f"readonly_{col}", disabled=True)
                else:
                    if col in numeric_fields:
                        default_val = int(val) if val else 0
                        st.number_input(col, key=f"update_{col}", step=1, value=default_val, format="%d")
                    elif col in date_fields:
                        default_val = datetime.datetime.fromtimestamp(int(val) / 1000).date() if val else None
                        st.date_input(col, key=f"update_{col}", value=default_val)
                    else:
                        st.text_input(col, val, key=f"update_{col}")

            col1, col2 = st.columns(2)
            with col1:
                st.form_submit_button(
                    "L∆∞u ch·ªânh s·ª≠a",
                    on_click=handle_update,
                    args=(record["record_id"], bill_id),
                    use_container_width=True
                )

            can_delete = not has_lock_values
            with col2:
                st.form_submit_button(
                    "X√≥a Bill n√†y",
                    disabled=not can_delete,
                    type="secondary",
                    on_click=handle_delete,
                    args=(record["record_id"], bill_id),
                    use_container_width=True
                )

            if not can_delete:
                st.info(f"L∆∞u √Ω: Bill n√†y kh√¥ng th·ªÉ x√≥a v√¨ ƒë√£ c√≥ th√¥ng tin ·ªü m·ªôt trong c√°c tr∆∞·ªùng sau: {', '.join(LOCK_FIELDS)}. Do ƒë√≥, n√∫t x√≥a ƒë√£ ƒë∆∞·ª£c v√¥ hi·ªáu h√≥a.")


    # --- RECORD NOT FOUND: CREATE NEW ---
    else:
        st.info(f"ƒêang t·ª± ƒë·ªông tra c·ª©u v√† th√™m m·ªõi Bill ID: {bill_id}...")

        with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu t·ª´ API..."):
            imex_items = fetch_imex_details(bill_id)

        if not imex_items:
            st.error("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu chi ti·∫øt, ki·ªÉm tra l·∫°i Bill ID.")
        else:
            example_item = imex_items[0]
            api_data = {
                "ID": bill_id, "Kho ƒëi": example_item.get("fromDepotId", ""), "Kho ƒë·∫øn": example_item.get("toDepotId", ""),
                "S·ªë l∆∞·ª£ng": int(example_item.get("realQuantity") or 0), "S·ªë l∆∞·ª£ng s·∫£n ph·∫©m y√™u c·∫ßu": int(example_item.get("requiredQuantity") or 0),
                "S·ªë l∆∞·ª£ng s·∫£n ph·∫©m h·ªèng": int(example_item.get("damagedQuantity") or 0), "S·ªë l∆∞·ª£ng s·∫£n ph·∫©m y√™u c·∫ßu ƒë∆∞·ª£c duy·ªát": int(example_item.get("approvedQuantity") or 0),
                "S·ªë l∆∞·ª£ng s·∫£n ph·∫©m y√™u c·∫ßu ƒë∆∞·ª£c x√°c nh·∫≠n": int(example_item.get("realQuantity") or 0), "Ng√†y t·∫°o": convert_date_string_to_ms(example_item.get("requiredAt", "")),
                "Ng√†y duy·ªát": convert_date_string_to_ms(example_item.get("approvedAt", "")), "Ng√†y x√°c nh·∫≠n": convert_date_string_to_ms(example_item.get("confirmedAt", "")),
                "Ng∆∞·ªùi x√°c nh·∫≠n": example_item.get("approvedByUser", ""),
            }

            with st.form("create_new"):
                numeric_fields = ["S·ªë l∆∞·ª£ng bao/t·∫£i giao"]

                for col in LARKBASE_FIELDS:
                    is_creatable = col in CREATABLE_FIELDS
                    if is_creatable:
                        if col in numeric_fields:
                            st.number_input(col, key=f"add_{col}", step=1, value=0, format="%d")
                        else:
                            st.text_input(col, "", key=f"add_{col}")
                    else:
                        if col == "ID":
                            st.text_input(col, api_data['ID'], key=f"add_{col}_disabled", disabled=True)
                        elif col == "Ng√†y b√†n giao":
                            ts_ms = get_current_timestamp_ms()
                            st.text_input(col, format_timestamp_ms_to_string(ts_ms), key=f"add_{col}_disabled", disabled=True)
                        else:
                            st.text_input(col, "", key=f"add_{col}_disabled", disabled=True, help="Tr∆∞·ªùng n√†y s·∫Ω ƒë∆∞·ª£c nh·∫≠p ·ªü b∆∞·ªõc c·∫≠p nh·∫≠t sau.")

                st.form_submit_button(
                    "Th√™m m·ªõi v√†o Larkbase",
                    on_click=handle_create,
                    args=(api_data, bill_id),
                    use_container_width=True
                )

============================================================

============================================================
FILE: docker-compose.yml
============================================================
vversion: '3.8'
services:
  imex-distribution-app:
    build: .
    ports:
      - "8080:8080"
    volumes:
      - ./src:/app/src
    environment:
      - STREAMLIT_SERVER_HEADLESS=true
      - STREAMLIT_SERVER_ENABLE_CORS=false

============================================================

============================================================
FILE: project_complete_info.txt
============================================================
================================================================================
TH√îNG TIN D·ª∞ √ÅN HO√ÄN CH·ªàNH
================================================================================
Th·ªùi gian t·∫°o: 2025-08-06 13:48:26
Th∆∞ m·ª•c g·ªëc: d:\Atino\extension\inventory-flow-tracker
================================================================================

üìÅ C·∫§U TR√öC THU M·ª§C
--------------------------------------------------
‚îú‚îÄ‚îÄ üìÅ src/
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ styles/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÑ material_ui.py
‚îÇ   ‚îî‚îÄ‚îÄ üìÅ utils/
‚îÇ       ‚îú‚îÄ‚îÄ üìÑ api.py
‚îÇ       ‚îú‚îÄ‚îÄ üìÑ config.py
‚îÇ       ‚îî‚îÄ‚îÄ üìÑ larkbase.py
‚îú‚îÄ‚îÄ üìÑ .gitignore
‚îú‚îÄ‚îÄ üìÑ app.py
‚îú‚îÄ‚îÄ üìÑ docker-compose.yml
‚îú‚îÄ‚îÄ üìÑ Dockerfile
‚îú‚îÄ‚îÄ üìÑ Get detail code.ipynb
‚îú‚îÄ‚îÄ üìÑ project_complete_info.txt
‚îú‚îÄ‚îÄ üìÑ README.md
‚îî‚îÄ‚îÄ üìÑ requirements.txt


üìÑ DANH S√ÅCH T·∫§T C·∫¢ FILE
--------------------------------------------------
.gitignore (327 bytes)
app.py (12486 bytes)
docker-compose.yml (241 bytes)
Dockerfile (945 bytes)
Get detail code.ipynb (8697 bytes)
project_complete_info.txt (0 bytes)
README.md (260 bytes)
requirements.txt (0 bytes)
src\styles\material_ui.py (1932 bytes)
src\utils\api.py (1940 bytes)
src\utils\config.py (1673 bytes)
src\utils\larkbase.py (6380 bytes)

T·ªïng c·ªông: 12 file

üíª N·ªòI DUNG T·∫§T C·∫¢ FILE CODE
================================================================================

============================================================
FILE: app.py
============================================================
# FILE: app.py


import streamlit as st
import datetime
import time
from src.styles.material_ui import load_material_ui_css
from src.utils.api import fetch_imex_details
from src.utils.larkbase import (
    larkbase_find_by_field,
    larkbase_write_data,
    larkbase_update_data,
    larkbase_delete_record,
)
from src.utils.config import (
    LARKBASE_FIELDS, API_FIELDS,
    CREATABLE_FIELDS, UPDATABLE_FIELDS, LOCK_FIELDS
)


APP_TOKEN = "Rm9PbvKLeaFFZcsSQpElnRjIgXg"
TABLE_ID = "tblJJPUEFhsXHaxY"


# --- Helper Functions (Kh√¥ng thay ƒë·ªïi) ---
def get_current_timestamp_ms():
    return int(time.time() * 1000)


def convert_date_string_to_ms(date_string: str) -> int | None:
    if not date_string or not isinstance(date_string, str):
        return None
    try:
        dt_obj = datetime.datetime.strptime(date_string, "%Y-%m-%d %H:%M:%S")
        return int(dt_obj.timestamp() * 1000)
    except ValueError:
        return None


def format_timestamp_ms_to_string(ts_ms) -> str:
    if not ts_ms:
        return ""
    try:
        return datetime.datetime.fromtimestamp(int(ts_ms) / 1000).strftime("%Y-%m-%d %H:%M:%S")
    except (ValueError, TypeError):
        return str(ts_ms)


# --- Callback functions ƒë·ªÉ x·ª≠ l√Ω form submissions ---


def handle_success(message: str):
    """ƒê·∫∑t th√¥ng b√°o th√†nh c√¥ng v√† reset √¥ nh·∫≠p li·ªáu."""
    st.session_state.last_success_message = message
    # G√°n l·∫°i gi√° tr·ªã cho widget trong session state, ƒë√¢y l√† c√°ch l√†m ƒë√∫ng trong callback
    st.session_state.bill_id_input = ""


def handle_update(record_id, original_bill_id):
    """Callback cho n√∫t 'L∆∞u ch·ªânh s·ª≠a'."""
    update_data = {}
    date_fields = ["Ng√†y nh·∫≠n h√†ng"]
    numeric_fields = ["S·ªë l∆∞·ª£ng bao/t·∫£i giao", "S·ªë l∆∞·ª£ng bao t·∫£i nh·∫≠n", "Thi·∫øu th·ª´a bao"]

    # L·∫•y d·ªØ li·ªáu ƒë√£ s·ª≠a t·ª´ c√°c widget trong form th√¥ng qua st.session_state
    for col in UPDATABLE_FIELDS:
        key = f"update_{col}"
        if key in st.session_state:
            val = st.session_state[key]
            if col in date_fields and val is not None:
                dt_obj = datetime.datetime.combine(val, datetime.datetime.min.time())
                update_data[col] = int(dt_obj.timestamp() * 1000)
            elif val is not None:
                 update_data[col] = val

    if not update_data:
        st.warning("Kh√¥ng c√≥ thay ƒë·ªïi n√†o ƒë·ªÉ l∆∞u.")
        return

    result = larkbase_update_data(APP_TOKEN, TABLE_ID, record_id, update_data)
    if result:
        handle_success(f"üìù C·∫≠p nh·∫≠t th√†nh c√¥ng cho Bill ID: {original_bill_id}. Giao di·ªán ƒë√£ ƒë∆∞·ª£c reset.")
    else:
        st.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t d·ªØ li·ªáu!")


def handle_delete(record_id, original_bill_id):
    """Callback cho n√∫t 'X√≥a Bill n√†y' v·ªõi logic ki·ªÉm tra l·∫°i tr∆∞·ªõc khi x√≥a."""
    # 1. T·∫£i l·∫°i d·ªØ li·ªáu m·ªõi nh·∫•t c·ªßa record t·ª´ Larkbase ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng c√≥ g√¨ thay ƒë·ªïi
    st.info("ƒêang ki·ªÉm tra l·∫°i tr·∫°ng th√°i record tr∆∞·ªõc khi x√≥a...")
    latest_record = larkbase_find_by_field(APP_TOKEN, TABLE_ID, "ID", original_bill_id)

    if not latest_record:
        st.error(f"‚ùå Kh√¥ng t√¨m th·∫•y record v·ªõi Bill ID: {original_bill_id}. C√≥ th·ªÉ ƒë√£ b·ªã ng∆∞·ªùi kh√°c x√≥a.")
        # X√≥a th√¥ng b√°o info
        st.empty()
        return

    # 2. Ki·ªÉm tra l·∫°i ƒëi·ªÅu ki·ªán kh√≥a tr√™n d·ªØ li·ªáu m·ªõi nh·∫•t
    fields = latest_record.get("fields", {})
    has_lock_values = any(fields.get(f) for f in LOCK_FIELDS)

    # 3. N·∫øu b·ªã kh√≥a, b√°o l·ªói v√† d·ª´ng l·∫°i
    if has_lock_values:
        locked_fields_found = [f for f in LOCK_FIELDS if fields.get(f)]
        st.error(
            f"‚ùå Kh√¥ng th·ªÉ x√≥a! Record ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t b·ªüi ng∆∞·ªùi kh√°c v√† b·ªã kh√≥a b·ªüi c√°c tr∆∞·ªùng: "
            f"{', '.join(locked_fields_found)}. Vui l√≤ng t·∫£i l·∫°i trang."
        )
        # X√≥a th√¥ng b√°o info
        st.empty()
        return

    # 4. N·∫øu kh√¥ng b·ªã kh√≥a, ti·∫øn h√†nh x√≥a
    result = larkbase_delete_record(APP_TOKEN, TABLE_ID, record_id)
    if result:
        handle_success(f"üóëÔ∏è ƒê√£ x√≥a th√†nh c√¥ng Bill ID: {original_bill_id}. Giao di·ªán ƒë√£ ƒë∆∞·ª£c reset.")
    else:
        st.error("‚ùå X√≥a kh√¥ng th√†nh c√¥ng!")


def handle_create(api_data, original_bill_id):
    """Callback cho n√∫t 'Th√™m m·ªõi v√†o Larkbase'."""
    new_fields = {}
    # L·∫•y d·ªØ li·ªáu t·ª´ c√°c widget trong form
    for col in CREATABLE_FIELDS:
        key = f"add_{col}"
        if key in st.session_state:
            new_fields[col] = st.session_state[key]

    # Th√™m c√°c tr∆∞·ªùng t·ª± ƒë·ªông t·∫°o
    new_fields["ID"] = api_data['ID']
    new_fields["Ng√†y b√†n giao"] = get_current_timestamp_ms()

    record_data = {**new_fields, **api_data}
    final_record_data = {k: v for k, v in record_data.items() if v is not None and str(v) != ""}

    try:
        ok = larkbase_write_data(APP_TOKEN, TABLE_ID, final_record_data)
        if ok:
            # L·∫•y th√¥ng tin ƒë√£ nh·∫≠p ƒë·ªÉ hi·ªÉn th·ªã trong th√¥ng b√°o
            so_luong_giao = new_fields.get("S·ªë l∆∞·ª£ng bao/t·∫£i giao", "kh√¥ng c√≥")
            nguoi_ban_giao = new_fields.get("Ng∆∞·ªùi b√†n giao", "kh√¥ng c√≥")

            # T·∫°o chu·ªói th√¥ng b√°o m·ªõi
            success_message = (
                f"‚úÖ ƒê√£ th√™m th√†nh c√¥ng Bill ID: {original_bill_id}. "
                f"S·ªë l∆∞·ª£ng bao/t·∫£i giao: {so_luong_giao}. "
                f"Ng∆∞·ªùi b√†n giao: '{nguoi_ban_giao}'."
            )
            handle_success(success_message)
        else:
            st.error("‚ùå Kh√¥ng th·ªÉ th√™m m·ªõi. Ki·ªÉm tra l·∫°i th√¥ng b√°o l·ªói t·ª´ API b√™n tr√™n n·∫øu c√≥.")
    except Exception as e:
        st.error(f"L·ªói khi ghi d·ªØ li·ªáu: {e}")



# --- Streamlit App UI ---
st.set_page_config(layout="centered")


# Kh·ªüi t·∫°o session state n·∫øu ch∆∞a t·ªìn t·∫°i
if 'last_success_message' not in st.session_state:
    st.session_state.last_success_message = None
if 'bill_id_input' not in st.session_state:
    st.session_state.bill_id_input = ""


load_material_ui_css()
st.markdown(
    '<div style="text-align:center;"><h2>üì¶ Ph√¢n ph·ªëi giao nh·∫≠n IMEX</h2>'
    '<p style="color:#1976d2"><b>Nh·∫≠p Bill ID, tra c·ª©u, th√™m, s·ª≠a, x√≥a th√¥ng tin giao nh·∫≠n</b></p></div>',
    unsafe_allow_html=True,
)


# Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng (n·∫øu c√≥) v√† x√≥a ƒëi
if st.session_state.last_success_message:
    st.success(st.session_state.last_success_message)
    st.session_state.last_success_message = None


# Gi√° tr·ªã c·ªßa widget gi·ªù s·∫Ω ƒë∆∞·ª£c ƒëi·ªÅu khi·ªÉn b·ªüi c√°c h√†m callback
bill_id = st.text_input(
    "Nh·∫≠p Bill ID:",
    placeholder="Nh·∫≠p m√£ Bill ID giao nh·∫≠n",
    key="bill_id_input"
).strip()


if bill_id:
    record = larkbase_find_by_field(APP_TOKEN, TABLE_ID, "ID", bill_id)


    # --- RECORD EXISTS: VIEW / UPDATE / DELETE ---
    if record:
        fields = record.get("fields", {})
        st.markdown(f"<b>ƒê√£ t·ªìn t·∫°i th√¥ng tin Bill ID <span style='color: #1976d2'>{bill_id}</span>!</b>", unsafe_allow_html=True)

        has_lock_values = any(fields.get(f) for f in LOCK_FIELDS)
        numeric_fields = ["S·ªë l∆∞·ª£ng bao/t·∫£i giao", "S·ªë l∆∞·ª£ng bao t·∫£i nh·∫≠n", "Thi·∫øu th·ª´a bao"]
        date_fields = ["Ng√†y nh·∫≠n h√†ng"]

        with st.form("update_or_delete"):
            for col in LARKBASE_FIELDS:
                val = fields.get(col, "")
                is_editable = (col in UPDATABLE_FIELDS) and not (col in LOCK_FIELDS and val)

                if not is_editable:
                    display_val = format_timestamp_ms_to_string(val) if col in date_fields or col == "Ng√†y b√†n giao" else val
                    st.text_input(col, display_val, key=f"readonly_{col}", disabled=True)
                else:
                    if col in numeric_fields:
                        default_val = int(val) if val else 0
                        st.number_input(col, key=f"update_{col}", step=1, value=default_val, format="%d")
                    elif col in date_fields:
                        default_val = datetime.datetime.fromtimestamp(int(val) / 1000).date() if val else None
                        st.date_input(col, key=f"update_{col}", value=default_val)
                    else:
                        st.text_input(col, val, key=f"update_{col}")

            col1, col2 = st.columns(2)
            with col1:
                st.form_submit_button(
                    "L∆∞u ch·ªânh s·ª≠a",
                    on_click=handle_update,
                    args=(record["record_id"], bill_id),
                    use_container_width=True
                )

            can_delete = not has_lock_values
            with col2:
                st.form_submit_button(
                    "X√≥a Bill n√†y",
                    disabled=not can_delete,
                    type="secondary",
                    on_click=handle_delete,
                    args=(record["record_id"], bill_id),
                    use_container_width=True
                )

            if not can_delete:
                st.info(f"L∆∞u √Ω: Bill n√†y kh√¥ng th·ªÉ x√≥a v√¨ ƒë√£ c√≥ th√¥ng tin ·ªü m·ªôt trong c√°c tr∆∞·ªùng sau: {', '.join(LOCK_FIELDS)}. Do ƒë√≥, n√∫t x√≥a ƒë√£ ƒë∆∞·ª£c v√¥ hi·ªáu h√≥a.")


    # --- RECORD NOT FOUND: CREATE NEW ---
    else:
        st.info(f"ƒêang t·ª± ƒë·ªông tra c·ª©u v√† th√™m m·ªõi Bill ID: {bill_id}...")

        with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu t·ª´ API..."):
            imex_items = fetch_imex_details(bill_id)

        if not imex_items:
            st.error("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu chi ti·∫øt, ki·ªÉm tra l·∫°i Bill ID.")
        else:
            example_item = imex_items[0]
            api_data = {
                "ID": bill_id, "Kho ƒëi": example_item.get("fromDepotId", ""), "Kho ƒë·∫øn": example_item.get("toDepotId", ""),
                "S·ªë l∆∞·ª£ng": int(example_item.get("realQuantity") or 0), "S·ªë l∆∞·ª£ng s·∫£n ph·∫©m y√™u c·∫ßu": int(example_item.get("requiredQuantity") or 0),
                "S·ªë l∆∞·ª£ng s·∫£n ph·∫©m h·ªèng": int(example_item.get("damagedQuantity") or 0), "S·ªë l∆∞·ª£ng s·∫£n ph·∫©m y√™u c·∫ßu ƒë∆∞·ª£c duy·ªát": int(example_item.get("approvedQuantity") or 0),
                "S·ªë l∆∞·ª£ng s·∫£n ph·∫©m y√™u c·∫ßu ƒë∆∞·ª£c x√°c nh·∫≠n": int(example_item.get("realQuantity") or 0), "Ng√†y t·∫°o": convert_date_string_to_ms(example_item.get("requiredAt", "")),
                "Ng√†y duy·ªát": convert_date_string_to_ms(example_item.get("approvedAt", "")), "Ng√†y x√°c nh·∫≠n": convert_date_string_to_ms(example_item.get("confirmedAt", "")),
                "Ng∆∞·ªùi x√°c nh·∫≠n": example_item.get("approvedByUser", ""),
            }

            with st.form("create_new"):
                numeric_fields = ["S·ªë l∆∞·ª£ng bao/t·∫£i giao"]

                for col in LARKBASE_FIELDS:
                    is_creatable = col in CREATABLE_FIELDS
                    if is_creatable:
                        if col in numeric_fields:
                            st.number_input(col, key=f"add_{col}", step=1, value=0, format="%d")
                        else:
                            st.text_input(col, "", key=f"add_{col}")
                    else:
                        if col == "ID":
                            st.text_input(col, api_data['ID'], key=f"add_{col}_disabled", disabled=True)
                        elif col == "Ng√†y b√†n giao":
                            ts_ms = get_current_timestamp_ms()
                            st.text_input(col, format_timestamp_ms_to_string(ts_ms), key=f"add_{col}_disabled", disabled=True)
                        else:
                            st.text_input(col, "", key=f"add_{col}_disabled", disabled=True, help="Tr∆∞·ªùng n√†y s·∫Ω ƒë∆∞·ª£c nh·∫≠p ·ªü b∆∞·ªõc c·∫≠p nh·∫≠t sau.")

                st.form_submit_button(
                    "Th√™m m·ªõi v√†o Larkbase",
                    on_click=handle_create,
                    args=(api_data, bill_id),
                    use_container_width=True
                )

============================================================

============================================================
FILE: README.md
============================================================
# üì¶ IMEX Distribution App

·ª®ng d·ª•ng Streamlit gi√∫p ki·ªÉm tra t·ªïng requiredQuantity c·ªßa 1 Bill ID IMEX t·ª´ API, nh·∫≠p c√°c th√¥ng tin giao nh·∫≠n v√† l∆∞u k·∫øt qu·∫£ l√™n Larkbase.

## üöÄ H∆∞·ªõng d·∫´n ch·∫°y nhanh

**B·∫±ng Python:**

============================================================

============================================================
FILE: requirements.txt
============================================================

============================================================

============================================================
FILE: src\styles\material_ui.py
============================================================
import streamlit as st

def load_material_ui_css():
    st.markdown("""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap');
    html, body, .main {font-family: 'Roboto', Arial, sans-serif;}
    .material-card {
        background: #fff;
        border-radius: 10px;
        box-shadow: 0 2px 8px rgba(33,150,243,.08);
        padding: 2rem 2rem 1.5rem 2rem;
        margin: 32px 0 16px 0;
        border: 1px solid #eee;
    }
    .material-header {
        color: #1976d2;
        margin-bottom: 18px;
        font-weight: 600;
        letter-spacing: 1px;
    }
    .stButton>button {
        width: 100%;
        background: #1976d2;
        color: white;
        border: none;
        border-radius: 6px;
        padding: 10px 0;
        font-weight: 600;
        font-size: 16px;
        margin-top: 8px;
    }
    .stButton>button:hover {background: #125ca0;}
    .material-success {
        background: #e8f5e9;
        border-left: 4px solid #43a047;
        padding: 12px; margin-bottom: 12px; border-radius: 8px;
        color: #256029;
    }
    .material-error {
        background: #ffebee;
        border-left: 4px solid #e53935;
        padding: 12px; margin-bottom: 12px; border-radius: 8px;
        color: #b71c1c;
    }
    .material-info {
        background: #e3f2fd;
        color: #0d47a1;
        padding: 12px; margin-bottom: 12px; border-radius: 8px;
        border-left: 4px solid #2196f3;
    }
    .material-table th {
        background: #e3f2fd;
        color: #1976d2;
        font-weight: 600 !important;
    }
    </style>
    """, unsafe_allow_html=True)


def material_card(title: str, body: str):
    st.markdown(f"""
    <div class="material-card">
        <div class="material-header">{title}</div>
        <div>{body}</div>
    </div>
    """, unsafe_allow_html=True)

============================================================

============================================================
FILE: src\utils\api.py
============================================================
import requests
import json

def fetch_imex_details(bill_id: int) -> list[dict] | None:
    """
    G·ªçi API l·∫•y chi ti·∫øt danh s√°ch imex cho bill_id.
    Tr·∫£ v·ªÅ list dict, m·ªói dict c√≥ c√°c tr∆∞·ªùng:
        requiredQuantity, damagedQuantity, approvedQuantity, realQuantity
    Ho·∫∑c None n·∫øu l·ªói.
    """
    url = "https://open.nhanh.vn/api/bill/imexrequirements"
    payload = {
        "version": "2.0",
        "appId": "74951",
        "businessId": "8901",
        "accessToken": "twf9P1xFZCUUgwt8zR0XgNeB6V5jsbq2KHb14bxovqK1ppCxyADwOK8FzQlCEeEGABRZINXoUCSzM50kjhwcrUSBWTY5nSvyhfnH2X2cI0pC7pNczSVxc1ratdDmxF85q7hUTUNCrUnpPTG5ZwLNO7bkMlEEJTCdPhgYaC",
        "data": json.dumps({"billId": int(bill_id)})
    }
    res = requests.post(url, data=payload)
    if res.status_code == 200:
        try:
            res_json = res.json()
            if res_json.get("code") == 1:
                imexs = res_json.get("data", {}).get("imexs", {})
                result = []
                for item in imexs.values():
                    result.append({
                        "requiredQuantity": item.get("requiredQuantity", ""),
                        "damagedQuantity": item.get("damagedQuantity", ""),
                        "approvedQuantity": item.get("approvedQuantity", ""),
                        "realQuantity": item.get("realQuantity", ""),
                        "approvedByUser": item.get("approvedByUser", ""),
                        "requiredAt": item.get("requiredAt", ""),
                        "approvedAt": item.get("approvedAt", ""),
                        "confirmedAt": item.get("confirmedAt", ""),
                        "fromDepotId": item.get("fromDepotId", ""),
                        "toDepotId": item.get("toDepotId", ""),
                    })
                return result
        except Exception:
            return None
    return None

============================================================

============================================================
FILE: src\utils\config.py
============================================================
# src/utils/config.py

# Danh s√°ch c·ªôt hi·ªÉn th·ªã trong form (theo th·ª© t·ª± mong mu·ªën)
LARKBASE_FIELDS = [
    "ID",
    "S·ªë l∆∞·ª£ng bao/t·∫£i giao", 
    "Ng∆∞·ªùi b√†n giao",
    "Ng√†y b√†n giao",
    "S·ªë l∆∞·ª£ng bao t·∫£i nh·∫≠n",
    "Ng∆∞·ªùi nh·∫≠n", 
    "Ng√†y nh·∫≠n h√†ng",
    "Thi·∫øu th·ª´a bao"
]

# === QUY T·∫ÆC NH·∫¨P LI·ªÜU ===

# C√°c tr∆∞·ªùng ng∆∞·ªùi d√πng c√≥ th·ªÉ nh·∫≠p li·ªáu khi T·∫†O M·ªöI b·∫£n ghi.
CREATABLE_FIELDS = [
    "S·ªë l∆∞·ª£ng bao/t·∫£i giao",
    "Ng∆∞·ªùi b√†n giao",
]

# C√°c tr∆∞·ªùng ng∆∞·ªùi d√πng c√≥ th·ªÉ nh·∫≠p li·ªáu khi C·∫¨P NH·∫¨T b·∫£n ghi.
UPDATABLE_FIELDS = [
    "S·ªë l∆∞·ª£ng bao/t·∫£i giao",
    "Ng∆∞·ªùi b√†n giao"
]

# C√°c tr∆∞·ªùng khi ƒë√£ c√≥ d·ªØ li·ªáu s·∫Ω:
# 1. T·ª± kh√≥a ch√≠nh n√≥, kh√¥ng cho s·ª≠a n·ªØa.
# 2. Kh√≥a kh√¥ng cho x√≥a to√†n b·ªô b·∫£n ghi.
# *** FIX: Th√™m "Thi·∫øu th·ª´a bao" v√†o danh s√°ch kh√≥a ***
LOCK_FIELDS = [
    "S·ªë l∆∞·ª£ng bao t·∫£i nh·∫≠n",
    "Ng∆∞·ªùi nh·∫≠n",
    "Ng√†y nh·∫≠n h√†ng"
]

# === D·ªÆ LI·ªÜU N·ªÄN ===

# C√°c c·ªôt l·∫•y t·ª´ API (kh√¥ng hi·ªÉn th·ªã trong form nh∆∞ng v·∫´n l∆∞u v√†o database)
API_FIELDS = [
    "Kho ƒëi", "Kho ƒë·∫øn", "S·ªë l∆∞·ª£ng", "S·ªë l∆∞·ª£ng s·∫£n ph·∫©m y√™u c·∫ßu",
    "S·ªë l∆∞·ª£ng s·∫£n ph·∫©m h·ªèng", "S·ªë l∆∞·ª£ng s·∫£n ph·∫©m y√™u c·∫ßu ƒë∆∞·ª£c duy·ªát",
    "S·ªë l∆∞·ª£ng s·∫£n ph·∫©m y√™u c·∫ßu ƒë∆∞·ª£c x√°c nh·∫≠n", "Ng√†y t·∫°o", "Ng√†y duy·ªát", 
    "Ng√†y x√°c nh·∫≠n", "Ng∆∞·ªùi x√°c nh·∫≠n"
]

# To√†n b·ªô fields ƒë·ªÉ l∆∞u v√†o Larkbase (hi·ªán kh√¥ng d√πng trong app.py)
ALL_LARKBASE_FIELDS = LARKBASE_FIELDS + API_FIELDS

============================================================

============================================================
FILE: src\utils\larkbase.py
============================================================
import requests
import streamlit as st

API_ENDPOINT = 'https://open.larksuite.com/open-apis'
API_HOST = "https://open.larksuite.com/open-apis/bitable/v1/apps"

# L·∫•y access token (t·ª± ƒë·ªông l·∫•y l·∫°i n·∫øu c√≥ s·∫µn trong session)
def larkbase_get_token(app_id=None, app_secret=None, endpoint=API_ENDPOINT):
    APP_ID = app_id or 'cli_a7fab27260385010'
    APP_SECRET = app_secret or 'Zg4MVcFfiOu0g09voTcpfd4WGDpA0Ly5'
    url = f"{endpoint}/auth/v3/tenant_access_token/internal"
    try:
        resp = requests.post(url, json={'app_id': APP_ID, 'app_secret': APP_SECRET})
        if resp.status_code == 200:
            data = resp.json()
            if data.get('code') == 0:
                return data['tenant_access_token']
    except Exception as e:
        st.error(f"‚ùå L·ªói khi l·∫•y token: {e}")
    return None

def get_headers(token):
    return {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }

# --- READ ---

# L·∫•y to√†n b·ªô record (v·ªõi ph√¢n trang)
def larkbase_get_all(app_token, table_id):
    token = larkbase_get_token()
    if not token:
        st.error("‚ùå Kh√¥ng x√°c th·ª±c ƒë∆∞·ª£c v·ªõi Larkbase.")
        return []

    all_records = []
    page_token = ""
    
    while True:
        try:
            url = f"{API_HOST}/{app_token}/tables/{table_id}/records?page_size=500"
            if page_token:
                url += f"&page_token={page_token}"
            
            resp = requests.get(url, headers=get_headers(token))
            
            # Ki·ªÉm tra status code tr∆∞·ªõc
            if resp.status_code != 200:
                st.error(f"‚ùå API tr·∫£ v·ªÅ status code: {resp.status_code}")
                break
            
            # Ki·ªÉm tra v√† parse JSON response
            try:
                res_data = resp.json()
            except Exception as e:
                st.error(f"‚ùå L·ªói parse JSON response: {e}")
                break
            
            # Ki·ªÉm tra response code
            if res_data.get("code") != 0:
                st.error(f"‚ùå API tr·∫£ v·ªÅ code: {res_data.get('code')}, msg: {res_data.get('msg', '')}")
                break
            
            # L·∫•y data v√† items
            data = res_data.get("data", {})
            if data is None:
                st.error("‚ùå Response data is None")
                break
                
            items = data.get("items", [])
            if items is None:
                items = []
            
            # Extend records
            all_records.extend(items)
            
            # Ki·ªÉm tra page_token cho trang ti·∫øp theo
            page_token = data.get("page_token", "")
            if not page_token or not items:
                break
                
        except Exception as e:
            st.error(f"‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu: {e}")
            break
    
    return all_records

# T√¨m record theo (gi√° tr·ªã c·ªôt ID)
def larkbase_find_by_field(app_token, table_id, field, value):
    all_records = larkbase_get_all(app_token, table_id)
    if not all_records:
        return None
        
    # N√™n ki·ªÉm tra field tr√πng t√™n c·ªôt ƒë√∫ng nh∆∞ Larkbase
    for record in all_records:
        fields = record.get('fields', {})
        if str(fields.get(field, '')).strip() == str(value).strip():
            return record
    return None

# --- CREATE ---
def larkbase_write_data(app_token, table_id, data):
    token = larkbase_get_token()
    if not token:
        st.error("‚ùå Kh√¥ng x√°c th·ª±c ƒë∆∞·ª£c v·ªõi Larkbase.")
        return False

    try:
        url = f"{API_HOST}/{app_token}/tables/{table_id}/records"
        headers = get_headers(token)
        fields = {"fields": data}
        resp = requests.post(url, headers=headers, json=fields)
        
        if resp.status_code == 200:
            try:
                result = resp.json()
                if result.get('code') == 0:
                    return True
                else:
                    st.error(f"‚ùå L·ªói API: {result.get('msg', '')}")
            except Exception as e:
                st.error(f"‚ùå L·ªói parse response: {e}")
        else:
            st.error(f"‚ùå HTTP Error: {resp.status_code}")
    except Exception as e:
        st.error(f"‚ùå L·ªói khi ghi d·ªØ li·ªáu: {e}")
    
    return False

# --- UPDATE ---
def larkbase_update_data(app_token, table_id, record_id, data):
    token = larkbase_get_token()
    if not token:
        st.error("‚ùå Kh√¥ng x√°c th·ª±c ƒë∆∞·ª£c v·ªõi Larkbase.")
        return False
    
    try:
        url = f"{API_HOST}/{app_token}/tables/{table_id}/records/{record_id}"
        resp = requests.put(url, headers=get_headers(token), json={"fields": data})
        
        if resp.status_code == 200:
            try:
                result = resp.json()
                if result.get('code') == 0:
                    return True
                else:
                    st.error(f"‚ùå L·ªói API: {result.get('msg', '')}")
            except Exception as e:
                st.error(f"‚ùå L·ªói parse response: {e}")
        else:
            st.error(f"‚ùå HTTP Error: {resp.status_code}")
    except Exception as e:
        st.error(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t: {e}")
    
    return False

# --- DELETE ---
def larkbase_delete_record(app_token, table_id, record_id):
    token = larkbase_get_token()
    if not token:
        st.error("‚ùå Kh√¥ng x√°c th·ª±c ƒë∆∞·ª£c v·ªõi Larkbase.")
        return False
    
    try:
        url = f"{API_HOST}/{app_token}/tables/{table_id}/records/{record_id}"
        resp = requests.delete(url, headers=get_headers(token))
        
        if resp.status_code == 200:
            try:
                result = resp.json()
                if result.get('code') == 0:
                    return True
                else:
                    st.error(f"‚ùå L·ªói API: {result.get('msg', '')}")
            except Exception as e:
                st.error(f"‚ùå L·ªói parse response: {e}")
        else:
            st.error(f"‚ùå HTTP Error: {resp.status_code}")
    except Exception as e:
        st.error(f"‚ùå L·ªói khi x√≥a: {e}")
    
    return False

============================================================


üìä TH·ªêNG K√ä
------------------------------
T·ªïng s·ªë file: 12
File code: 9
C√°c lo·∫°i file code:
  .md: 1 file
  .py: 5 file
  .txt: 2 file
  .yml: 1 file
