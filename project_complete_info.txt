================================================================================
TH√îNG TIN D·ª∞ √ÅN HO√ÄN CH·ªàNH
================================================================================
Th·ªùi gian t·∫°o: 2025-08-25 16:17:28
Th∆∞ m·ª•c g·ªëc: d:\Atino\extension\inventory-flow-tracker
================================================================================

üìÅ C·∫§U TR√öC THU M·ª§C
--------------------------------------------------
‚îú‚îÄ‚îÄ üìÅ data/
‚îú‚îÄ‚îÄ üìÅ src/
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ auth/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ __init__.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ auth_middleware.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ lark_oauth.py
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÑ session_manager.py
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ core/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ __init__.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ app.py
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÑ dependencies.py
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ routes/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ __init__.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ api_routes.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ auth_routes.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ record_routes.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ refresh_routes.py
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÑ report_routes.py
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ services/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ __init__.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ depot_service.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ employee_service.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ record_service.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ report_service.py
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÑ transport_service.py
‚îÇ   ‚îî‚îÄ‚îÄ üìÅ utils/
‚îÇ       ‚îú‚îÄ‚îÄ üìÑ __init__.py
‚îÇ       ‚îú‚îÄ‚îÄ üìÑ api.py
‚îÇ       ‚îú‚îÄ‚îÄ üìÑ cache.py
‚îÇ       ‚îú‚îÄ‚îÄ üìÑ config.py
‚îÇ       ‚îú‚îÄ‚îÄ üìÑ depot.py
‚îÇ       ‚îú‚îÄ‚îÄ üìÑ larkbase.py
‚îÇ       ‚îî‚îÄ‚îÄ üìÑ transport_provider.py
‚îú‚îÄ‚îÄ üìÅ static/
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ css/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ components.css
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ dropdowns.css
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ forms.css
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ main.css
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÑ reports.css
‚îÇ   ‚îî‚îÄ‚îÄ üìÅ js/
‚îÇ       ‚îú‚îÄ‚îÄ üìÑ app.js
‚îÇ       ‚îú‚îÄ‚îÄ üìÑ bulk-form.js
‚îÇ       ‚îú‚îÄ‚îÄ üìÑ dropdown.js
‚îÇ       ‚îî‚îÄ‚îÄ üìÑ validators.js
‚îú‚îÄ‚îÄ üìÅ templates/
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ auth/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ login.html
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÑ unauthorized.html
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ components/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ common/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ footer.html
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ header.html
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÑ scripts.html
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ dropdowns/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ depot.html
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ employee.html
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÑ transport.html
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÅ forms/
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ üìÑ bulk_create.html
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ üìÑ create.html
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ üìÑ search.html
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ üìÑ update.html
‚îÇ   ‚îî‚îÄ‚îÄ üìÅ pages/
‚îÇ       ‚îú‚îÄ‚îÄ üìÑ daily_report.html
‚îÇ       ‚îú‚îÄ‚îÄ üìÑ index.html
‚îÇ       ‚îî‚îÄ‚îÄ üìÑ view_only.html
‚îú‚îÄ‚îÄ üìÑ .gitignore
‚îú‚îÄ‚îÄ üìÑ docker-compose.yml
‚îú‚îÄ‚îÄ üìÑ Dockerfile
‚îú‚îÄ‚îÄ üìÑ Get detail code.ipynb
‚îú‚îÄ‚îÄ üìÑ main.py
‚îú‚îÄ‚îÄ üìÑ project_complete_info.txt
‚îú‚îÄ‚îÄ üìÑ README.md
‚îî‚îÄ‚îÄ üìÑ requirements.txt


üìÑ DANH S√ÅCH T·∫§T C·∫¢ FILE
--------------------------------------------------
.gitignore (628 bytes)
docker-compose.yml (365 bytes)
Dockerfile (590 bytes)
Get detail code.ipynb (9335 bytes)
main.py (253 bytes)
project_complete_info.txt (0 bytes)
README.md (432 bytes)
requirements.txt (193 bytes)
src\auth\__init__.py (0 bytes)
src\auth\auth_middleware.py (8925 bytes)
src\auth\lark_oauth.py (22567 bytes)
src\auth\session_manager.py (3876 bytes)
src\core\__init__.py (0 bytes)
src\core\app.py (2075 bytes)
src\core\dependencies.py (2258 bytes)
src\routes\__init__.py (0 bytes)
src\routes\api_routes.py (12214 bytes)
src\routes\auth_routes.py (4183 bytes)
src\routes\record_routes.py (9277 bytes)
src\routes\refresh_routes.py (5111 bytes)
src\routes\report_routes.py (6079 bytes)
src\services\__init__.py (0 bytes)
src\services\depot_service.py (769 bytes)
src\services\employee_service.py (399 bytes)
src\services\record_service.py (7156 bytes)
src\services\report_service.py (12184 bytes)
src\services\transport_service.py (609 bytes)
src\utils\__init__.py (0 bytes)
src\utils\api.py (2170 bytes)
src\utils\cache.py (3913 bytes)
src\utils\config.py (5107 bytes)
src\utils\depot.py (3382 bytes)
src\utils\larkbase.py (6822 bytes)
src\utils\transport_provider.py (3181 bytes)
static\css\components.css (10454 bytes)
static\css\dropdowns.css (3053 bytes)
static\css\forms.css (5425 bytes)
static\css\main.css (5781 bytes)
static\css\reports.css (8009 bytes)
static\js\app.js (1516 bytes)
static\js\bulk-form.js (39101 bytes)
static\js\dropdown.js (15968 bytes)
static\js\validators.js (2170 bytes)
templates\auth\login.html (3373 bytes)
templates\auth\unauthorized.html (3976 bytes)
templates\components\common\footer.html (0 bytes)
templates\components\common\header.html (706 bytes)
templates\components\common\scripts.html (1226 bytes)
templates\components\dropdowns\depot.html (1191 bytes)
templates\components\dropdowns\employee.html (1391 bytes)
templates\components\dropdowns\transport.html (1292 bytes)
templates\components\forms\bulk_create.html (9323 bytes)
templates\components\forms\create.html (1201 bytes)
templates\components\forms\search.html (895 bytes)
templates\components\forms\update.html (0 bytes)
templates\pages\daily_report.html (8960 bytes)
templates\pages\index.html (2404 bytes)
templates\pages\view_only.html (1858 bytes)

T·ªïng c·ªông: 58 file

üíª N·ªòI DUNG T·∫§T C·∫¢ FILE CODE
================================================================================

============================================================
FILE: docker-compose.yml
============================================================
version: '3.8'

services:
  app:
    build: .
    ports:
      - "8000:8000"
    environment:
      - LARK_APP_ID=${LARK_APP_ID}
      - LARK_APP_SECRET=${LARK_APP_SECRET}
      - MAIN_APP_TOKEN=${MAIN_APP_TOKEN}
      - SECRET_KEY=${SECRET_KEY}
      - REDIRECT_URI=${REDIRECT_URI}
    volumes:
      - ./data:/app/data
    restart: unless-stopped

============================================================

============================================================
FILE: main.py
============================================================
# main.py - Entry Point (ƒê√£ t·ªëi ∆∞u)
import uvicorn
import os
from src.core.app import create_app

app = create_app()

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8000))
    uvicorn.run(app, host="0.0.0.0", port=port)

============================================================

============================================================
FILE: project_complete_info.txt
============================================================

============================================================

============================================================
FILE: README.md
============================================================
# Inventory Flow Tracker

H·ªá th·ªëng theo d√µi lu·ªìng h√†ng h√≥a v·ªõi t√≠ch h·ª£p Lark v√† Nhanh.vn API.

## T√≠nh nƒÉng

- ‚úÖ X√°c th·ª±c qua Lark OAuth
- ‚úÖ T√¨m ki·∫øm v√† t·∫°o records t·ª´ Bill ID
- ‚úÖ T·∫°o h√†ng lo·∫°t records
- ‚úÖ B√°o c√°o h√†ng ng√†y v·ªõi b·ªô l·ªçc
- ‚úÖ Qu·∫£n l√Ω dropdown cho nh√¢n vi√™n, depot, v·∫≠n chuy·ªÉn
- ‚úÖ Responsive design

## C√†i ƒë·∫∑t

### 1. Clone repository

============================================================

============================================================
FILE: requirements.txt
============================================================
fastapi==0.104.1
uvicorn[standard]==0.24.0
jinja2==3.1.2
python-multipart==0.0.6
httpx==0.25.2
pyjwt==2.8.0
python-dotenv==1.0.0
requests==2.31.0
python-dateutil>=2.8.0
pydantic==2.7.3
============================================================

============================================================
FILE: src\auth\__init__.py
============================================================

============================================================

============================================================
FILE: src\auth\auth_middleware.py
============================================================
# # src/auth/auth_middleware.py
# import logging
# from typing import List
# from fastapi import Request, Response, HTTPException
# from fastapi.responses import RedirectResponse
# from starlette.middleware.base import BaseHTTPMiddleware
# from .session_manager import SessionManager

# logger = logging.getLogger(__name__)

# class AuthMiddleware(BaseHTTPMiddleware):
#     def __init__(self, app, session_manager: SessionManager, public_paths: List[str] = None):
#         super().__init__(app)
#         self.session_manager = session_manager
#         # ‚úÖ S·ª¨A: Sync public paths v·ªõi main.py ƒë·ªÉ tr√°nh inconsistency
#         self.public_paths = public_paths or [
#             "/login",
#             "/auth/callback",
#             "/auth/lark",  # ‚Üê TH√äM: ƒê·∫£m b·∫£o consistent v·ªõi main.py
#             "/health",
#             "/static",
#             "/favicon.ico"
#         ]

#     def is_public_path(self, path: str) -> bool:
#         """Ki·ªÉm tra xem path c√≥ ph·∫£i l√† public kh√¥ng"""
#         return any(path.startswith(public_path) for public_path in self.public_paths)

#     async def dispatch(self, request: Request, call_next):
#         # Skip auth cho public paths
#         if self.is_public_path(request.url.path):
#             return await call_next(request)

#         # L·∫•y session token t·ª´ cookie
#         session_token = request.cookies.get("session_token")
        
#         if not session_token:
#             logger.info(f"No session token, redirecting to login: {request.url.path}")
#             return RedirectResponse(url="/login", status_code=302)

#         # Verify token
#         user_info = self.session_manager.get_user_from_token(session_token)
#         if not user_info:
#             logger.info(f"Invalid session token, redirecting to login: {request.url.path}")
#             response = RedirectResponse(url="/login", status_code=302)
#             response.delete_cookie("session_token")
#             return response

#         # Th√™m user info v√†o request state
#         request.state.user = user_info
        
#         # Try to refresh token if needed
#         refreshed_token = self.session_manager.refresh_token_if_needed(session_token)
        
#         response = await call_next(request)
        
#         # Set refreshed token if available
#         if refreshed_token and refreshed_token != session_token:
#             response.set_cookie(
#                 "session_token", 
#                 refreshed_token, 
#                 httponly=True,
#                 secure=False,  # Set True in production with HTTPS
#                 samesite="lax",
#                 max_age=24*60*60  # 24 hours
#             )
#             logger.info("Session token refreshed and set in cookie")

#         return response

# src/auth/auth_middleware.py


import logging
from typing import List
from fastapi import Request, Response, HTTPException
from fastapi.responses import RedirectResponse
from starlette.middleware.base import BaseHTTPMiddleware
from .session_manager import SessionManager

logger = logging.getLogger(__name__)


class AuthMiddleware(BaseHTTPMiddleware):
    """
    Middleware x·ª≠ l√Ω authentication cho to√†n b·ªô ·ª©ng d·ª•ng FastAPI
    
    Ch·ª©c nƒÉng ch√≠nh:
    - Ki·ªÉm tra session token t·ª´ cookie cho t·∫•t c·∫£ requests
    - Redirect user ƒë·∫øn trang login n·∫øu ch∆∞a authenticate
    - B·ªè qua ki·ªÉm tra cho c√°c public paths
    - T·ª± ƒë·ªông refresh token khi c·∫ßn thi·∫øt
    - Inject user info v√†o request state
    
    Flow x·ª≠ l√Ω:
    1. Ki·ªÉm tra xem path c√≥ ph·∫£i public kh√¥ng
    2. L·∫•y session token t·ª´ cookie
    3. Verify token v·ªõi SessionManager
    4. Th√™m user info v√†o request state
    5. Refresh token n·∫øu c·∫ßn v√† set cookie m·ªõi
    """
    
    def __init__(self, app, session_manager: SessionManager, public_paths: List[str] = None):
        """
        Kh·ªüi t·∫°o Authentication Middleware
        
        Args:
            app: FastAPI application instance
            session_manager: SessionManager instance ƒë·ªÉ verify tokens
            public_paths: List c√°c paths kh√¥ng c·∫ßn authentication
        """
        super().__init__(app)
        self.session_manager = session_manager
        
        # ‚úÖ STEP 1: Thi·∫øt l·∫≠p danh s√°ch public paths m·∫∑c ƒë·ªãnh
        self.public_paths = public_paths or [
            "/login",           # Trang ƒëƒÉng nh·∫≠p
            "/auth/callback",   # OAuth callback endpoint
            "/auth/lark",       # ‚Üê TH√äM: ƒê·∫£m b·∫£o consistent v·ªõi main.py
            "/health",          # Health check endpoint
            "/static",          # Static files (CSS, JS, images)
            "/favicon.ico"      # Favicon request
        ]

    def is_public_path(self, path: str) -> bool:
        """
        Ki·ªÉm tra xem path c√≥ ph·∫£i l√† public path kh√¥ng c·∫ßn authentication
        
        Args:
            path: Request path c·∫ßn ki·ªÉm tra
            
        Returns:
            bool: True n·∫øu l√† public path, False n·∫øu c·∫ßn authentication
            
        Logic:
        - S·ª≠ d·ª•ng startswith ƒë·ªÉ match prefix paths (vd: /static/*)
        - Return True ngay khi t√¨m th·∫•y match ƒë·∫ßu ti√™n
        """
        # ‚úÖ STEP 1: Duy·ªát qua t·ª´ng public path ƒë·ªÉ ki·ªÉm tra
        return any(path.startswith(public_path) for public_path in self.public_paths)

    async def dispatch(self, request: Request, call_next):
        """
        Main middleware function x·ª≠ l√Ω authentication cho m·ªói request
        
        Args:
            request: FastAPI Request object
            call_next: Next middleware/route handler
            
        Returns:
            Response: HTTP response (c√≥ th·ªÉ l√† redirect ho·∫∑c t·ª´ route handler)
            
        Flow x·ª≠ l√Ω:
        1. Ki·ªÉm tra public path ‚Üí skip auth n·∫øu ƒë√∫ng
        2. L·∫•y session token t·ª´ cookie
        3. Verify token v·ªõi SessionManager
        4. Inject user info v√†o request state
        5. Process request v√† refresh token n·∫øu c·∫ßn
        6. Set refreshed token v√†o cookie response
        
        Error Handling:
        - No token ‚Üí redirect to /login
        - Invalid token ‚Üí redirect to /login + clear cookie
        - Token refresh fails ‚Üí log warning nh∆∞ng v·∫´n proceed
        """
        
        # ‚úÖ STEP 1: B·ªè qua authentication cho public paths
        if self.is_public_path(request.url.path):
            # Kh√¥ng c·∫ßn auth cho public endpoints
            return await call_next(request)

        # ‚úÖ STEP 2: L·∫•y session token t·ª´ HTTP cookie
        session_token = request.cookies.get("session_token")
        
        # ‚ùå ERROR CASE 1: Kh√¥ng c√≥ session token
        if not session_token:
            logger.info(f"üîç No session token, redirecting to login: {request.url.path}")
            return RedirectResponse(url="/login", status_code=302)

        # ‚úÖ STEP 3: Verify token v·ªõi SessionManager
        user_info = self.session_manager.get_user_from_token(session_token)
        
        # ‚ùå ERROR CASE 2: Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n
        if not user_info:
            logger.info(f"‚ùå Invalid session token, redirecting to login: {request.url.path}")
            # T·∫°o redirect response v√† x√≥a cookie kh√¥ng h·ª£p l·ªá
            response = RedirectResponse(url="/login", status_code=302)
            response.delete_cookie("session_token")
            return response

        # ‚úÖ STEP 4: Inject user info v√†o request state ƒë·ªÉ routes c√≥ th·ªÉ s·ª≠ d·ª•ng
        request.state.user = user_info
        
        # ‚úÖ STEP 5: Th·ª≠ refresh token n·∫øu s·∫Øp h·∫øt h·∫°n
             # Check v√† refresh token proactively
        refreshed_token = self.session_manager.refresh_token_if_needed(session_token)
        
        # ‚úÖ STEP 6: Ti·∫øp t·ª•c x·ª≠ l√Ω request v·ªõi middleware/route handler ti·∫øp theo
        response = await call_next(request)
        
        # ‚úÖ STEP 7: Set refreshed token v√†o cookie n·∫øu c√≥ token m·ªõi
        if refreshed_token and refreshed_token != session_token:
            # C·∫≠p nh·∫≠t cookie v·ªõi token m·ªõi ƒë∆∞·ª£c refresh
            response.set_cookie(
                "session_token", 
                refreshed_token, 
                httponly=True,      # B·∫£o m·∫≠t: ch·ªâ server c√≥ th·ªÉ ƒë·ªçc
                secure=False,       # Set True in production v·ªõi HTTPS
                samesite="lax",     # CSRF protection
                max_age=24*60*60    # 24 gi·ªù expiry
            )
            logger.info("‚úÖ Session token refreshed and set in cookie")

        return response


============================================================

============================================================
FILE: src\auth\lark_oauth.py
============================================================
# # src/auth/lark_oauth.py
# import httpx
# import json
# import logging
# from typing import Optional, Tuple, Dict, Any
# from urllib.parse import urlencode
# import time

# logger = logging.getLogger(__name__)

# class LarkOAuthService:
#     def __init__(self, app_id: str, app_secret: str, base_url: str, redirect_uri: str):
#         self.app_id = app_id
#         self.app_secret = app_secret
#         self.base_url = base_url
#         self.redirect_uri = redirect_uri
#         self._app_access_token = None
#         self._token_expires_at = 0

#     def generate_oauth_url(self, state: str = None) -> str:
#         """T·∫°o URL OAuth ƒë·ªÉ redirect user ƒë·∫øn Lark"""
#         params = {
#             'app_id': self.app_id,
#             'redirect_uri': self.redirect_uri,
#             'response_type': 'code',
#             'scope': 'contact:user.id:readonly'
#         }
#         if state:
#             params['state'] = state
        
#         oauth_url = f"{self.base_url}/authen/v1/authorize?" + urlencode(params)
#         logger.info(f"Generated OAuth URL: {oauth_url}")
#         return oauth_url

#     async def get_app_access_token(self) -> Optional[str]:
#         """L·∫•y app_access_token t·ª´ Lark"""
#         # Check cache
#         if self._app_access_token and time.time() < self._token_expires_at:
#             return self._app_access_token

#         url = f"{self.base_url}/auth/v3/app_access_token/internal"
#         payload = {
#             "app_id": self.app_id,
#             "app_secret": self.app_secret
#         }
        
#         try:
#             async with httpx.AsyncClient() as client:
#                 response = await client.post(url, json=payload, timeout=10)
#                 response.raise_for_status()
                
#                 data = response.json()
#                 if data.get('code') == 0:
#                     token = data.get('app_access_token')
#                     expires_in = data.get('expire', 7200)  # Default 2 hours
                    
#                     # Cache token
#                     self._app_access_token = token
#                     self._token_expires_at = time.time() + expires_in - 300  # 5 min buffer
                    
#                     logger.info("Successfully obtained app_access_token")
#                     return token
#                 else:
#                     logger.error(f"Failed to get app_access_token: {data}")
#                     return None
                    
#         except Exception as e:
#             logger.error(f"Error getting app_access_token: {e}")
#             return None

#     async def exchange_code_for_token(self, code: str) -> Optional[str]:
#         """ƒê·ªïi authorization code th√†nh user_access_token"""
#         app_token = await self.get_app_access_token()
#         if not app_token:
#             return None

#         url = f"{self.base_url}/authen/v1/oidc/access_token"
#         headers = {
#             "Authorization": f"Bearer {app_token}",
#             "Content-Type": "application/json"
#         }
#         payload = {
#             "grant_type": "authorization_code",
#             "code": code
#         }
        
#         try:
#             async with httpx.AsyncClient() as client:
#                 response = await client.post(url, headers=headers, json=payload, timeout=10)
#                 response.raise_for_status()
                
#                 data = response.json()
#                 if data.get('code') == 0:
#                     return data.get('data', {}).get('access_token')
#                 else:
#                     logger.error(f"Failed to exchange code: {data}")
#                     return None
                    
#         except Exception as e:
#             logger.error(f"Error exchanging code: {e}")
#             return None

#     async def get_user_info(self, user_access_token: str) -> Optional[Dict[str, Any]]:
#         """L·∫•y th√¥ng tin user t·ª´ user_access_token"""
#         url = f"{self.base_url}/authen/v1/user_info"
#         headers = {
#             "Authorization": f"Bearer {user_access_token}"
#         }
        
#         try:
#             async with httpx.AsyncClient() as client:
#                 response = await client.get(url, headers=headers, timeout=10)
#                 response.raise_for_status()
                
#                 data = response.json()
#                 if data.get('code') == 0:
#                     return data.get('data')
#                 else:
#                     logger.error(f"Failed to get user info: {data}")
#                     return None
                    
#         except Exception as e:
#             logger.error(f"Error getting user info: {e}")
#             return None

#     async def check_user_permission(self, open_id: str, app_token: str, table_id: str) -> Tuple[bool, str]:
#         """Ki·ªÉm tra quy·ªÅn user trong Larkbase table"""
#         app_access_token = await self.get_app_access_token()
#         if not app_access_token:
#             return False, "Kh√¥ng th·ªÉ x√°c th·ª±c v·ªõi Lark"

#         url = f"{self.base_url}/bitable/v1/apps/{app_token}/tables/{table_id}/records/search"
#         headers = {
#             "Authorization": f"Bearer {app_access_token}",
#             "Content-Type": "application/json"
#         }
#         payload = {
#             "filter": {
#                 "conjunction": "and",
#                 "conditions": [
#                     {
#                         "field_name": "Ng∆∞·ªùi",
#                         "operator": "contains", 
#                         "value": [open_id]
#                     },
#                     {
#                         "field_name": "Tr·∫°ng th√°i",
#                         "operator": "is",
#                         "value": ["K√≠ch ho·∫°t"]
#                     }
#                 ]
#             }
#         }
        
#         try:
#             async with httpx.AsyncClient() as client:
#                 response = await client.post(url, headers=headers, json=payload, timeout=10)
#                 response.raise_for_status()
                
#                 data = response.json()
#                 if data.get('code') == 0:
#                     items = data.get('data', {}).get('items', [])
#                     if items:
#                         return True, "User c√≥ quy·ªÅn truy c·∫≠p"
#                     else:
#                         return False, "User kh√¥ng c√≥ quy·ªÅn truy c·∫≠p ho·∫∑c ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t"
#                 else:
#                     logger.error(f"Failed to check permissions: {data}")
#                     return False, f"L·ªói ki·ªÉm tra quy·ªÅn: {data.get('msg', 'Unknown error')}"
                    
#         except Exception as e:
#             logger.error(f"Error checking permissions: {e}")
#             return False, f"L·ªói h·ªá th·ªëng: {str(e)}"



# src/auth/lark_oauth.py


import httpx
import json
import logging
from typing import Optional, Tuple, Dict, Any
from urllib.parse import urlencode
import time

logger = logging.getLogger(__name__)


class LarkOAuthService:
    """
    Service x·ª≠ l√Ω OAuth authentication v·ªõi Lark/Feishu platform
    
    Ch·ª©c nƒÉng ch√≠nh:
    - T·∫°o OAuth URL ƒë·ªÉ redirect user ƒë·∫øn Lark login
    - L·∫•y v√† cache app_access_token t·ª´ Lark API
    - ƒê·ªïi authorization code th√†nh user_access_token
    - L·∫•y th√¥ng tin user t·ª´ Lark API
    - Ki·ªÉm tra quy·ªÅn user trong Larkbase table
    
    OAuth Flow:
    1. Generate OAuth URL ‚Üí User login tr√™n Lark
    2. Lark callback v·ªõi code ‚Üí Exchange code for token
    3. Use token ƒë·ªÉ get user info
    4. Check user permission trong Larkbase
    
    Token Management:
    - Cache app_access_token v·ªõi expiry time
    - Auto refresh khi token s·∫Øp h·∫øt h·∫°n
    """
    
    def __init__(self, app_id: str, app_secret: str, base_url: str, redirect_uri: str):
        """
        Kh·ªüi t·∫°o Lark OAuth Service
        
        Args:
            app_id: Lark app ID t·ª´ developer console
            app_secret: Lark app secret t·ª´ developer console  
            base_url: Base URL c·ªßa Lark API (https://open.feishu.cn/open-apis)
            redirect_uri: Callback URL sau khi user login th√†nh c√¥ng
        """
        # ‚úÖ STEP 1: L∆∞u th√¥ng tin app credentials
        self.app_id = app_id
        self.app_secret = app_secret
        self.base_url = base_url
        self.redirect_uri = redirect_uri
        
        # ‚úÖ STEP 2: Kh·ªüi t·∫°o token cache ƒë·ªÉ tr√°nh g·ªçi API li√™n t·ª•c
        self._app_access_token = None  # Cache app token
        self._token_expires_at = 0     # Th·ªùi gian h·∫øt h·∫°n token


    def generate_oauth_url(self, state: str = None) -> str:
        """
        T·∫°o OAuth URL ƒë·ªÉ redirect user ƒë·∫øn Lark login page
        
        Args:
            state: Optional state parameter ƒë·ªÉ verify callback
            
        Returns:
            str: Complete OAuth URL cho Lark authorization
            
        OAuth Parameters:
        - app_id: ID c·ªßa Lark app
        - redirect_uri: URL callback sau khi login
        - response_type: 'code' ƒë·ªÉ nh·∫≠n authorization code
        - scope: Quy·ªÅn truy c·∫≠p c·∫ßn thi·∫øt (contact:user.id:readonly)
        - state: Tham s·ªë b·∫£o m·∫≠t ƒë·ªÉ verify callback
        """
        # ‚úÖ STEP 1: Chu·∫©n b·ªã parameters cho OAuth URL
        params = {
            'app_id': self.app_id,
            'redirect_uri': self.redirect_uri,
            'response_type': 'code',  # Authorization Code Flow
            'scope': 'contact:user.id:readonly'  # Quy·ªÅn ƒë·ªçc th√¥ng tin user c∆° b·∫£n
        }
        
        # ‚úÖ STEP 2: Th√™m state parameter n·∫øu c√≥ (ƒë·ªÉ b·∫£o m·∫≠t)
        if state:
            params['state'] = state
        
        # ‚úÖ STEP 3: Build complete OAuth URL v·ªõi encoded parameters
        oauth_url = f"{self.base_url}/authen/v1/authorize?" + urlencode(params)
        logger.info(f"üîç Generated OAuth URL: {oauth_url}")
        return oauth_url


    async def get_app_access_token(self) -> Optional[str]:
        """
        L·∫•y app_access_token t·ª´ Lark API v·ªõi caching mechanism
        
        Returns:
            Optional[str]: App access token ho·∫∑c None n·∫øu th·∫•t b·∫°i
            
        API Endpoint: /auth/v3/app_access_token/internal
        Method: POST
        
        Caching Strategy:
        - Cache token v·ªõi expiry time
        - Return cached token n·∫øu c√≤n h·∫°n
        - Refresh token khi s·∫Øp h·∫øt h·∫°n (buffer 5 ph√∫t)
        
        Error Handling:
        - Network timeout (10s)
        - API error response
        - JSON parsing errors
        """
        # ‚úÖ STEP 1: Ki·ªÉm tra cache - return n·∫øu token c√≤n h·∫°n
        if self._app_access_token and time.time() < self._token_expires_at:
            # Token c√≤n h·∫°n, kh√¥ng c·∫ßn g·ªçi API
            return self._app_access_token

        # ‚úÖ STEP 2: Chu·∫©n b·ªã request ƒë·ªÉ l·∫•y token m·ªõi
        url = f"{self.base_url}/auth/v3/app_access_token/internal"
        payload = {
            "app_id": self.app_id,
            "app_secret": self.app_secret
        }
        
        try:
            # ‚úÖ STEP 3: G·ªçi Lark API ƒë·ªÉ l·∫•y app access token
            async with httpx.AsyncClient() as client:
                # ƒêang request app access token t·ª´ Lark
                response = await client.post(url, json=payload, timeout=10)
                response.raise_for_status()  # Raise exception cho HTTP errors
                
                # ‚úÖ STEP 4: Parse response v√† ki·ªÉm tra k·∫øt qu·∫£
                data = response.json()
                if data.get('code') == 0:  # Lark API success code
                    token = data.get('app_access_token')
                    expires_in = data.get('expire', 7200)  # Default 2 gi·ªù
                    
                    # ‚úÖ STEP 5: Cache token v·ªõi expiry time (buffer 5 ph√∫t)
                    self._app_access_token = token
                    self._token_expires_at = time.time() + expires_in - 300  # 5 min buffer
                    
                    logger.info("‚úÖ Successfully obtained app_access_token")
                    return token
                else:
                    # ‚ùå ERROR CASE 1: API tr·∫£ v·ªÅ l·ªói
                    logger.error(f"‚ùå Failed to get app_access_token: {data}")
                    return None
                    
        except Exception as e:
            # ‚ùå ERROR CASE 2: Network ho·∫∑c parsing error
            logger.error(f"‚ùå Error getting app_access_token: {e}")
            return None


    async def exchange_code_for_token(self, code: str) -> Optional[str]:
        """
        ƒê·ªïi authorization code th√†nh user_access_token
        
        Args:
            code: Authorization code t·ª´ Lark callback
            
        Returns:
            Optional[str]: User access token ho·∫∑c None n·∫øu th·∫•t b·∫°i
            
        API Endpoint: /authen/v1/oidc/access_token
        Method: POST
        Headers: Authorization Bearer v·ªõi app_access_token
        
        Flow:
        1. L·∫•y app_access_token tr∆∞·ªõc
        2. S·ª≠ d·ª•ng app token ƒë·ªÉ exchange code
        3. Return user access token
        
        Error Handling:
        - Kh√¥ng l·∫•y ƒë∆∞·ª£c app token
        - Code kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n
        - Network errors
        """
        # ‚úÖ STEP 1: L·∫•y app access token tr∆∞·ªõc (required ƒë·ªÉ call API)
        app_token = await self.get_app_access_token()
        if not app_token:
            # ‚ùå ERROR CASE 1: Kh√¥ng l·∫•y ƒë∆∞·ª£c app token
            logger.error("‚ùå Cannot get app_access_token, aborting code exchange")
            return None

        # ‚úÖ STEP 2: Chu·∫©n b·ªã request ƒë·ªÉ exchange code
        url = f"{self.base_url}/authen/v1/oidc/access_token"
        headers = {
            "Authorization": f"Bearer {app_token}",  # Required app token auth
            "Content-Type": "application/json"
        }
        payload = {
            "grant_type": "authorization_code",  # OAuth standard grant type
            "code": code  # Code t·ª´ callback
        }
        
        try:
            # ‚úÖ STEP 3: G·ªçi API ƒë·ªÉ exchange code th√†nh user token
            async with httpx.AsyncClient() as client:
                # ƒêang exchange authorization code
                response = await client.post(url, headers=headers, json=payload, timeout=10)
                response.raise_for_status()
                
                # ‚úÖ STEP 4: Parse response v√† extract user token
                data = response.json()
                if data.get('code') == 0:  # Success
                    user_token = data.get('data', {}).get('access_token')
                    logger.info("‚úÖ Successfully exchanged code for user token")
                    return user_token
                else:
                    # ‚ùå ERROR CASE 2: Code kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n
                    logger.error(f"‚ùå Failed to exchange code: {data}")
                    return None
                    
        except Exception as e:
            # ‚ùå ERROR CASE 3: Network ho·∫∑c server error
            logger.error(f"‚ùå Error exchanging code: {e}")
            return None


    async def get_user_info(self, user_access_token: str) -> Optional[Dict[str, Any]]:
        """
        L·∫•y th√¥ng tin user t·ª´ user_access_token
        
        Args:
            user_access_token: Token c·ªßa user sau khi exchange code
            
        Returns:
            Optional[Dict]: User info dictionary ho·∫∑c None n·∫øu th·∫•t b·∫°i
            
        API Endpoint: /authen/v1/user_info
        Method: GET  
        Headers: Authorization Bearer v·ªõi user_access_token
        
        Response Data:
        - open_id: Unique user ID trong Lark
        - name: T√™n hi·ªÉn th·ªã c·ªßa user
        - email: Email c·ªßa user (n·∫øu c√≥)
        - avatar_url: URL ·∫£nh ƒë·∫°i di·ªán
        
        Error Handling:
        - Token kh√¥ng h·ª£p l·ªá ho·∫∑c h·∫øt h·∫°n
        - User kh√¥ng t·ªìn t·∫°i
        - Network errors
        """
        # ‚úÖ STEP 1: Chu·∫©n b·ªã request ƒë·ªÉ l·∫•y user info
        url = f"{self.base_url}/authen/v1/user_info"
        headers = {
            "Authorization": f"Bearer {user_access_token}"  # User token auth
        }
        
        try:
            # ‚úÖ STEP 2: G·ªçi API ƒë·ªÉ l·∫•y th√¥ng tin user
            async with httpx.AsyncClient() as client:
                # ƒêang l·∫•y th√¥ng tin user t·ª´ Lark
                response = await client.get(url, headers=headers, timeout=10)
                response.raise_for_status()
                
                # ‚úÖ STEP 3: Parse response v√† extract user data
                data = response.json()
                if data.get('code') == 0:  # Success
                    user_info = data.get('data')
                    logger.info("‚úÖ Successfully retrieved user info")
                    return user_info
                else:
                    # ‚ùå ERROR CASE 1: Token kh√¥ng h·ª£p l·ªá ho·∫∑c user kh√¥ng t·ªìn t·∫°i
                    logger.error(f"‚ùå Failed to get user info: {data}")
                    return None
                    
        except Exception as e:
            # ‚ùå ERROR CASE 2: Network ho·∫∑c server error
            logger.error(f"‚ùå Error getting user info: {e}")
            return None


    async def check_user_permission(self, open_id: str, app_token: str, table_id: str) -> Tuple[bool, str]:
        """
        Ki·ªÉm tra quy·ªÅn user trong Larkbase table ƒë·ªÉ authorize access
        
        Args:
            open_id: Unique user ID t·ª´ Lark
            app_token: App token c·ªßa Larkbase (kh√°c v·ªõi app_access_token)
            table_id: ID c·ªßa b·∫£ng permission trong Larkbase
            
        Returns:
            Tuple[bool, str]: (c√≥_quy·ªÅn, th√¥ng_b√°o)
            
        API Endpoint: /bitable/v1/apps/{app_token}/tables/{table_id}/records/search
        Method: POST
        Headers: Authorization Bearer v·ªõi app_access_token
        
        Search Logic:
        - T√¨m record c√≥ c·ªôt "Ng∆∞·ªùi" ch·ª©a open_id
        - V√† c·ªôt "Tr·∫°ng th√°i" = "K√≠ch ho·∫°t"
        - Return True n·∫øu t√¨m th·∫•y record ph√π h·ª£p
        
        Permission Table Structure:
        - Ng∆∞·ªùi: Multi-select field ch·ª©a open_id c·ªßa users
        - Tr·∫°ng th√°i: Select field ("K√≠ch ho·∫°t"/"V√¥ hi·ªáu h√≥a")
        
        Error Handling:
        - Kh√¥ng l·∫•y ƒë∆∞·ª£c app access token
        - Table ho·∫∑c app_token kh√¥ng t·ªìn t·∫°i
        - Network timeout
        - Permission denied
        """
        # ‚úÖ STEP 1: L·∫•y app access token ƒë·ªÉ authenticate v·ªõi Larkbase API
        app_access_token = await self.get_app_access_token()
        if not app_access_token:
            # ‚ùå ERROR CASE 1: Kh√¥ng th·ªÉ authenticate v·ªõi Lark
            return False, "Kh√¥ng th·ªÉ x√°c th·ª±c v·ªõi Lark"

        # ‚úÖ STEP 2: Chu·∫©n b·ªã request ƒë·ªÉ search permission records
        url = f"{self.base_url}/bitable/v1/apps/{app_token}/tables/{table_id}/records/search"
        headers = {
            "Authorization": f"Bearer {app_access_token}",
            "Content-Type": "application/json"
        }
        
        # ‚úÖ STEP 3: Build search filter ƒë·ªÉ t√¨m user permission
        payload = {
            "filter": {
                "conjunction": "and",  # T·∫•t c·∫£ conditions ph·∫£i ƒë√∫ng
                "conditions": [
                    {
                        "field_name": "Ng∆∞·ªùi",        # Field ch·ª©a user list
                        "operator": "contains",       # User c√≥ trong list
                        "value": [open_id]           # Open ID c·∫ßn check
                    },
                    {
                        "field_name": "Tr·∫°ng th√°i",   # Field tr·∫°ng th√°i permission
                        "operator": "is",             # Exact match
                        "value": ["K√≠ch ho·∫°t"]       # Ch·ªâ user ƒëang active
                    }
                ]
            }
        }
        
        try:
            # ‚úÖ STEP 4: G·ªçi Larkbase API ƒë·ªÉ search permission
            async with httpx.AsyncClient() as client:
                # ƒêang ki·ªÉm tra quy·ªÅn user trong Larkbase
                response = await client.post(url, headers=headers, json=payload, timeout=10)
                response.raise_for_status()
                
                # ‚úÖ STEP 5: Parse response v√† ki·ªÉm tra k·∫øt qu·∫£
                data = response.json()
                if data.get('code') == 0:  # API call success
                    items = data.get('data', {}).get('items', [])
                    
                    if items:
                        # ‚úÖ SUCCESS: T√¨m th·∫•y permission record
                        logger.info(f"‚úÖ User {open_id} has access permission")
                        return True, "User c√≥ quy·ªÅn truy c·∫≠p"
                    else:
                        # ‚ùå NO PERMISSION: Kh√¥ng t√¨m th·∫•y record ho·∫∑c user ch∆∞a active
                        logger.warning(f"‚ùå User {open_id} denied access - not found or inactive")
                        return False, "User kh√¥ng c√≥ quy·ªÅn truy c·∫≠p ho·∫∑c ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t"
                else:
                    # ‚ùå ERROR CASE 2: API error (table kh√¥ng t·ªìn t·∫°i, permission denied, etc.)
                    logger.error(f"‚ùå Failed to check permissions: {data}")
                    return False, f"L·ªói ki·ªÉm tra quy·ªÅn: {data.get('msg', 'Unknown error')}"
                    
        except Exception as e:
            # ‚ùå ERROR CASE 3: Network timeout ho·∫∑c server error
            logger.error(f"‚ùå Error checking permissions: {e}")
            return False, f"L·ªói h·ªá th·ªëng: {str(e)}"


============================================================

============================================================
FILE: src\auth\session_manager.py
============================================================
# src/auth/session_manager.py
import jwt
import time
import logging
from typing import Optional, Dict, Any
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

class SessionManager:
    def __init__(self, secret_key: str, expire_hours: int = 24):
        self.secret_key = secret_key
        self.expire_hours = expire_hours
        self.algorithm = "HS256"

    def create_session_token(self, user_info: Dict[str, Any]) -> str:
        """T·∫°o JWT session token"""
        now = datetime.utcnow()
        payload = {
            'user_id': user_info.get('open_id'),
            'name': user_info.get('name'),
            'email': user_info.get('email'),
            'avatar_url': user_info.get('avatar_url'),
            'iat': now,
            'exp': now + timedelta(hours=self.expire_hours),
            'iss': 'inventory-flow-tracker'
        }
        
        token = jwt.encode(payload, self.secret_key, algorithm=self.algorithm)
        logger.info(f"Created session token for user: {user_info.get('name')}")
        return token

    def verify_session_token(self, token: str) -> Optional[Dict[str, Any]]:
        """Verify v√† decode JWT session token"""
        try:
            payload = jwt.decode(token, self.secret_key, algorithms=[self.algorithm])
            
            # Check expiration manually for better error handling
            exp = payload.get('exp')
            if exp and datetime.utcfromtimestamp(exp) < datetime.utcnow():
                logger.warning("Session token expired")
                return None
                
            return payload
            
        except jwt.ExpiredSignatureError:
            logger.warning("Session token expired")
            return None
        except jwt.InvalidTokenError as e:
            logger.warning(f"Invalid session token: {e}")
            return None
        except Exception as e:
            logger.error(f"Error verifying token: {e}")
            return None

    def refresh_token_if_needed(self, token: str, refresh_threshold_hours: int = 2) -> Optional[str]:
        """Refresh token n·∫øu s·∫Øp h·∫øt h·∫°n"""
        try:
            payload = self.verify_session_token(token)
            if not payload:
                return None
                
            exp = payload.get('exp')
            if exp:
                exp_time = datetime.utcfromtimestamp(exp)
                time_left = exp_time - datetime.utcnow()
                
                # N·∫øu c√≤n √≠t h∆°n threshold th√¨ refresh
                if time_left.total_seconds() < (refresh_threshold_hours * 3600):
                    # T·∫°o token m·ªõi v·ªõi th√¥ng tin c≈©
                    user_info = {
                        'open_id': payload.get('user_id'),
                        'name': payload.get('name'),
                        'email': payload.get('email'),
                        'avatar_url': payload.get('avatar_url')
                    }
                    new_token = self.create_session_token(user_info)
                    logger.info("Refreshed session token")
                    return new_token
                    
            return token  # Token c√≤n t·ªët, kh√¥ng c·∫ßn refresh
            
        except Exception as e:
            logger.error(f"Error refreshing token: {e}")
            return None

    def get_user_from_token(self, token: str) -> Optional[Dict[str, Any]]:
        """L·∫•y th√¥ng tin user t·ª´ token"""
        payload = self.verify_session_token(token)
        if payload:
            return {
                'user_id': payload.get('user_id'),
                'name': payload.get('name'),
                'email': payload.get('email'),
                'avatar_url': payload.get('avatar_url')
            }
        return None

============================================================

============================================================
FILE: src\core\__init__.py
============================================================

============================================================

============================================================
FILE: src\core\app.py
============================================================
# src/core/app.py - Application Factory
from fastapi import FastAPI, Request
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates

from src.auth.auth_middleware import AuthMiddleware
from src.auth.lark_oauth import LarkOAuthService
from src.auth.session_manager import SessionManager
from src.utils.config import AUTH_CONFIG

from src.routes import auth_routes, api_routes, record_routes, refresh_routes, report_routes

def create_app():
    """Create and configure FastAPI application"""
    app = FastAPI(title="IMEX Distribution API")
    
    # Static files
    app.mount("/static", StaticFiles(directory="static"), name="static")
    
    # ‚úÖ TH√äM: Templates setup
    templates = Jinja2Templates(directory="templates")
    
    # ‚úÖ TH√äM: Direct login route (kh√¥ng c√≥ prefix)
    @app.get("/login", response_class=HTMLResponse)
    async def login_page(request: Request):
        """Trang ƒëƒÉng nh·∫≠p tr·ª±c ti·∫øp"""
        return templates.TemplateResponse("auth/login.html", {"request": request})
    
    # Setup authentication
    lark_oauth = LarkOAuthService(
        app_id=AUTH_CONFIG['LARK_APP_ID'],
        app_secret=AUTH_CONFIG['LARK_APP_SECRET'],
        base_url=AUTH_CONFIG['LARK_BASE_URL'],
        redirect_uri=AUTH_CONFIG['REDIRECT_URI']
    )
    
    session_manager = SessionManager(
        secret_key=AUTH_CONFIG['SECRET_KEY'],
        expire_hours=AUTH_CONFIG['SESSION_EXPIRE_HOURS']
    )
    
    # Add authentication middleware
    app.add_middleware(
        AuthMiddleware,
        session_manager=session_manager,
        public_paths=["/login", "/auth/callback", "/auth/lark", "/health", "/static", "/favicon.ico"]
    )
    
    # Include routers
    app.include_router(auth_routes.router)
    app.include_router(api_routes.router)
    app.include_router(record_routes.router)
    app.include_router(refresh_routes.router)
    app.include_router(report_routes.router)
    
    return app

============================================================

============================================================
FILE: src\core\dependencies.py
============================================================
# src/core/dependencies.py - Dependency Injection
from fastapi import Request
from fastapi.templating import Jinja2Templates

from src.services.record_service import RecordService
from src.services.employee_service import EmployeeService
from src.services.transport_service import TransportProviderService
from src.services.depot_service import DepotService
from src.utils.config import API_TOKENS, TABLE_IDS

# Setup templates
templates = Jinja2Templates(directory="templates")

# Services
def get_record_service() -> RecordService:
    return RecordService(API_TOKENS['MAIN_APP_TOKEN'], TABLE_IDS['MAIN_TABLE_ID'])

def get_employee_service() -> EmployeeService:
    return EmployeeService()

def get_transport_service() -> TransportProviderService:
    return TransportProviderService(API_TOKENS['MAIN_APP_TOKEN'])

def get_depot_service() -> DepotService:
    return DepotService()

# Helper function
def get_current_user(request: Request) -> dict:
    """L·∫•y th√¥ng tin user hi·ªán t·∫°i t·ª´ request state"""
    return getattr(request.state, 'user', None)

# Template filters
def get_employee_display(employee_id, employees):
    """T√¨m v√† tr·∫£ v·ªÅ chu·ªói 'T√™n (ID)' t·ª´ danh s√°ch nh√¢n vi√™n."""
    if not employee_id or not employees:
        return ""
    for emp in employees:
        if emp.get('id') == employee_id:
            return f"{emp.get('name', '')} ({emp.get('id', '')})"
    return employee_id

def get_transport_provider_display(provider_id, transport_providers):
    """T√¨m v√† tr·∫£ v·ªÅ t√™n nh√† cung c·∫•p t·ª´ ID."""
    if not provider_id or not transport_providers:
        return provider_id
    for provider in transport_providers:
        if provider.get('id') == provider_id:
            return provider.get('name', provider_id)
    return provider_id


# Th√™m v√†o src/core/dependencies.py

def get_report_service():
    from src.services.report_service import ReportService
    return ReportService(API_TOKENS['MAIN_APP_TOKEN'], TABLE_IDS['MAIN_TABLE_ID'])


# Register template filters
templates.env.filters['get_employee_display'] = get_employee_display
templates.env.filters['get_transport_provider_display'] = get_transport_provider_display

============================================================

============================================================
FILE: src\routes\__init__.py
============================================================

============================================================

============================================================
FILE: src\routes\api_routes.py
============================================================
# src/routes/api_routes.py - API Routes
from fastapi import APIRouter, Request, Form, Depends
from fastapi.responses import HTMLResponse, JSONResponse
import time
import logging

from src.services.record_service import RecordService
from src.services.employee_service import EmployeeService
from src.services.transport_service import TransportProviderService
from src.services.depot_service import DepotService
from src.core.dependencies import get_current_user, templates, get_record_service, get_employee_service, get_transport_service, get_depot_service

router = APIRouter(tags=["api"])
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler()]
)

logger = logging.getLogger(__name__)

@router.get("/", response_class=HTMLResponse)
async def read_root(
    request: Request,
    record_service: RecordService = Depends(get_record_service),
    employee_service: EmployeeService = Depends(get_employee_service),
    transport_service: TransportProviderService = Depends(get_transport_service),
    depot_service: DepotService = Depends(get_depot_service)
):
    print("üîç Loading template: pages/index.html")
    user = get_current_user(request)
    return templates.TemplateResponse("pages/index.html", {
        "request": request,
        "user": user,
        "employees": employee_service.get_employees(),
        "transport_providers": transport_service.get_transport_providers(),
        "depots": depot_service.get_depots()
    })

@router.post("/validate-bill-id")
async def validate_bill_id(
    request: Request, 
    bill_id: str = Form(...),
    from_depot: str = Form(None),
    to_depot: str = Form(None),
    record_service: RecordService = Depends(get_record_service)
):
    """Validate single bill ID - ch·ªâ d√πng cho bulk form"""
    try:
        # ‚úÖ TH√äM: Ki·ªÉm tra b·∫Øt bu·ªôc c√≥ Kho ƒëi/Kho ƒë·∫øn
        if not from_depot or not to_depot:
            return JSONResponse({
                "valid": False,
                "message": "C·∫ßn ch·ªçn Kho ƒëi v√† Kho ƒë·∫øn tr∆∞·ªõc"
            })
        
        imex_items = record_service.get_api_data(bill_id)
        if not imex_items:
            return JSONResponse({
                "valid": False,
                "message": "ID kh√¥ng h·ª£p l·ªá"
            })
        
        example_item = imex_items[0]
        
        # Validate status ph·∫£i thu·ªôc [3,4,5,6]
        status_str = example_item.get("status", "")
        try:
            status = int(status_str) if status_str else None
        except ValueError:
            status = None
        
        if status not in [3, 4, 5, 6]:
            return JSONResponse({
                "valid": False,
                "message": "Status kh√¥ng h·ª£p l·ªá"
            })
        
        # Validate kho ƒëi/kho ƒë·∫øn v·ªõi th√¥ng tin chung
        if example_item.get("fromDepotId", "") != from_depot:
            return JSONResponse({
                "valid": False,
                "message": "Kh√¥ng ƒë√∫ng kho ƒëi"
            })
        
        if example_item.get("toDepotId", "") != to_depot:
            return JSONResponse({
                "valid": False,
                "message": "Kh√¥ng ƒë√∫ng kho ƒë·∫øn"
            })
        
        return JSONResponse({
            "valid": True,
            "message": "ID h·ª£p l·ªá",
            "from_depot": example_item.get("fromDepotName", ""),
            "to_depot": example_item.get("toDepotName", "")
        })
        
    except Exception as e:
        return JSONResponse({
            "valid": False,
            "message": "L·ªói ki·ªÉm tra"
        })

@router.post("/bulk-create-records", response_class=HTMLResponse)
async def bulk_create_records(
    request: Request,
    record_service: RecordService = Depends(get_record_service),
    depot_service: DepotService = Depends(get_depot_service)
):
    """Create multiple records at once"""
    user = get_current_user(request)
    
    try:
        body = await request.json()
        from_depot = body.get("from_depot")
        to_depot = body.get("to_depot") 
        handover_person = body.get("handover_person")
        transport_provider = body.get("transport_provider", "")
        bill_data = body.get("bill_data", [])
        
        # ‚úÖ S·ª¨A: T·∫•t c·∫£ th√¥ng tin ƒë·ªÅu b·∫Øt bu·ªôc
        if not from_depot:
            return HTMLResponse('<div class="error">‚ùå Thi·∫øu th√¥ng tin kho ƒëi</div>')
        if not to_depot:
            return HTMLResponse('<div class="error">‚ùå Thi·∫øu th√¥ng tin kho ƒë·∫øn</div>')
        if not handover_person:
            return HTMLResponse('<div class="error">‚ùå Thi·∫øu th√¥ng tin ng∆∞·ªùi b√†n giao</div>')
        if not transport_provider:
            return HTMLResponse('<div class="error">‚ùå Thi·∫øu th√¥ng tin ƒë∆°n v·ªã v·∫≠n chuy·ªÉn</div>')
        
        # ‚úÖ S·ª¨A: Validate s·ªë l∆∞·ª£ng b·∫Øt bu·ªôc cho t·∫•t c·∫£ Bill ID
        for item in bill_data:
            bill_id = item.get("bill_id")
            quantity = item.get("quantity", 0)
            if not quantity or quantity == 0:
                return HTMLResponse(f'<div class="error">‚ùå Bill ID "{bill_id}": B·∫Øt bu·ªôc nh·∫≠p s·ªë l∆∞·ª£ng bao/t·∫£i</div>')
        
        # Validate depots
        from_valid, from_name = depot_service.validate_depot(from_depot)
        to_valid, to_name = depot_service.validate_depot(to_depot)
        
        if not from_valid:
            return HTMLResponse(f'<div class="error">‚ùå Kho ƒëi kh√¥ng h·ª£p l·ªá: {from_name}</div>')
        if not to_valid:
            return HTMLResponse(f'<div class="error">‚ùå Kho ƒë·∫øn kh√¥ng h·ª£p l·ªá: {to_name}</div>')
        
        # ‚úÖ S·ª¨A: Counters cho summary - kh√¥ng l∆∞u t·ª´ng th√¥ng b√°o n·ªØa
        success_count = 0
        error_count = 0
        total_count = len(bill_data)
        error_samples = []  # Ch·ªâ l∆∞u m·∫´u l·ªói ƒë·ªÉ hi·ªÉn th·ªã
        
        # ‚úÖ S·ª¨A: Chu·∫©n b·ªã data cho batch creation
        records_to_create = []
        valid_bill_ids = []
        
        for item in bill_data:
            bill_id = item.get("bill_id")
            quantity = item.get("quantity", 0)
            # ‚úÖ TH√äM: L·∫•y th√™m bag_quantity v√† group_id t·ª´ JavaScript
            bag_quantity = item.get("bag_quantity", 0)
            group_id = item.get("group_id")  # Group ID t·ª´ JavaScript (c√≥ th·ªÉ l√† None cho single records)
            
            imex_items = record_service.get_api_data(bill_id)
            if not imex_items:
                error_count += 1
                if len(error_samples) < 3:  # Ch·ªâ l∆∞u 3 m·∫´u l·ªói ƒë·∫ßu ti√™n
                    error_samples.append(f"{bill_id}: ID kh√¥ng h·ª£p l·ªá")
                continue

            example_item = imex_items[0]

            # Ki·ªÉm tra status
            status_str = example_item.get("status", "")
            try:
                status = int(status_str) if status_str else None
            except ValueError:
                status = None

            if status not in [3, 4, 5, 6]:
                error_count += 1
                if len(error_samples) < 3:
                    error_samples.append(f"{bill_id}: ID ch∆∞a ƒë∆∞·ª£c duy·ªát")
                continue
            if example_item.get("fromDepotId", "") != from_depot:
                error_count += 1
                if len(error_samples) < 3:
                    error_samples.append(f"{bill_id}: Kh√¥ng ƒë√∫ng kho ƒëi")
                continue
            if example_item.get("toDepotId", "") != to_depot:
                error_count += 1
                if len(error_samples) < 3:
                    error_samples.append(f"{bill_id}: Kh√¥ng ƒë√∫ng kho ƒë·∫øn")
                continue

            # =================================================================
            # === ‚≠ê‚≠ê ƒê√ÇY L√Ä THAY ƒê·ªîI QUAN TR·ªåNG NH·∫§T ‚≠ê‚≠ê ===
            # =================================================================
            # ‚úÖ S·ª¨A: Chu·∫©n b·ªã record data cho batch creation v·ªõi t√™n c·ªôt ƒë√£ ƒë·ªìng b·ªô
            record_data = {
                "ID": bill_id,
                "ID kho ƒëi": example_item.get("fromDepotId", ""),
                "Kho ƒëi": example_item.get("fromDepotName", ""),
                "ID kho ƒë·∫øn": example_item.get("toDepotId", ""),
                "Kho ƒë·∫øn": example_item.get("toDepotName", ""),
                "S·ªë l∆∞·ª£ng": int(example_item.get("realQuantity") or 0),
                "S·ªë l∆∞·ª£ng bao": int(quantity), # <<< ƒê√É S·ª¨A T·ª™ "S·ªë l∆∞·ª£ng t·∫£i"
                "Ng∆∞·ªùi b√†n giao": handover_person,
                "ƒê∆°n v·ªã v·∫≠n chuy·ªÉn": transport_provider,
                "Ng√†y b√†n giao": int(time.time() * 1000)
            }
            
            # ‚úÖ TH√äM: Th√™m th√¥ng tin Group Bill n·∫øu c√≥
            if bag_quantity > 0:
                record_data["S·ªë l∆∞·ª£ng t√∫i"] = int(bag_quantity) # <<< ƒê√É S·ª¨A T·ª™ "S·ªë l∆∞·ª£ng bao"
            
            if group_id:
                record_data["Group ID"] = group_id
            
            records_to_create.append(record_data)
            valid_bill_ids.append(bill_id)

        # ‚úÖ S·ª¨A: S·ª≠ d·ª•ng batch creation thay v√¨ t·∫°o t·ª´ng record
        if records_to_create:
            batch_success, batch_message = record_service.batch_create_records(records_to_create)
            
            if batch_success:
                # Batch th√†nh c√¥ng - t·∫•t c·∫£ records h·ª£p l·ªá ƒë·ªÅu ƒë∆∞·ª£c t·∫°o
                success_count = len(valid_bill_ids)
            else:
                # Batch th·∫•t b·∫°i - fallback v·ªÅ t·∫°o t·ª´ng record
                logger.warning(f"Batch creation failed: {batch_message}, falling back to individual creation")
                return HTMLResponse(f'<div class="error">‚ùå L·ªói batch create: {batch_message}</div>')

        # ‚úÖ S·ª¨A: Format k·∫øt qu·∫£ ng·∫Øn g·ªçn - kh√¥ng li·ªát k√™ t·ª´ng ID
        if success_count == total_count:
            # T·∫•t c·∫£ th√†nh c√¥ng
            result_html = f'<div class="success">üìä Ho√†n th√†nh: {success_count}/{total_count} b·∫£n ghi th√†nh c√¥ng</div>'
        elif success_count > 0 and error_count > 0:
            # M·ªôt ph·∫ßn th√†nh c√¥ng
            result_html = f'<div class="info">üìä Ho√†n th√†nh: {success_count}/{total_count} b·∫£n ghi th√†nh c√¥ng'
            result_html += f'<br>‚ùå {error_count} b·∫£n ghi th·∫•t b·∫°i'
            
            # Ch·ªâ hi·ªÉn th·ªã m·∫´u l·ªói n·∫øu c√≥
            if error_samples:
                result_html += f'<br><small>V√≠ d·ª• l·ªói: {"; ".join(error_samples)}'
                if error_count > len(error_samples):
                    result_html += f' v√† {error_count - len(error_samples)} l·ªói kh√°c'
                result_html += '</small>'
            
            result_html += '</div>'
        else:
            # T·∫•t c·∫£ th·∫•t b·∫°i
            result_html = f'<div class="error">‚ùå Kh√¥ng th·ªÉ t·∫°o b·∫£n ghi n√†o ({error_count}/{total_count} th·∫•t b·∫°i)'
            
            # Hi·ªÉn th·ªã m·∫´u l·ªói
            if error_samples:
                result_html += f'<br>L·ªói: {"; ".join(error_samples)}'
                if error_count > len(error_samples):
                    result_html += f' v√† {error_count - len(error_samples)} l·ªói kh√°c'
            
            result_html += '</div>'
        
        logger.info(f"User {user.get('name')} bulk created {success_count}/{total_count} records")
        return HTMLResponse(result_html)
        
    except Exception as e:
        logger.error(f"Error in bulk create: {e}")
        return HTMLResponse(f'<div class="error">‚ùå L·ªói h·ªá th·ªëng: {str(e)}</div>')

@router.get("/health")
async def health_check():
    """Health check endpoint (public)"""
    return {"status": "ok", "service": "inventory-flow-tracker"}
============================================================

============================================================
FILE: src\routes\auth_routes.py
============================================================
# src/routes/auth_routes.py - Authentication Routes
from fastapi import APIRouter, Request
from fastapi.responses import HTMLResponse, RedirectResponse
import secrets
import logging

from src.auth.lark_oauth import LarkOAuthService
from src.auth.session_manager import SessionManager
from src.utils.config import AUTH_CONFIG
from src.core.dependencies import templates

router = APIRouter(prefix="/auth", tags=["auth"])
logger = logging.getLogger(__name__)

# Initialize services
lark_oauth = LarkOAuthService(
    app_id=AUTH_CONFIG['LARK_APP_ID'],
    app_secret=AUTH_CONFIG['LARK_APP_SECRET'],
    base_url=AUTH_CONFIG['LARK_BASE_URL'],
    redirect_uri=AUTH_CONFIG['REDIRECT_URI']
)

session_manager = SessionManager(
    secret_key=AUTH_CONFIG['SECRET_KEY'],
    expire_hours=AUTH_CONFIG['SESSION_EXPIRE_HOURS']
)

@router.get("/login", response_class=HTMLResponse)
async def login_page(request: Request):
    """Trang ƒëƒÉng nh·∫≠p"""
    return templates.TemplateResponse("auth/login.html", {"request": request})

@router.get("/lark")
async def login_with_lark():
    """Redirect ƒë·∫øn Lark OAuth"""
    state = secrets.token_urlsafe(32)
    oauth_url = lark_oauth.generate_oauth_url(state)
    
    logger.info(f"üîó Generated OAuth URL: {oauth_url}")
    
    response = RedirectResponse(url=oauth_url, status_code=302)
    response.set_cookie("oauth_state", state, httponly=True, max_age=600)
    return response

@router.get("/callback")
async def auth_callback(request: Request, code: str = None, state: str = None, error: str = None):
    """OAuth callback t·ª´ Lark"""
    if error:
        logger.error(f"OAuth error: {error}")
        return templates.TemplateResponse("auth/unauthorized.html", {
            "request": request,
            "error": "ƒêƒÉng nh·∫≠p th·∫•t b·∫°i t·ª´ Lark"
        })
    
    if not code:
        return templates.TemplateResponse("auth/unauthorized.html", {
            "request": request,
            "error": "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c m√£ x√°c th·ª±c"
        })
    
    try:
        # Step 1: Exchange code for token
        user_access_token = await lark_oauth.exchange_code_for_token(code)
        if not user_access_token:
            raise Exception("Kh√¥ng th·ªÉ l·∫•y access token")
        
        # Step 2: Get user info
        user_info = await lark_oauth.get_user_info(user_access_token)
        if not user_info:
            raise Exception("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin user")
        
        # Step 3: Check permission
        open_id = user_info.get('open_id')
        has_permission, message = await lark_oauth.check_user_permission(
            open_id, 
            AUTH_CONFIG['AUTH_APP_TOKEN'], 
            AUTH_CONFIG['AUTH_TABLE_ID']
        )
        
        if not has_permission:
            return templates.TemplateResponse("auth/unauthorized.html", {
                "request": request,
                "error": message,
                "user_name": user_info.get('name', 'Unknown')
            })
        
        # Step 4: Create session
        session_token = session_manager.create_session_token(user_info)
        
        # Step 5: Redirect with session
        response = RedirectResponse(url="/", status_code=302)
        response.set_cookie(
            "session_token",
            session_token,
            httponly=True,
            secure=False,
            samesite="lax",
            max_age=AUTH_CONFIG['SESSION_EXPIRE_HOURS'] * 60 * 60
        )
        response.delete_cookie("oauth_state")
        
        logger.info(f"User {user_info.get('name')} ƒëƒÉng nh·∫≠p th√†nh c√¥ng")
        return response
        
    except Exception as e:
        logger.error(f"Error during auth callback: {e}")
        return templates.TemplateResponse("auth/unauthorized.html", {
            "request": request,
            "error": f"L·ªói h·ªá th·ªëng: {str(e)}"
        })

@router.post("/logout")
async def logout():
    """ƒêƒÉng xu·∫•t"""
    response = RedirectResponse(url="/login", status_code=302)
    response.delete_cookie("session_token")
    return response

============================================================

============================================================
FILE: src\routes\record_routes.py
============================================================
# # src/routes/record_routes.py - Record CRUD Routes
# from fastapi import APIRouter, Request, Form, Response, Depends
# from fastapi.responses import HTMLResponse
# import logging

# from src.services.record_service import RecordService
# from src.services.employee_service import EmployeeService
# from src.services.transport_service import TransportProviderService
# from src.core.dependencies import get_current_user, templates, get_record_service, get_employee_service, get_transport_service
# from src.utils.config import CREATABLE_FIELDS

# router = APIRouter(prefix="/records", tags=["records"])
# logger = logging.getLogger(__name__)

# def format_timestamp_ms_to_dt_string(ts_ms):
#     if not ts_ms: return ""
#     try:
#         import datetime
#         return datetime.datetime.fromtimestamp(int(ts_ms) / 1000).strftime('%Y-%m-%d %H:%M:%S')
#     except (ValueError, TypeError):
#         return str(ts_ms)

# @router.post("/search", response_class=HTMLResponse)
# async def search_bill(
#     request: Request, 
#     bill_id: str = Form(...),
#     record_service: RecordService = Depends(get_record_service),
#     employee_service: EmployeeService = Depends(get_employee_service),
#     transport_service: TransportProviderService = Depends(get_transport_service)
# ):
#     user = get_current_user(request)
    
#     if not bill_id:
#         return HTMLResponse("<div class='error'>Vui l√≤ng nh·∫≠p Bill ID.</div>")

#     found, record = record_service.search_record(bill_id)
#     context = {
#         "request": request,
#         "user": user,
#         "employees": employee_service.get_employees(),
#         "transport_providers": transport_service.get_transport_providers()
#     }

#     if found and record:
#         context.update({
#             "record": record,
#             "format_ts": format_timestamp_ms_to_dt_string
#         })
#         return templates.TemplateResponse("pages/view_only.html", context)
#     else:
#         imex_items = record_service.get_api_data(bill_id)
#         if not imex_items:
#             return HTMLResponse("<div class='error'>‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu, ki·ªÉm tra l·∫°i Bill ID.</div>")

#         example_item = imex_items[0]
#         context["api_data"] = {
#             "ID": bill_id,
#             "ID kho ƒëi": example_item.get("fromDepotId", ""),
#             "Kho ƒëi": example_item.get("fromDepotName", ""),
#             "ID kho ƒë·∫øn": example_item.get("toDepotId", ""),
#             "Kho ƒë·∫øn": example_item.get("toDepotName", ""),
#             "S·ªë l∆∞·ª£ng": int(example_item.get("realQuantity") or 0),
#         }
#         context["creatable_fields"] = CREATABLE_FIELDS
#         return templates.TemplateResponse("components/forms/create.html", context)

# @router.post("/", response_class=HTMLResponse)
# async def create_record(
#     request: Request,
#     record_service: RecordService = Depends(get_record_service)
# ):
#     user = get_current_user(request)
#     form_data = await request.form()
#     bill_id = form_data.get("ID", "Kh√¥ng r√µ")
    
#     logger.info(f"User {user.get('name')} creating record for Bill ID: {bill_id}")
    
#     success, message = record_service.create_record(form_data)

#     if success:
#         return HTMLResponse(f"<div class='success'>‚úÖ ƒê√£ th√™m th√†nh c√¥ng Bill ID: {bill_id}</div>")
#     else:
#         return HTMLResponse(f"<div class='error'>‚ùå L·ªói khi th√™m m·ªõi: {message}</div>")

# @router.put("/{record_id}", response_class=HTMLResponse)
# async def update_record(
#     record_id: str, 
#     request: Request,
#     record_service: RecordService = Depends(get_record_service)
# ):
#     user = get_current_user(request)
#     form_data = await request.form()
    
#     logger.info(f"User {user.get('name')} updating record: {record_id}")
    
#     success, message = record_service.update_record(record_id, form_data)
    
#     if success:
#         return HTMLResponse("<div class='success'>üìù C·∫≠p nh·∫≠t th√†nh c√¥ng. Form ƒë√£ ƒë∆∞·ª£c reset.</div>")
#     else:
#         return HTMLResponse(f"<div class='error'>‚ùå L·ªói khi c·∫≠p nh·∫≠t: {message}</div>")

# @router.delete("/{record_id}", response_class=Response)
# async def delete_record_endpoint(
#     record_id: str, 
#     request: Request,
#     record_service: RecordService = Depends(get_record_service)
# ):
#     user = get_current_user(request)
    
#     logger.info(f"User {user.get('name')} deleting record: {record_id}")
    
#     success, message = record_service.delete_record(record_id)
#     if success:
#         return Response(status_code=200, content="<div class='success'>üóëÔ∏è ƒê√£ x√≥a th√†nh c√¥ng.</div>")
#     else:
#         return HTMLResponse(f"<div class='error'>‚ùå L·ªói khi x√≥a: {message}</div>", status_code=400)




# src/routes/record_routes.py - Record CRUD Routes
from fastapi import APIRouter, Request, Form, Response, Depends
from fastapi.responses import HTMLResponse
import logging

from src.services.record_service import RecordService
from src.services.employee_service import EmployeeService
from src.services.transport_service import TransportProviderService
from src.core.dependencies import get_current_user, templates, get_record_service, get_employee_service, get_transport_service
from src.utils.config import CREATABLE_FIELDS

router = APIRouter(prefix="/records", tags=["records"])
logger = logging.getLogger(__name__)

def format_timestamp_ms_to_dt_string(ts_ms):
    if not ts_ms: return ""
    try:
        import datetime
        return datetime.datetime.fromtimestamp(int(ts_ms) / 1000).strftime('%Y-%m-%d %H:%M:%S')
    except (ValueError, TypeError):
        return str(ts_ms)

@router.post("/search", response_class=HTMLResponse)
async def search_bill(
    request: Request, 
    bill_id: str = Form(...),
    record_service: RecordService = Depends(get_record_service),
    employee_service: EmployeeService = Depends(get_employee_service),
    transport_service: TransportProviderService = Depends(get_transport_service)
):
    user = get_current_user(request)
    
    if not bill_id:
        return HTMLResponse("<div class='error'>Vui l√≤ng nh·∫≠p Bill ID.</div>")

    found, record = record_service.search_record(bill_id)
    context = {
        "request": request,
        "user": user,
        "employees": employee_service.get_employees(),
        "transport_providers": transport_service.get_transport_providers()
    }

    if found and record:
        context.update({
            "record": record,
            "format_ts": format_timestamp_ms_to_dt_string
        })
        return templates.TemplateResponse("pages/view_only.html", context)
    else:
        imex_items = record_service.get_api_data(bill_id)
        if not imex_items:
            return HTMLResponse("<div class='error'>‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu, ki·ªÉm tra l·∫°i Bill ID.</div>")

        # Ch·ªâ hi·ªÉn th·ªã th√¥ng b√°o "ID m·ªõi" thay v√¨ form t·∫°o m·ªõi
        return HTMLResponse("<div class='info'>üìã ID m·ªõi - ch∆∞a c√≥ b·∫£n ghi trong h·ªá th·ªëng.</div>")

@router.post("/", response_class=HTMLResponse)
async def create_record(
    request: Request,
    record_service: RecordService = Depends(get_record_service)
):
    user = get_current_user(request)
    form_data = await request.form()
    bill_id = form_data.get("ID", "Kh√¥ng r√µ")
    
    logger.info(f"User {user.get('name')} creating record for Bill ID: {bill_id}")
    
    success, message = record_service.create_record(form_data)

    if success:
        return HTMLResponse(f"<div class='success'>‚úÖ ƒê√£ th√™m th√†nh c√¥ng Bill ID: {bill_id}</div>")
    else:
        return HTMLResponse(f"<div class='error'>‚ùå L·ªói khi th√™m m·ªõi: {message}</div>")

@router.put("/{record_id}", response_class=HTMLResponse)
async def update_record(
    record_id: str, 
    request: Request,
    record_service: RecordService = Depends(get_record_service)
):
    user = get_current_user(request)
    form_data = await request.form()
    
    logger.info(f"User {user.get('name')} updating record: {record_id}")
    
    success, message = record_service.update_record(record_id, form_data)
    
    if success:
        return HTMLResponse("<div class='success'>üìù C·∫≠p nh·∫≠t th√†nh c√¥ng. Form ƒë√£ ƒë∆∞·ª£c reset.</div>")
    else:
        return HTMLResponse(f"<div class='error'>‚ùå L·ªói khi c·∫≠p nh·∫≠t: {message}</div>")

@router.delete("/{record_id}", response_class=Response)
async def delete_record_endpoint(
    record_id: str, 
    request: Request,
    record_service: RecordService = Depends(get_record_service)
):
    user = get_current_user(request)
    
    logger.info(f"User {user.get('name')} deleting record: {record_id}")
    
    success, message = record_service.delete_record(record_id)
    if success:
        return Response(status_code=200, content="<div class='success'>üóëÔ∏è ƒê√£ x√≥a th√†nh c√¥ng.</div>")
    else:
        return HTMLResponse(f"<div class='error'>‚ùå L·ªói khi x√≥a: {message}</div>", status_code=400)

============================================================

============================================================
FILE: src\routes\refresh_routes.py
============================================================
# FILE: src/routes/refresh_routes.py (FINAL & CORRECT PARTIAL UPDATE VERSION)
from fastapi import APIRouter, Request, Depends
# ‚úÖ S·ª¨A: D√πng l·∫°i Response v√† th√™m templates ƒë·ªÉ render HTML
from fastapi.responses import Response 
from src.core.dependencies import templates # Th√™m templates
import time
import logging
import json

from src.services.employee_service import EmployeeService
from src.services.transport_service import TransportProviderService
from src.services.depot_service import DepotService
from src.core.dependencies import get_current_user, get_employee_service, get_transport_service, get_depot_service
from src.utils.config import TABLE_IDS

router = APIRouter(prefix="/refresh", tags=["refresh"])
logger = logging.getLogger(__name__)

# =================================================================================
# === H√ÄM REFRESH NH√ÇN VI√äN (TR·∫¢ V·ªÄ PARTIAL HTML) =================================
# =================================================================================
@router.post("/employees")
async def refresh_employees_endpoint(
    request: Request,
    employee_service: EmployeeService = Depends(get_employee_service)
):
    try:
        success, message = employee_service.refresh_employees()
        event_data = {"message": message, "type": "success" if success else "error"}
    except Exception as e:
        event_data = {"message": f"L·ªói h·ªá th·ªëng: {str(e)}", "type": "error"}

    headers = {"HX-Trigger": json.dumps({"show-refresh-notification": event_data})}
    
    # ‚úÖ S·ª¨A: Render l·∫°i component dropdown v·ªõi d·ªØ li·ªáu m·ªõi v√† tr·∫£ v·ªÅ HTML
    new_employees = employee_service.get_employees()
    context = {
        "request": request, 
        "employees": new_employees, 
        "field_name": "handover_person", 
        "placeholder": "T√¨m nh√¢n vi√™n..."
    }
    # D√πng l·∫°i TemplateResponse ƒë·ªÉ render v√† g·ª≠i header
    return templates.TemplateResponse(
        "components/dropdowns/employee.html",
        context,
        headers=headers
    )

# =================================================================================
# === H√ÄM REFRESH ƒê∆†N V·ªä V·∫¨N CHUY·ªÇN (TR·∫¢ V·ªÄ PARTIAL HTML) ==========================
# =================================================================================
@router.post("/transport-providers")
async def refresh_transport_providers_endpoint(
    request: Request,
    transport_service: TransportProviderService = Depends(get_transport_service)
):
    try:
        time.sleep(0.5)
        table_id = TABLE_IDS.get('TRANSPORT_PROVIDERS_TABLE_ID', 'tblyiELQIi6M1j1r')
        success, message = transport_service.refresh_transport_providers(table_id)
        event_data = {"message": message, "type": "success" if success else "error"}
    except Exception as e:
        event_data = {"message": f"L·ªói h·ªá th·ªëng: {str(e)}", "type": "error"}
            
    headers = {"HX-Trigger": json.dumps({"show-refresh-notification": event_data})}
    
    # ‚úÖ S·ª¨A: Render l·∫°i component dropdown v·ªõi d·ªØ li·ªáu m·ªõi v√† tr·∫£ v·ªÅ HTML
    new_providers = transport_service.get_transport_providers()
    context = {
        "request": request,
        "transport_providers": new_providers,
        "field_name": "transport_provider",
        "placeholder": "T√¨m ƒë∆°n v·ªã v·∫≠n chuy·ªÉn..."
    }
    return templates.TemplateResponse(
        "components/dropdowns/transport.html",
        context,
        headers=headers
    )

# =================================================================================
# === H√ÄM REFRESH KHO (TR·∫¢ V·ªÄ PARTIAL HTML) ========================================
# =================================================================================
@router.post("/depots")
async def refresh_depots_endpoint(
    request: Request,
    depot_service: DepotService = Depends(get_depot_service)
):
    try:
        time.sleep(0.5)
        success, message = depot_service.refresh_depots()
        event_data = {"message": message, "type": "success" if success else "error"}
    except Exception as e:
        event_data = {"message": f"L·ªói h·ªá th·ªëng: {str(e)}", "type": "error"}

    headers = {"HX-Trigger": json.dumps({"show-refresh-notification": event_data})}

    # ‚úÖ S·ª¨A: Render l·∫°i component dropdown v·ªõi d·ªØ li·ªáu m·ªõi v√† tr·∫£ v·ªÅ HTML
    new_depots = depot_service.get_depots()
    # Ch√∫ √Ω: c·∫ßn truy·ªÅn c·∫£ field_name v√† placeholder, ta c√≥ th·ªÉ t·∫°m hardcode
    # ho·∫∑c t√¨m c√°ch truy·ªÅn t·ª´ frontend, nh∆∞ng hardcode l√† ƒë∆°n gi·∫£n nh·∫•t.
    # Ta s·∫Ω gi·∫£ ƒë·ªãnh field_name v√† placeholder d·ª±a tr√™n context.
    context = {
        "request": request,
        "depots": new_depots,
        "field_name": "depot", # T√™n chung, kh√¥ng ·∫£nh h∆∞·ªüng nhi·ªÅu
        "placeholder": "Ch·ªçn kho..."
    }
    return templates.TemplateResponse(
        "components/dropdowns/depot.html",
        context,
        headers=headers
    )
============================================================

============================================================
FILE: src\routes\report_routes.py
============================================================
# src/routes/report_routes.py
from fastapi import APIRouter, Request, Query, Depends, HTTPException
from fastapi.responses import HTMLResponse, StreamingResponse
from datetime import datetime, timedelta
import logging
import io
import re
import unicodedata

from src.services.report_service import ReportService
from src.core.dependencies import get_current_user, templates, get_report_service

router = APIRouter(prefix="/reports", tags=["reports"])
logger = logging.getLogger(__name__)

def create_safe_filename(from_depot, to_depot, date_str):
    """T·∫°o t√™n file an to√†n, lo·∫°i b·ªè k√Ω t·ª± ƒë·∫∑c bi·ªát ti·∫øng Vi·ªát"""
    def normalize_text(text):
        # Normalize Unicode v√† convert sang ASCII
        normalized = unicodedata.normalize('NFD', text)
        # Lo·∫°i b·ªè d·∫•u v√† ch·ªâ gi·ªØ ASCII
        ascii_text = ''.join(c for c in normalized if unicodedata.category(c) != 'Mn')
        # Thay th·∫ø kho·∫£ng tr·∫Øng v√† k√Ω t·ª± ƒë·∫∑c bi·ªát b·∫±ng _
        safe_text = re.sub(r'[^A-Za-z0-9]+', '_', ascii_text)
        # Lo·∫°i b·ªè _ ·ªü ƒë·∫ßu v√† cu·ªëi
        return safe_text.strip('_')
    
    
    safe_from = normalize_text(from_depot)
    safe_to = normalize_text(to_depot)
    
    # T·∫°o t√™n file
    filename = f"tuyen_{safe_from}_to_{safe_to}_{date_str or 'tat_ca'}.xlsx"
    
    # ƒê·∫£m b·∫£o filename kh√¥ng qu√° d√†i
    if len(filename) > 100:
        filename = f"tuyen_route_{date_str or 'tat_ca'}.xlsx"
    
    return filename

@router.get("/daily", response_class=HTMLResponse)
async def daily_report_page(
    request: Request,
    date: str = Query(None, description="Ng√†y b√°o c√°o (YYYY-MM-DD)"),
    employee: str = Query(None, description="ID nh√¢n vi√™n"),
    from_depot: str = Query(None, description="ID kho ƒëi"),
    to_depot: str = Query(None, description="ID kho ƒë·∫øn"),
    report_service: ReportService = Depends(get_report_service)
):
    """Trang b√°o c√°o h√†ng ng√†y v·ªõi b·ªô l·ªçc"""
    user = get_current_user(request)
    
    # N·∫øu kh√¥ng c√≥ date parameter, s·ª≠ d·ª•ng ng√†y h√¥m nay
    if not date:
        date = datetime.now().strftime('%Y-%m-%d')
    
    try:
        # Validate date format
        report_date = datetime.strptime(date, '%Y-%m-%d')
        
        # L·∫•y d·ªØ li·ªáu b√°o c√°o v·ªõi filters
        report_data = report_service.get_daily_report(
            user_id=None,  # Kh√¥ng filter theo user n·ªØa
            date_str=date,
            employee_filter=employee,
            from_depot_filter=from_depot,
            to_depot_filter=to_depot
        )
        
        # L·∫•y danh s√°ch ƒë·ªÉ l√†m filter options
        all_employees = report_service.get_all_employees()
        all_depots = report_service.get_all_depots()
        
        # T·∫°o context cho template
        context = {
            "request": request,
            "user": user,
            "report_date": report_date,
            "date_str": date,
            "report_data": report_data,
            "today": datetime.now().strftime('%Y-%m-%d'),
            "all_employees": all_employees,
            "all_depots": all_depots,
            "current_filters": {
                "employee": employee,
                "from_depot": from_depot,
                "to_depot": to_depot
            }
        }
        
        return templates.TemplateResponse("pages/daily_report.html", context)
        
    except ValueError:
        logger.error(f"Invalid date format: {date}")
        context = {
            "request": request,
            "user": user,
            "error": "ƒê·ªãnh d·∫°ng ng√†y kh√¥ng h·ª£p l·ªá. Vui l√≤ng s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng YYYY-MM-DD",
            "today": datetime.now().strftime('%Y-%m-%d'),
            "all_employees": [],
            "all_depots": [],
            "current_filters": {}
        }
        return templates.TemplateResponse("pages/daily_report.html", context)
        
    except Exception as e:
        logger.error(f"Error generating daily report: {e}")
        context = {
            "request": request,
            "user": user,
            "error": f"L·ªói khi t·∫°o b√°o c√°o: {str(e)}",
            "today": datetime.now().strftime('%Y-%m-%d'),
            "all_employees": [],
            "all_depots": [],
            "current_filters": {}
        }
        return templates.TemplateResponse("pages/daily_report.html", context)

@router.get("/daily/export-route")
async def export_route_report(
    request: Request,
    from_depot: str = Query(..., description="T√™n kho ƒëi"),
    to_depot: str = Query(..., description="T√™n kho ƒë·∫øn"),
    date: str = Query(None, description="Ng√†y b√°o c√°o (YYYY-MM-DD)"),
    employee: str = Query(None, description="ID nh√¢n vi√™n"),
    report_service: ReportService = Depends(get_report_service)
):
    """Xu·∫•t b√°o c√°o theo tuy·∫øn ƒë∆∞·ªùng c·ª• th·ªÉ ra Excel"""
    user = get_current_user(request)
    
    try:
        excel_buffer, record_count = report_service.export_route_records_to_excel(
            from_depot=from_depot,
            to_depot=to_depot,
            user_id=None,
            date_str=date,
            employee_filter=employee
        )
        
        if not excel_buffer:
            raise HTTPException(status_code=404, detail="Kh√¥ng c√≥ d·ªØ li·ªáu cho tuy·∫øn ƒë∆∞·ªùng n√†y")
        
        # S·ª≠ d·ª•ng helper function ƒë·ªÉ t·∫°o t√™n file an to√†n
        filename = create_safe_filename(from_depot, to_depot, date)
        
        return StreamingResponse(
            io.BytesIO(excel_buffer.read()),
            media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            headers={"Content-Disposition": f"attachment; filename={filename}"}
        )
        
    except Exception as e:
        logger.error(f"Error exporting route report: {e}")
        raise HTTPException(status_code=500, detail=f"L·ªói xu·∫•t b√°o c√°o tuy·∫øn: {str(e)}")

============================================================

============================================================
FILE: src\services\__init__.py
============================================================

============================================================

============================================================
FILE: src\services\depot_service.py
============================================================
# src/services/depot_service.py
from src.utils.depot import get_depots_from_file, update_depot_json_file

class DepotService:
    def get_depots(self):
        """L·∫•y danh s√°ch depot"""
        return get_depots_from_file()
    
    def refresh_depots(self):
        """L√†m m·ªõi danh s√°ch depot"""
        return update_depot_json_file()
    
    def validate_depot(self, depot_id):
        """Ki·ªÉm tra depot_id c√≥ h·ª£p l·ªá kh√¥ng"""
        if not depot_id:
            return False, "ID depot tr·ªëng"
        
        depots = self.get_depots()
        for depot in depots:
            if depot.get('id') == str(depot_id):
                return True, depot.get('name', '')
        
        return False, "Depot kh√¥ng t·ªìn t·∫°i"

============================================================

============================================================
FILE: src\services\employee_service.py
============================================================
# src/services/employee_service.py
from src.utils.cache import get_employee_list_from_file, update_employee_json_file

class EmployeeService:
    def get_employees(self):
        """L·∫•y danh s√°ch nh√¢n vi√™n"""
        return get_employee_list_from_file()
    
    def refresh_employees(self):
        """L√†m m·ªõi danh s√°ch nh√¢n vi√™n"""
        return update_employee_json_file()

============================================================

============================================================
FILE: src\services\record_service.py
============================================================
# src/services/record_service.py
from src.utils.api import fetch_imex_details
from src.utils.larkbase import (
    larkbase_find_by_field, larkbase_write_data, 
    larkbase_update_data, larkbase_delete_record
)
import time
import datetime
import logging

class RecordService:
    def __init__(self, app_token, table_id):
        self.app_token = app_token
        self.table_id = table_id

    def search_record(self, bill_id):
        """T√¨m ki·∫øm record theo Bill ID"""
        return larkbase_find_by_field(self.app_token, self.table_id, "ID", bill_id)

    def create_record(self, form_data):
        """T·∫°o record m·ªõi v·ªõi t√°ch ri√™ng ID v√† t√™n t·ª´ dropdown"""
        new_record = {}
        
        # ‚≠ê ƒê√É S·ª¨A: C·∫≠p nh·∫≠t danh s√°ch c√°c tr∆∞·ªùng s·ªë cho ƒë√∫ng
        numeric_fields = ["S·ªë l∆∞·ª£ng", "S·ªë l∆∞·ª£ng t√∫i", "S·ªë l∆∞·ª£ng bao", "S·ªë l∆∞·ª£ng bao t·∫£i nh·∫≠n"]
        
        for key, value in form_data.items():
            if key in numeric_fields and value:
                try:
                    new_record[key] = int(value) if value else 0
                except (ValueError, TypeError):
                    new_record[key] = 0
            elif key == "Ng∆∞·ªùi b√†n giao":
                # ƒê√¢y l√† gi√° tr·ªã t·ª´ hidden input (ch·ªâ ch·ª©a ID)
                if value:
                    # L∆∞u ID v√†o c·ªôt ri√™ng
                    new_record["ID ng∆∞·ªùi b√†n giao"] = value
                    
                    # T√¨m t√™n t∆∞∆°ng ·ª©ng v·ªõi ID t·ª´ danh s√°ch nh√¢n vi√™n
                    from src.services.employee_service import EmployeeService
                    employee_service = EmployeeService()
                    employees = employee_service.get_employees()
                    
                    employee_name = ""
                    for emp in employees:
                        if emp.get('id') == value:
                            employee_name = emp.get('name', '')
                            break
                    
                    if employee_name:
                        new_record["Ng∆∞·ªùi b√†n giao"] = employee_name
                    else:
                        new_record["Ng∆∞·ªùi b√†n giao"] = value  # Fallback v·ªÅ ID n·∫øu kh√¥ng t√¨m th·∫•y t√™n
                continue
            elif value and key not in ["Ng∆∞·ªùi b√†n giao_hidden"]:  
                new_record[key] = value
        
        new_record["Ng√†y b√†n giao"] = int(time.time() * 1000)
        
        # Debug: In ra d·ªØ li·ªáu tr∆∞·ªõc khi g·ª≠i
        logging.info(f"Data to send: {new_record}")
        
        return larkbase_write_data(self.app_token, self.table_id, new_record)

    def batch_create_records(self, records_data, extra_group_id=None):
        """T·∫°o nhi·ªÅu records c√πng l√∫c v·ªõi Group ID"""
        from src.utils.larkbase import larkbase_batch_write_data
        
        processed_records = []
        
        for record_data in records_data:
            processed_record = {}
            
            # ‚≠ê ƒê√É S·ª¨A: C·∫≠p nh·∫≠t danh s√°ch c√°c tr∆∞·ªùng s·ªë cho ƒë√∫ng
            numeric_fields = ["S·ªë l∆∞·ª£ng", "S·ªë l∆∞·ª£ng t√∫i", "S·ªë l∆∞·ª£ng bao", "S·ªë l∆∞·ª£ng bao t·∫£i nh·∫≠n"]
            
            for key, value in record_data.items():
                if key in numeric_fields and value:
                    try:
                        processed_record[key] = int(value) if value else 0
                    except (ValueError, TypeError):
                        processed_record[key] = 0
                elif key == "Ng∆∞·ªùi b√†n giao":
                    if value:
                        processed_record["ID ng∆∞·ªùi b√†n giao"] = value
                        # Get employee name
                        from src.services.employee_service import EmployeeService
                        employee_service = EmployeeService()
                        employees = employee_service.get_employees()
                        
                        employee_name = ""
                        for emp in employees:
                            if emp.get('id') == value:
                                employee_name = emp.get('name', '')
                                break
                        
                        processed_record["Ng∆∞·ªùi b√†n giao"] = employee_name or value
                    continue
                elif key == "group_id":
                    # ‚úÖ TH√äM: X·ª≠ l√Ω Group ID
                    if value:
                        processed_record["Group ID"] = value
                    continue
                elif value and key not in ["Ng∆∞·ªùi b√†n giao_hidden", "group_id"]:
                    processed_record[key] = value
            
            processed_record["Ng√†y b√†n giao"] = int(time.time() * 1000)
            processed_records.append(processed_record)
        
        return larkbase_batch_write_data(self.app_token, self.table_id, processed_records)


    def update_record(self, record_id, form_data):
        """C·∫≠p nh·∫≠t record v·ªõi t√°ch ri√™ng ID v√† t√™n t·ª´ dropdown"""
        from src.utils.config import UPDATABLE_FIELDS
        
        update_data = {}
        for field in UPDATABLE_FIELDS:
            if field in form_data and form_data[field]:
                value = form_data[field]
                
                if field == "Ng∆∞·ªùi b√†n giao":
                    # L∆∞u ID
                    update_data["ID ng∆∞·ªùi b√†n giao"] = value
                    
                    # T√¨m t√™n t·ª´ danh s√°ch nh√¢n vi√™n
                    from src.services.employee_service import EmployeeService
                    employee_service = EmployeeService()
                    employees = employee_service.get_employees()
                    
                    employee_name = ""
                    for emp in employees:
                        if emp.get('id') == value:
                            employee_name = emp.get('name', '')
                            break
                    
                    if employee_name:
                        update_data["Ng∆∞·ªùi b√†n giao"] = employee_name
                    else:
                        update_data["Ng∆∞·ªùi b√†n giao"] = value
                elif field == "Ng√†y nh·∫≠n h√†ng" and value:
                    dt_obj = datetime.datetime.strptime(value, '%Y-%m-%d')
                    update_data[field] = int(dt_obj.timestamp() * 1000)
                else:
                    update_data[field] = value
        
        if not update_data:
            return False, "Kh√¥ng c√≥ th√¥ng tin n√†o ƒë∆∞·ª£c thay ƒë·ªïi."
        
        return larkbase_update_data(self.app_token, self.table_id, record_id, update_data)

    def delete_record(self, record_id):
        """X√≥a record"""
        return larkbase_delete_record(self.app_token, self.table_id, record_id)

    def get_api_data(self, bill_id):
        """L·∫•y d·ªØ li·ªáu t·ª´ API"""
        return fetch_imex_details(bill_id)
============================================================

============================================================
FILE: src\services\report_service.py
============================================================
# src/services/report_service.py

from datetime import datetime, timedelta
from collections import defaultdict
from src.utils.larkbase import larkbase_get_all
import logging
import json


logger = logging.getLogger(__name__)


class ReportService:
    def __init__(self, app_token, table_id):
        self.app_token = app_token
        self.table_id = table_id


    def get_daily_report(self, user_id=None, date_str=None, employee_filter=None, from_depot_filter=None, to_depot_filter=None):
        """L·∫•y b√°o c√°o h√†ng ng√†y - c√≥ th·ªÉ l·ªçc theo nhi·ªÅu ti√™u ch√≠"""
        try:
            if date_str:
                report_date = datetime.strptime(date_str, '%Y-%m-%d')
                start_timestamp = int(report_date.timestamp() * 1000)
                end_timestamp = int((report_date + timedelta(days=1)).timestamp() * 1000)
            else:
                start_timestamp = 0
                end_timestamp = int(datetime.now().timestamp() * 1000) + 86400000
            
            all_records = larkbase_get_all(self.app_token, self.table_id)
            
            filtered_records = []
            for record in all_records:
                fields = record.get('fields', {})
                
                if date_str:
                    handover_date = fields.get('Ng√†y b√†n giao')
                    if handover_date:
                        try:
                            handover_timestamp = int(handover_date)
                            if not (start_timestamp <= handover_timestamp < end_timestamp):
                                continue
                        except (ValueError, TypeError):
                            continue
                
                if employee_filter and fields.get('ID ng∆∞·ªùi b√†n giao', '') != employee_filter:
                    continue
                
                if from_depot_filter and fields.get('ID kho ƒëi', '') != from_depot_filter:
                    continue
                
                if to_depot_filter and fields.get('ID kho ƒë·∫øn', '') != to_depot_filter:
                    continue
                
                filtered_records.append(fields)
            
            logger.info(f"Found {len(filtered_records)} records after filtering")
            
            return self._calculate_daily_statistics(filtered_records)
            
        except Exception as e:
            logger.error(f"Error getting daily report: {e}")
            return self._empty_report_data()


    def get_all_employees(self):
        """L·∫•y danh s√°ch t·∫•t c·∫£ nh√¢n vi√™n t·ª´ records"""
        try:
            all_records = larkbase_get_all(self.app_token, self.table_id)
            employees = {}
            for record in all_records:
                fields = record.get('fields', {})
                emp_id = fields.get('ID ng∆∞·ªùi b√†n giao')
                emp_name = fields.get('Ng∆∞·ªùi b√†n giao')
                if emp_id and emp_name and emp_id not in employees:
                    employees[emp_id] = emp_name
            return [{'id': emp_id, 'name': emp_name} for emp_id, emp_name in employees.items()]
        except Exception as e:
            logger.error(f"Error getting employees: {e}")
            return []


    def get_all_depots(self):
        """L·∫•y danh s√°ch t·∫•t c·∫£ depots t·ª´ records"""
        try:
            all_records = larkbase_get_all(self.app_token, self.table_id)
            depots = {}
            for record in all_records:
                fields = record.get('fields', {})
                from_id = fields.get('ID kho ƒëi')
                from_name = fields.get('Kho ƒëi')
                if from_id and from_name and from_id not in depots:
                    depots[from_id] = from_name
                to_id = fields.get('ID kho ƒë·∫øn')
                to_name = fields.get('Kho ƒë·∫øn')
                if to_id and to_name and to_id not in depots:
                    depots[to_id] = to_name
            return [{'id': depot_id, 'name': depot_name} for depot_id, depot_name in depots.items()]
        except Exception as e:
            logger.error(f"Error getting depots: {e}")
            return []

    def _empty_report_data(self):
        """Tr·∫£ v·ªÅ d·ªØ li·ªáu r·ªóng cho b√°o c√°o"""
        return {
            'total_records': 0,
            'total_quantity': 0,
            'transport_providers': {},
            'routes': {},
            'transport_summary': [],
            'route_summary': []
        }

    def _calculate_daily_statistics(self, records):
        """T√≠nh to√°n th·ªëng k√™ t·ª´ danh s√°ch records"""
        if not records:
            return self._empty_report_data()
        
        route_transport_stats = defaultdict(lambda: {'count': 0, 'bags': 0, 'loads': 0})
        total_loads = 0
        
        for fields in records:
            bags = 0
            try:
                bags_field = fields.get('S·ªë l∆∞·ª£ng bao', 0)
                if isinstance(bags_field, str):
                    bags = int(bags_field) if bags_field.isdigit() else 0
                elif isinstance(bags_field, (int, float)):
                    bags = int(bags_field)
            except (ValueError, TypeError):
                pass
                
            loads = 0
            try:
                loads_field = fields.get('S·ªë l∆∞·ª£ng t·∫£i', fields.get('S·ªë l∆∞·ª£ng bao/t·∫£i giao', 0))
                if isinstance(loads_field, str):
                    loads = int(loads_field) if loads_field.isdigit() else 0
                elif isinstance(loads_field, (int, float)):
                    loads = int(loads_field)
                total_loads += loads
            except (ValueError, TypeError):
                pass
            
            transport_provider = (fields.get('ƒê∆°n v·ªã v·∫≠n chuy·ªÉn') or 'Kh√¥ng r√µ').strip()
            from_depot = (fields.get('Kho ƒëi') or 'Kh√¥ng r√µ').strip()
            to_depot = (fields.get('Kho ƒë·∫øn') or 'Kh√¥ng r√µ').strip()
            route_key = f"{from_depot} ‚Üí {to_depot}"
            route_transport_key = f"{route_key}|{transport_provider}"
            
            stats = route_transport_stats[route_transport_key]
            stats['count'] += 1
            stats['bags'] += bags
            stats['loads'] += loads
        
        # --- T√≠nh to√°n cho B·∫£ng Tuy·∫øn ƒë∆∞·ªùng ---
        route_summary = []
        for route_transport_key, stats in route_transport_stats.items():
            route_part, transport_part = route_transport_key.split('|', 1)
            route_summary.append({
                'route': route_part,
                'transport_provider': transport_part,
                'count': stats['count'],
                'bags': stats['bags'],
                'loads': stats['loads']
            })
        
        route_summary.sort(key=lambda x: x['loads'], reverse=True)
        
        # === B·ªî SUNG: T√çNH TO√ÅN CHO B·∫¢NG ƒê∆†N V·ªä V·∫¨N CHUY·ªÇN ===
        transport_stats = defaultdict(lambda: {'count': 0, 'bags': 0, 'loads': 0, 'routes': set()})
        
        for item in route_summary:
            provider = item['transport_provider']
            stats = transport_stats[provider]
            
            stats['count'] += item['count']
            stats['bags'] += item['bags']
            stats['loads'] += item['loads']
            stats['routes'].add(item['route'])

        transport_summary = []
        for provider, stats in transport_stats.items():
            transport_summary.append({
                'transport_provider': provider,
                'count': stats['count'],
                'bags': stats['bags'],
                'loads': stats['loads'],
                'route_count': len(stats['routes']) # ƒê·∫øm s·ªë tuy·∫øn ƒë∆∞·ªùng duy nh·∫•t
            })
            
        transport_summary.sort(key=lambda x: x['loads'], reverse=True)
        # === K·∫æT TH√öC PH·∫¶N B·ªî SUNG ===
        
        return {
            'total_records': len(records),
            'total_quantity': total_loads,
            'routes': dict(route_transport_stats),
            'route_summary': route_summary,
            'transport_providers': dict(transport_stats),
            'transport_summary': transport_summary # Tr·∫£ v·ªÅ d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c t√≠nh to√°n
        }

    def export_route_records_to_excel(self, from_depot, to_depot, user_id=None, date_str=None, employee_filter=None):
        """Xu·∫•t records c·ªßa m·ªôt tuy·∫øn ƒë∆∞·ªùng c·ª• th·ªÉ ra Excel"""
        try:
            from openpyxl import Workbook
            from openpyxl.styles import Font, PatternFill, Alignment
            import io
            
            if date_str:
                report_date = datetime.strptime(date_str, '%Y-%m-%d')
                start_timestamp = int(report_date.timestamp() * 1000)
                end_timestamp = int((report_date + timedelta(days=1)).timestamp() * 1000)
            else:
                start_timestamp = 0
                end_timestamp = int(datetime.now().timestamp() * 1000) + 86400000
            
            all_records = larkbase_get_all(self.app_token, self.table_id)
            
            route_records = []
            for record in all_records:
                fields = record.get('fields', {})
                if date_str:
                    handover_date = fields.get('Ng√†y b√†n giao')
                    if handover_date and not (start_timestamp <= int(handover_date) < end_timestamp):
                        continue
                if employee_filter and fields.get('ID ng∆∞·ªùi b√†n giao', '') != employee_filter:
                    continue
                if fields.get('Kho ƒëi', '').strip() == from_depot and fields.get('Kho ƒë·∫øn', '').strip() == to_depot:
                    route_records.append(fields)
            
            if not route_records: return None, 0
            
            wb = Workbook()
            ws = wb.active
            ws.title = f"{from_depot} ‚Üí {to_depot}"
            
            header_font = Font(bold=True, color="FFFFFF")
            header_fill = PatternFill(start_color="1976D2", end_color="1976D2", fill_type="solid")
            header_alignment = Alignment(horizontal="center", vertical="center")
            
            headers = ["ID", "S·ªë l∆∞·ª£ng t√∫i", "S·ªë l∆∞·ª£ng bao", "ID ng∆∞·ªùi b√†n giao", "Ng∆∞·ªùi b√†n giao"]
            for col, header in enumerate(headers, 1):
                cell = ws.cell(row=1, column=col, value=header)
                cell.font, cell.fill, cell.alignment = header_font, header_fill, header_alignment
            
            for row, fields in enumerate(route_records, 2):
                ws.cell(row=row, column=1, value=fields.get('ID', ''))
                ws.cell(row=row, column=2, value=fields.get('S·ªë l∆∞·ª£ng bao', 0))
                ws.cell(row=row, column=3, value=fields.get('S·ªë l∆∞·ª£ng t·∫£i') or fields.get('S·ªë l∆∞·ª£ng bao/t·∫£i giao', 0))
                ws.cell(row=row, column=4, value=fields.get('ID ng∆∞·ªùi b√†n giao', ''))
                ws.cell(row=row, column=5, value=fields.get('Ng∆∞·ªùi b√†n giao', ''))
            
            for column in ws.columns:
                max_length = 0
                column_letter = column[0].column_letter
                for cell in column:
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(str(cell.value))
                    except: pass
                adjusted_width = min(max_length + 2, 50)
                ws.column_dimensions[column_letter].width = adjusted_width
            
            excel_buffer = io.BytesIO()
            wb.save(excel_buffer)
            excel_buffer.seek(0)
            return excel_buffer, len(route_records)
            
        except Exception as e:
            logger.error(f"Error creating route Excel export: {e}")
            return None, 0
============================================================

============================================================
FILE: src\services\transport_service.py
============================================================
# src/services/transport_service.py
from src.utils.transport_provider import get_transport_providers_from_file, update_transport_providers_json_file

class TransportProviderService:
    def __init__(self, app_token):
        self.app_token = app_token
    
    def get_transport_providers(self):
        """L·∫•y danh s√°ch nh√† cung c·∫•p"""
        return get_transport_providers_from_file()
    
    def refresh_transport_providers(self, table_id="tblDefault"):
        """L√†m m·ªõi danh s√°ch nh√† cung c·∫•p"""
        return update_transport_providers_json_file(self.app_token, table_id)

============================================================

============================================================
FILE: src\utils\__init__.py
============================================================

============================================================

============================================================
FILE: src\utils\api.py
============================================================
import requests
import json
import logging

def fetch_imex_details(bill_id: int) -> list[dict] | None:
    url = "https://open.nhanh.vn/api/bill/imexrequirements"
    payload = {
        "version": "2.0",
        "appId": "74951",
        "businessId": "8901",
        "accessToken": "twf9P1xFZCUUgwt8zR0XgNeB6V5jsbq2KHb14bxovqK1ppCxyADwOK8FzQlCEeEGABRZINXoUCSzM50kjhwcrUSBWTY5nSvyhfnH2X2cI0pC7pNczSVxc1ratdDmxF85q7hUTUNCrUnpPTG5ZwLNO7bkMlEEJTCdPhgYaC",
        "data": json.dumps({"billId": int(bill_id)})
    }
    res = requests.post(url, data=payload)
    if res.status_code == 200:
        try:
            res_json = res.json()
            if res_json.get("code") == 1:
                data = res_json.get("data")
                if not data:
                    return None
                    
                imexs = data.get("imexs")
                if not imexs:
                    return None
                    
                result = []
                for item in imexs.values():
                    result.append({
                        "requiredQuantity": item.get("requiredQuantity", ""),
                        "damagedQuantity": item.get("damagedQuantity", ""),
                        "approvedQuantity": item.get("approvedQuantity", ""),
                        "realQuantity": item.get("realQuantity", ""),
                        "approvedByUser": item.get("approvedByUser", ""),
                        "requiredAt": item.get("requiredAt", ""),
                        "approvedAt": item.get("approvedAt", ""),
                        "confirmedAt": item.get("confirmedAt", ""),
                        "fromDepotId": item.get("fromDepotId", ""),
                        "fromDepotName": item.get("fromDepotName", ""),
                        "toDepotId": item.get("toDepotId", ""),
                        "toDepotName": item.get("toDepotName", ""),
                        "status": item.get("status", "")
                    })
                return result
        except Exception as e:
            logging.error(f"L·ªói khi parse JSON: {e}")
            return None
    return None


============================================================

============================================================
FILE: src\utils\cache.py
============================================================
# FILE: src/utils/cache.py

import requests
import logging
import json
import os

# --- C·∫§U H√åNH ---
PERSONNEL_API_BASE_URL = "https://minham.1office.vn/api/personnel/profile/gets?access_token=4467770316793457d8e1ad273033229"
PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
EMPLOYEE_JSON_PATH = os.path.join(PROJECT_ROOT, "data", "employees.json")

logging.basicConfig(level=logging.INFO)

def update_employee_json_file():
    """
    G·ªçi API 1Office ƒë·ªÉ l·∫•y danh s√°ch nh√¢n vi√™n ƒëang ho·∫°t ƒë·ªông,
    bao g·ªìm M√£ NV v√† Ph√≤ng ban, sau ƒë√≥ l∆∞u v√†o file employees.json.
    Tr·∫£ v·ªÅ (bool, message).
    """
    logging.info("B·∫Øt ƒë·∫ßu qu√° tr√¨nh c·∫≠p nh·∫≠t danh s√°ch nh√¢n vi√™n t·ª´ 1Office...")
    all_employees_raw = []
    page = 1

    while True:
        url = f"{PERSONNEL_API_BASE_URL}&page={page}"
        try:
            response = requests.get(url, timeout=20)
            response.raise_for_status()
            json_data = response.json()

            if not json_data or not json_data.get("data"):
                logging.info(f"Kh√¥ng c√≥ th√™m d·ªØ li·ªáu ·ªü trang {page}, d·ª´ng v√≤ng l·∫∑p.")
                break

            current_page_data = json_data['data']
            all_employees_raw.extend(current_page_data)
            logging.info(f"ƒê√£ l·∫•y th√†nh c√¥ng trang {page} v·ªõi {len(current_page_data)} b·∫£n ghi.")
            page += 1
            # Th√™m m·ªôt kho·∫£ng ngh·ªâ nh·ªè ƒë·ªÉ tr√°nh g√¢y qu√° t·∫£i cho API
            # time.sleep(0.1) 

        except requests.exceptions.RequestException as e:
            msg = f"L·ªói khi g·ªçi API 1Office ·ªü trang {page}: {e}"
            logging.error(msg)
            return False, msg
        except ValueError:
            msg = f"L·ªói: Kh√¥ng th·ªÉ ph√¢n t√≠ch JSON t·ª´ API ·ªü trang {page}."
            logging.error(msg)
            return False, msg

    # L·ªçc v√† ƒë·ªãnh d·∫°ng l·∫°i d·ªØ li·ªáu, l·∫•y th√™m ph√≤ng ban
    active_employees = []
    for emp in all_employees_raw:
        # Ch·ªâ l·∫•y nh√¢n vi√™n ƒëang ho·∫°t ƒë·ªông v√† c√≥ ƒë·ªß th√¥ng tin c·∫ßn thi·∫øt
        if emp.get("job_date_out") == "" and emp.get("code") and emp.get("name"):
            active_employees.append({
                "id": emp.get("code"),
                "name": emp.get("name"),
                "department": emp.get("department_id")
            })
    
    # S·∫Øp x·∫øp danh s√°ch theo t√™n ƒë·ªÉ d·ªÖ t√¨m ki·∫øm
    active_employees.sort(key=lambda x: x['name'])

    # Ghi ra file JSON
    try:
        with open(EMPLOYEE_JSON_PATH, 'w', encoding='utf-8') as f:
            json.dump(active_employees, f, ensure_ascii=False, indent=4)
        msg = f"C·∫≠p nh·∫≠t th√†nh c√¥ng {len(active_employees)} nh√¢n vi√™n"
        logging.info(msg)
        return True, msg
    except IOError as e:
        msg = f"L·ªói khi ghi file {EMPLOYEE_JSON_PATH}: {e}"
        logging.error(msg)
        return False, msg


def get_employee_list_from_file():
    """
    ƒê·ªçc danh s√°ch nh√¢n vi√™n tr·ª±c ti·∫øp t·ª´ file employees.json.
    N·∫øu file kh√¥ng t·ªìn t·∫°i, th·ª≠ t·∫°o n√≥ l·∫ßn ƒë·∫ßu.
    """
    if not os.path.exists(EMPLOYEE_JSON_PATH):
        logging.warning(f"File {EMPLOYEE_JSON_PATH} kh√¥ng t·ªìn t·∫°i. ƒêang th·ª≠ t·∫°o l·∫ßn ƒë·∫ßu ti√™n...")
        success, message = update_employee_json_file()
        if not success:
            # N·∫øu t·∫°o file th·∫•t b·∫°i, tr·∫£ v·ªÅ danh s√°ch r·ªóng
            return []

    try:
        with open(EMPLOYEE_JSON_PATH, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (IOError, json.JSONDecodeError) as e:
        logging.error(f"L·ªói khi ƒë·ªçc ho·∫∑c ph√¢n t√≠ch file {EMPLOYEE_JSON_PATH}: {e}")
        return [] # Tr·∫£ v·ªÅ r·ªóng n·∫øu file b·ªã l·ªói

============================================================

============================================================
FILE: src\utils\config.py
============================================================
# src/utils/config.py

import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# ‚úÖ S·ª¨A: Centralize t·∫•t c·∫£ tokens ·ªü ƒë√¢y thay v√¨ hardcode ·ªü nhi·ªÅu file
API_TOKENS = {
    # Main app token (d√πng cho Larkbase operations)
    'MAIN_APP_TOKEN': os.getenv('MAIN_APP_TOKEN', 'Rm9PbvKLeaFFZcsSQpElnRjIgXg'),
    
    # API access token (d√πng cho IMEX v√† Depot API)
    'NHANH_ACCESS_TOKEN': os.getenv('NHANH_ACCESS_TOKEN', 'twf9P1xFZCUUgwt8zR0XgNeB6V5jsbq2KHb14bxovqK1ppCxyADwOK8FzQlCEeEGABRZINXoUCSzM50kjhwcrUSBWTY5nSvyhfnH2X2cI0pC7pNczSVxc1ratdDmxF85q7hUTUNCrUnpPTG5ZwLNO7bkMlEEJTCdPhgYaC'),
    
    # App credentials for API calls
    'NHANH_APP_ID': os.getenv('NHANH_APP_ID', '74951'),
    'NHANH_BUSINESS_ID': os.getenv('NHANH_BUSINESS_ID', '8901'),
}

# ‚úÖ S·ª¨A: Table IDs centralization
TABLE_IDS = {
    'MAIN_TABLE_ID': os.getenv('MAIN_TABLE_ID', 'tblJJPUEFhsXHaxY'),
    'TRANSPORT_PROVIDERS_TABLE_ID': os.getenv('TRANSPORT_PROVIDERS_TABLE_ID', 'tblyiELQIi6M1j1r'),
}

# === AUTHENTICATION CONFIG ===
AUTH_CONFIG = {
    'LARK_APP_ID': os.getenv('LARK_APP_ID'),
    'LARK_APP_SECRET': os.getenv('LARK_APP_SECRET'), 
    'LARK_BASE_URL': os.getenv('LARK_BASE_URL', 'https://open.larksuite.com/open-apis'),
    'REDIRECT_URI': os.getenv('REDIRECT_URI', 'http://localhost:8000/auth/callback'),
    # ‚úÖ S·ª¨A: S·ª≠ d·ª•ng centralized token thay v√¨ duplicate
    'AUTH_APP_TOKEN': API_TOKENS['MAIN_APP_TOKEN'], 
    'AUTH_TABLE_ID': os.getenv('AUTH_TABLE_ID', 'tblPermissions'),
    'SECRET_KEY': os.getenv('SECRET_KEY', 'your-super-secret-key-change-this-in-production'),
    'SESSION_EXPIRE_HOURS': int(os.getenv('SESSION_EXPIRE_HOURS', '24'))
}

# ============================================================================
# ===  FORM FIELD CONFIGURATIONS  ===
# ============================================================================

# Danh s√°ch c·ªôt hi·ªÉn th·ªã trong form (theo th·ª© t·ª± mong mu·ªën)
LARKBASE_FIELDS = [
    "ID",
    "ID kho ƒëi",
    "Kho ƒëi", 
    "ID kho ƒë·∫øn",
    "Kho ƒë·∫øn",
    "S·ªë l∆∞·ª£ng bao",
    "S·ªë l∆∞·ª£ng t·∫£i", 
    "ID ng∆∞·ªùi b√†n giao",
    "Ng∆∞·ªùi b√†n giao",
    "Ng√†y b√†n giao",
    "ƒê∆°n v·ªã v·∫≠n chuy·ªÉn",
    "S·ªë l∆∞·ª£ng bao t·∫£i nh·∫≠n",
    "Ng∆∞·ªùi nh·∫≠n", 
    "Ng√†y nh·∫≠n h√†ng",
    "Thi·∫øu th·ª´a bao"
]

# === QUY T·∫ÆC NH·∫¨P LI·ªÜU ===

# C√°c tr∆∞·ªùng ng∆∞·ªùi d√πng c√≥ th·ªÉ nh·∫≠p li·ªáu khi T·∫†O M·ªöI b·∫£n ghi.
CREATABLE_FIELDS = [
    "S·ªë l∆∞·ª£ng bao",
    "S·ªë l∆∞·ª£ng t·∫£i",
    "Ng∆∞·ªùi b√†n giao",
    "ƒê∆°n v·ªã v·∫≠n chuy·ªÉn"
]

# C√°c tr∆∞·ªùng ng∆∞·ªùi d√πng c√≥ th·ªÉ nh·∫≠p li·ªáu khi C·∫¨P NH·∫¨T b·∫£n ghi.
UPDATABLE_FIELDS = [
    "S·ªë l∆∞·ª£ng bao",
    "S·ªë l∆∞·ª£ng t·∫£i",
    "Ng∆∞·ªùi b√†n giao",
    "ƒê∆°n v·ªã v·∫≠n chuy·ªÉn"
]

# C√°c tr∆∞·ªùng khi ƒë√£ c√≥ d·ªØ li·ªáu s·∫Ω:
# 1. T·ª± kh√≥a ch√≠nh n√≥, kh√¥ng cho s·ª≠a n·ªØa.
# 2. Kh√≥a kh√¥ng cho x√≥a to√†n b·ªô b·∫£n ghi.
LOCK_FIELDS = [
    "S·ªë l∆∞·ª£ng bao t·∫£i nh·∫≠n",
    "Ng∆∞·ªùi nh·∫≠n",
    "Ng√†y nh·∫≠n h√†ng"
]

# === D·ªÆ LI·ªÜU N·ªÄN ===

# C√°c c·ªôt l·∫•y t·ª´ API (kh√¥ng hi·ªÉn th·ªã trong form nh∆∞ng v·∫´n l∆∞u v√†o database)
API_FIELDS = [
    "ID kho ƒëi", "Kho ƒëi", "ID kho ƒë·∫øn", "Kho ƒë·∫øn", "S·ªë l∆∞·ª£ng", 
    "S·ªë l∆∞·ª£ng s·∫£n ph·∫©m y√™u c·∫ßu", "S·ªë l∆∞·ª£ng s·∫£n ph·∫©m h·ªèng", 
    "S·ªë l∆∞·ª£ng s·∫£n ph·∫©m y√™u c·∫ßu ƒë∆∞·ª£c duy·ªát", "S·ªë l∆∞·ª£ng s·∫£n ph·∫©m y√™u c·∫ßu ƒë∆∞·ª£c x√°c nh·∫≠n", 
    "Ng√†y t·∫°o", "Ng√†y duy·ªát", "Ng√†y x√°c nh·∫≠n", "Ng∆∞·ªùi x√°c nh·∫≠n"
]

# To√†n b·ªô fields ƒë·ªÉ l∆∞u v√†o Larkbase (hi·ªán kh√¥ng d√πng trong app.py)
ALL_LARKBASE_FIELDS = LARKBASE_FIELDS + API_FIELDS

# ============================================================================
# ===  VALIDATION & HELPER FUNCTIONS  ===
# ============================================================================

# Validate required auth config
REQUIRED_AUTH_VARS = ['LARK_APP_ID', 'LARK_APP_SECRET']
for var in REQUIRED_AUTH_VARS:
    if not AUTH_CONFIG[var]:
        raise ValueError(f"Missing required environment variable: {var}")

# ‚úÖ S·ª¨A: Helper functions ƒë·ªÉ get tokens safely
def get_main_app_token():
    """L·∫•y main app token cho Larkbase operations"""
    return API_TOKENS['MAIN_APP_TOKEN']

def get_nhanh_access_token():
    """L·∫•y access token cho Nhanh API calls"""
    return API_TOKENS['NHANH_ACCESS_TOKEN']

def get_nhanh_credentials():
    """L·∫•y ƒë·∫ßy ƒë·ªß credentials cho Nhanh API"""
    return {
        'app_id': API_TOKENS['NHANH_APP_ID'],
        'business_id': API_TOKENS['NHANH_BUSINESS_ID'],
        'access_token': API_TOKENS['NHANH_ACCESS_TOKEN']
    }

def get_table_id(table_name='main'):
    """L·∫•y table ID theo t√™n"""
    table_map = {
        'main': TABLE_IDS['MAIN_TABLE_ID'],
        'transport': TABLE_IDS['TRANSPORT_PROVIDERS_TABLE_ID']
    }
    return table_map.get(table_name, TABLE_IDS['MAIN_TABLE_ID'])

============================================================

============================================================
FILE: src\utils\depot.py
============================================================
# FILE: src/utils/depot.py

import requests
import logging
import json
import os

# C·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n
PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
DEPOT_JSON_PATH = os.path.join(PROJECT_ROOT, "data", "depots.json")


# Th√¥ng tin API
DEPOT_API_URL = "https://pos.open.nhanh.vn/api/store/depot"
DEPOT_API_PARAMS = {
    'version': "2.0",
    'appId': "74951", 
    'businessId': "8901",
    'accessToken': "twf9P1xFZCUUgwt8zR0XgNeB6V5jsbq2KHb14bxovqK1ppCxyADwOK8FzQlCEeEGABRZINXoUCSzM50kjhwcrUSBWTY5nSvyhfnH2X2cI0pC7pNczSVxc1ratdDmxF85q7hUTUNCrUnpPTG5ZwLNO7bkMlEEJTCdPhgYaC"
}

def get_depots_from_api():
    """
    L·∫•y danh s√°ch depot t·ª´ API Nhanh.vn
    """
    try:
        response = requests.post(DEPOT_API_URL, data=DEPOT_API_PARAMS, timeout=20)
        response.raise_for_status()
        
        json_data = response.json()
        if json_data.get("code") != 1:
            logging.error(f"API depot tr·∫£ v·ªÅ code: {json_data.get('code')}")
            return []
        
        data = json_data.get("data", {})
        if not data:
            logging.warning("Kh√¥ng c√≥ d·ªØ li·ªáu depot t·ª´ API")
            return []
        
        depots = []
        for depot_info in data.values():
            depot_id = depot_info.get("id")
            depot_name = depot_info.get("name", "")
            depot_code = depot_info.get("code", "")
            
            if depot_id and depot_name:
                depots.append({
                    "id": str(depot_id),
                    "name": depot_name,
                    "code": depot_code,
                    "address": depot_info.get("address", "")
                })
        
        # S·∫Øp x·∫øp theo t√™n
        depots.sort(key=lambda x: x['name'])
        
        logging.info(f"L·∫•y th√†nh c√¥ng {len(depots)} depot t·ª´ API")
        return depots
        
    except Exception as e:
        logging.error(f"L·ªói khi l·∫•y danh s√°ch depot: {e}")
        return []

def update_depot_json_file():
    """
    C·∫≠p nh·∫≠t file JSON ch·ª©a danh s√°ch depot
    """
    try:
        depots = get_depots_from_api()
        
        if not depots:
            return False, "Kh√¥ng l·∫•y ƒë∆∞·ª£c danh s√°ch depot t·ª´ API"
        
        # Ghi v√†o file JSON
        with open(DEPOT_JSON_PATH, 'w', encoding='utf-8') as f:
            json.dump(depots, f, ensure_ascii=False, indent=4)
        
        msg = f"C·∫≠p nh·∫≠t th√†nh c√¥ng {len(depots)} depot"
        logging.info(msg)
        return True, msg
        
    except Exception as e:
        msg = f"L·ªói khi c·∫≠p nh·∫≠t file depot: {e}"
        logging.error(msg)
        return False, msg

def get_depots_from_file():
    """
    ƒê·ªçc danh s√°ch depot t·ª´ file JSON
    """
    if not os.path.exists(DEPOT_JSON_PATH):
        logging.warning(f"File {DEPOT_JSON_PATH} kh√¥ng t·ªìn t·∫°i. ƒêang th·ª≠ t·∫°o l·∫ßn ƒë·∫ßu ti√™n...")
        success, message = update_depot_json_file()
        if not success:
            return []
    
    try:
        with open(DEPOT_JSON_PATH, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (IOError, json.JSONDecodeError) as e:
        logging.error(f"L·ªói khi ƒë·ªçc file {DEPOT_JSON_PATH}: {e}")
        return []

============================================================

============================================================
FILE: src\utils\larkbase.py
============================================================
# FILE: src/utils/larkbase.py

import requests
import logging

# Thi·∫øt l·∫≠p logging c∆° b·∫£n
logging.basicConfig(level=logging.INFO)

API_ENDPOINT = 'https://open.larksuite.com/open-apis'
API_HOST = "https://open.larksuite.com/open-apis/bitable/v1/apps"

def larkbase_get_token(app_id=None, app_secret=None, endpoint=API_ENDPOINT):
    APP_ID = app_id or 'cli_a7fab27260385010'
    APP_SECRET = app_secret or 'Zg4MVcFfiOu0g09voTcpfd4WGDpA0Ly5'
    url = f"{endpoint}/auth/v3/tenant_access_token/internal"
    try:
        resp = requests.post(url, json={'app_id': APP_ID, 'app_secret': APP_SECRET})
        if resp.status_code == 200:
            data = resp.json()
            if data.get('code') == 0:
                return data['tenant_access_token']
    except Exception as e:
        logging.error(f"L·ªói khi l·∫•y token: {e}")
    return None

def get_headers(token):
    return {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }

def larkbase_get_all(app_token, table_id):
    token = larkbase_get_token()
    if not token:
        logging.error("Kh√¥ng x√°c th·ª±c ƒë∆∞·ª£c v·ªõi Larkbase.")
        return []

    all_records = []
    page_token = ""
    while True:
        try:
            url = f"{API_HOST}/{app_token}/tables/{table_id}/records?page_size=500"
            if page_token:
                url += f"&page_token={page_token}"
            
            resp = requests.get(url, headers=get_headers(token))
            if resp.status_code != 200:
                logging.error(f"API tr·∫£ v·ªÅ status code: {resp.status_code}")
                break
            
            res_data = resp.json()
            if res_data.get("code") != 0:
                logging.error(f"API tr·∫£ v·ªÅ code: {res_data.get('code')}, msg: {res_data.get('msg', '')}")
                break

            data = res_data.get("data")
            if not data:  # ‚úÖ Ki·ªÉm tra data tr∆∞·ªõc
                break
                
            items = data.get("items", [])
            if not items:  # ‚úÖ Ki·ªÉm tra items tr∆∞·ªõc
                break
                
            all_records.extend(items)
            
            page_token = data.get("page_token", "")
            if not page_token:
                break
                
        except Exception as e:
            logging.error(f"L·ªói khi l·∫•y d·ªØ li·ªáu: {e}")
            break
    return all_records

def larkbase_find_by_field(app_token, table_id, field, value):
    all_records = larkbase_get_all(app_token, table_id)
    if not all_records:
        # Tr·∫£ v·ªÅ tuple (tr·∫°ng th√°i, d·ªØ li·ªáu)
        return False, None
    for record in all_records:
        fields = record.get('fields', {})
        if str(fields.get(field, '')).strip() == str(value).strip():
            # T√¨m th·∫•y, tr·∫£ v·ªÅ (True, record)
            return True, record
    # Kh√¥ng t√¨m th·∫•y sau khi duy·ªát h·∫øt, tr·∫£ v·ªÅ (False, None)
    return False, None

def larkbase_write_data(app_token, table_id, data):
    """Ghi d·ªØ li·ªáu m·ªõi v√† tr·∫£ v·ªÅ (bool, message)"""
    token = larkbase_get_token()
    if not token:
        return False, "Kh√¥ng th·ªÉ x√°c th·ª±c v·ªõi Larkbase."
    try:
        url = f"{API_HOST}/{app_token}/tables/{table_id}/records"
        resp = requests.post(url, headers=get_headers(token), json={"fields": data})
        res_json = resp.json()
        if resp.status_code == 200 and res_json.get('code') == 0:
            return True, "Th√™m m·ªõi th√†nh c√¥ng"
        else:
            error_msg = res_json.get('msg', resp.text)
            logging.error(f"L·ªói API khi ghi: {error_msg}")
            return False, error_msg
    except Exception as e:
        logging.error(f"L·ªói ngo·∫°i l·ªá khi ghi d·ªØ li·ªáu: {e}")
        return False, str(e)

def larkbase_update_data(app_token, table_id, record_id, data):
    """C·∫≠p nh·∫≠t d·ªØ li·ªáu v√† tr·∫£ v·ªÅ (bool, message)"""
    token = larkbase_get_token()
    if not token:
        return False, "Kh√¥ng th·ªÉ x√°c th·ª±c v·ªõi Larkbase."
    try:
        url = f"{API_HOST}/{app_token}/tables/{table_id}/records/{record_id}"
        resp = requests.put(url, headers=get_headers(token), json={"fields": data})
        res_json = resp.json()
        if resp.status_code == 200 and res_json.get('code') == 0:
            return True, "C·∫≠p nh·∫≠t th√†nh c√¥ng"
        else:
            error_msg = res_json.get('msg', resp.text)
            logging.error(f"L·ªói API khi c·∫≠p nh·∫≠t: {error_msg}")
            return False, error_msg
    except Exception as e:
        logging.error(f"L·ªói ngo·∫°i l·ªá khi c·∫≠p nh·∫≠t: {e}")
        return False, str(e)

def larkbase_delete_record(app_token, table_id, record_id):
    """X√≥a m·ªôt b·∫£n ghi v√† tr·∫£ v·ªÅ (bool, message)"""
    token = larkbase_get_token()
    if not token:
        return False, "Kh√¥ng th·ªÉ x√°c th·ª±c v·ªõi Larkbase."
    try:
        url = f"{API_HOST}/{app_token}/tables/{table_id}/records/{record_id}"
        resp = requests.delete(url, headers=get_headers(token))
        res_json = resp.json()
        if resp.status_code == 200 and res_json.get('code') == 0:
            return True, "X√≥a th√†nh c√¥ng"
        else:
            error_msg = res_json.get('msg', resp.text)
            logging.error(f"L·ªói API khi x√≥a: {error_msg}")
            return False, error_msg
    except Exception as e:
        logging.error(f"L·ªói ngo·∫°i l·ªá khi x√≥a: {e}")
        return False, str(e)

# src/utils/larkbase.py
def larkbase_batch_write_data(app_token, table_id, records_data):
    """Ghi nhi·ªÅu records c√πng l√∫c"""
    token = larkbase_get_token()
    if not token:
        return False, "Kh√¥ng th·ªÉ x√°c th·ª±c v·ªõi Larkbase."
    
    try:
        url = f"{API_HOST}/{app_token}/tables/{table_id}/records/batch_create"
        
        # Chuy·ªÉn ƒë·ªïi format cho batch API
        records = [{"fields": record} for record in records_data]
        
        resp = requests.post(
            url, 
            headers=get_headers(token), 
            json={"records": records}
        )
        
        res_json = resp.json()
        if resp.status_code == 200 and res_json.get('code') == 0:
            created_count = len(res_json.get('data', {}).get('records', []))
            return True, f"Th√™m th√†nh c√¥ng {created_count} b·∫£n ghi"
        else:
            error_msg = res_json.get('msg', resp.text)
            logging.error(f"L·ªói API batch create: {error_msg}")
            return False, error_msg
            
    except Exception as e:
        logging.error(f"L·ªói batch create: {e}")
        return False, str(e)

============================================================

============================================================
FILE: src\utils\transport_provider.py
============================================================
# FILE: src/utils/transport_provider.py

from src.utils.larkbase import larkbase_get_all
import logging
import json
import os

# C·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n
PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
TRANSPORT_PROVIDERS_JSON_PATH = os.path.join(PROJECT_ROOT, "data", "transport_providers.json")


def get_transport_providers_from_larkbase(app_token, table_id="tblDefault"):
    """
    L·∫•y danh s√°ch nh√† cung c·∫•p t·ª´ Larkbase
    """
    try:
        all_records = larkbase_get_all(app_token, table_id)
        if not all_records:
            logging.error("Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ b·∫£ng nh√† cung c·∫•p")
            return []
        
        providers = []
        for record in all_records:
            fields = record.get('fields', {})
            provider_name = fields.get('T√™n nh√† cung c·∫•p', '').strip()
            
            if provider_name:  # Ch·ªâ l·∫•y nh·ªØng record c√≥ t√™n
                providers.append({
                    "id": provider_name,  # S·ª≠ d·ª•ng t√™n l√†m ID
                    "name": provider_name
                })
        
        # Lo·∫°i b·ªè tr√πng l·∫∑p v√† s·∫Øp x·∫øp
        unique_providers = []
        seen_names = set()
        
        for provider in providers:
            if provider['name'] not in seen_names:
                unique_providers.append(provider)
                seen_names.add(provider['name'])
        
        # S·∫Øp x·∫øp theo t√™n
        unique_providers.sort(key=lambda x: x['name'])
        
        return unique_providers
        
    except Exception as e:
        logging.error(f"L·ªói khi l·∫•y danh s√°ch nh√† cung c·∫•p: {e}")
        return []

def update_transport_providers_json_file(app_token, table_id="tblDefault"):
    """
    C·∫≠p nh·∫≠t file JSON ch·ª©a danh s√°ch nh√† cung c·∫•p
    """
    try:
        providers = get_transport_providers_from_larkbase(app_token, table_id)
        
        if not providers:
            return False, "Kh√¥ng l·∫•y ƒë∆∞·ª£c danh s√°ch nh√† cung c·∫•p t·ª´ Larkbase"
        
        # Ghi v√†o file JSON
        with open(TRANSPORT_PROVIDERS_JSON_PATH, 'w', encoding='utf-8') as f:
            json.dump(providers, f, ensure_ascii=False, indent=4)
        
        msg = f"C·∫≠p nh·∫≠t th√†nh c√¥ng {len(providers)} nh√† cung c·∫•p"
        logging.info(msg)
        return True, msg
        
    except Exception as e:
        msg = f"L·ªói khi c·∫≠p nh·∫≠t file nh√† cung c·∫•p: {e}"
        logging.error(msg)
        return False, msg

def get_transport_providers_from_file():
    """
    ƒê·ªçc danh s√°ch nh√† cung c·∫•p t·ª´ file JSON
    """
    if not os.path.exists(TRANSPORT_PROVIDERS_JSON_PATH):
        logging.warning(f"File {TRANSPORT_PROVIDERS_JSON_PATH} kh√¥ng t·ªìn t·∫°i.")
        return []
    
    try:
        with open(TRANSPORT_PROVIDERS_JSON_PATH, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (IOError, json.JSONDecodeError) as e:
        logging.error(f"L·ªói khi ƒë·ªçc file {TRANSPORT_PROVIDERS_JSON_PATH}: {e}")
        return []

============================================================

============================================================
FILE: static\css\components.css
============================================================
/* static/css/components.css - Component Styles */

/* Status & notification styles */
.success,
.error,
.info {
    padding: 12px 16px;
    border-radius: 4px;
    margin: 16px 0;
}

.success {
    background-color: #e8f5e8;
    color: #2e7d32;
    border-left: 4px solid #4caf50;
}

.error {
    background-color: #ffebee;
    color: #c62828;
    border-left: 4px solid #f44336;
}

.info {
    background-color: #e3f2fd;
    color: #1565c0;
    border-left: 4px solid #2196f3;
}

.elevation-1 {
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);
}

/* Spinner */
.spinner {
    display: inline-block;
    width: 18px;
    height: 18px;
    border: 3px solid rgba(255, 255, 255, 0.3);
    border-radius: 50%;
    border-top-color: #fff;
    animation: spin 1s ease-in-out infinite;
    vertical-align: middle;
}

/* Button loading states */
.btn,
button {
    position: relative;
    display: inline-flex;
    align-items: center;
    justify-content: center;
}

.btn.htmx-request,
button.htmx-request {
    cursor: not-allowed;
    opacity: 0.8;
}

.htmx-request .btn-text {
    display: none;
}

.htmx-request .htmx-indicator {
    display: inline-block !important;
}

/* Bulk form styles */
.bulk-form-container {
    width: 100%;
}

.mode-selection {
    display: flex;
    gap: 8px;
    margin-bottom: 24px;
}

.mode-btn {
    flex: 1;
    opacity: 0.7;
}

.mode-btn.active {
    opacity: 1;
    box-shadow: 0 2px 8px rgba(25, 118, 210, 0.3);
}

.common-fields-section {
    background: #f8f9fa;
    padding: 20px;
    border-radius: 8px;
    margin-bottom: 24px;
}

.common-fields-section h4 {
    margin-bottom: 16px;
    color: #1976d2;
}

.bill-ids-section {
    margin-bottom: 24px;
}

.bill-ids-section h4 {
    margin-bottom: 16px;
    color: #1976d2;
}

.table-actions {
    display: flex;
    gap: 8px;
    margin-bottom: 16px;
}

.bill-table {
    width: 100%;
    border-collapse: collapse;
    border: 1px solid #ddd;
    border-radius: 4px;
    overflow: hidden;
}

.bill-table th,
.bill-table td {
    padding: 12px;
    text-align: left;
    border-bottom: 1px solid #ddd;
}

.bill-table th {
    background-color: #f5f5f5;
    font-weight: 500;
}

.bill-table input {
    width: 100%;
    border: 1px solid #ccc;
    border-radius: 4px;
    padding: 8px;
}

/* ƒê·∫£m b·∫£o t·∫•t c·∫£ status cell ƒë·ªÅu cƒÉn gi·ªØa */
.status-cell {
    text-align: center;
    min-width: 120px;
}
.bill-table th:nth-child(3),
.bill-table td:nth-child(3) {
    width: 22%;
    text-align: center; /* S·ª¨A: ƒë·∫£m b·∫£o header v√† cell c·ªôt Tr·∫°ng th√°i cƒÉn gi·ªØa */
}

.status-pending { color: #666; }
.status-checking { color: #1976d2; }
.status-valid { color: #4caf50; font-weight: 500; }
.status-invalid { color: #f44336; font-weight: 500; }
.status-error { color: #ff9800; }
/* Modal styles - Updated to match template structure */
.modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5); /* Background overlay t·ªëi */
    z-index: 1000;
    justify-content: center;
    align-items: center;
}

.modal.show {
    display: flex !important;
}

.modal-content {
    background: white;
    border-radius: 8px;
    max-width: 600px;
    width: 90%;
    max-height: 80vh;
    overflow-y: auto;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    display: flex;
    flex-direction: column;
}

.modal-header {
    padding: 16px 20px;
    border-bottom: 1px solid #e0e0e0;
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: #f8f9fa;
    border-radius: 8px 8px 0 0;
}

.modal-header h4 {
    margin: 0;
    font-size: 18px;
    color: #1976d2;
}

.close {
    background: none;
    border: none;
    font-size: 24px;
    cursor: pointer;
    color: #666;
    padding: 0;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 4px;
    transition: background-color 0.2s;
}

.close:hover {
    background-color: #f0f0f0;
    color: #333;
}

.modal-body {
    padding: 20px;
    flex: 1;
    overflow-y: auto;
}

.modal-footer {
    padding: 16px 20px;
    border-top: 1px solid #e0e0e0;
    display: flex;
    gap: 8px;
    justify-content: flex-end;
    background: #f8f9fa;
    border-radius: 0 0 8px 8px;
}

/* Modal table styles */
.modal-table-container {
    margin: 16px 0;
    max-height: 300px;
    overflow-y: auto;
}

.modal-bill-table {
    width: 100%;
    border-collapse: collapse;
    border: 1px solid #ddd;
    border-radius: 4px;
    overflow: hidden;
}

.modal-bill-table th,
.modal-bill-table td {
    padding: 8px 12px;
    border-bottom: 1px solid #ddd;
    text-align: left;
}

.modal-bill-table th {
    background-color: #f5f5f5;
    font-weight: 500;
}

.modal-bill-table input {
    width: 100%;
    border: 1px solid #ccc;
    border-radius: 4px;
    padding: 6px 8px;
    font-size: 14px;
}

.modal-add-row-btn {
    margin-top: 12px;
}

/* Additional styles for better modal appearance */
.total-summary {
    background: #e3f2fd;
    padding: 12px 16px;
    border-radius: 4px;
    margin-top: 16px;
    text-align: center;
    font-size: 14px;
    color: #1976d2;
}

.common-fields-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 16px;
    margin-top: 16px;
}

/* Responsive modal */
@media (max-width: 768px) {
    .modal-content {
        width: 95%;
        max-height: 90vh;
    }
    
    .modal-header,
    .modal-body,
    .modal-footer {
        padding: 12px 16px;
    }
    
    .common-fields-grid {
        grid-template-columns: 1fr;
        gap: 12px;
    }
}

/* Ensure modal appears above other elements */
.modal {
    z-index: 9999;
}

/* Grouped row styling */
.grouped-row {
    background-color: #f0f8ff;
}

.grouped-quantity-cell {
    background-color: #e3f2fd !important;
    text-align: center;
    vertical-align: middle;
}

.grouped-quantity-cell .text-muted {
    display: block;
    font-size: 11px;
    color: #666;
    margin-top: 4px;
}

/* Button secondary style for modal */
.btn-secondary {
    background-color: #6c757d;
    color: white;
}

.btn-secondary:hover {
    background-color: #5a6268;
}

/* === S·ª¨A: √Åp d·ª•ng cho t·∫•t c·∫£ m√†n h√¨nh === */
.bill-table {
    table-layout: fixed; /* B·∫Øt bu·ªôc ƒë·ªÉ width ho·∫°t ƒë·ªông */
    width: 100%;
}

/* === Chi·ªÅu r·ªông c·ªôt cho t·∫•t c·∫£ m√†n h√¨nh === */
.bill-table th:nth-child(1), /* C·ªôt ID */
.bill-table td:nth-child(1) {
    width: 40%;
}


.bill-table th:nth-child(2), /* C·ªôt SL bao */  
.bill-table td:nth-child(2) {
    width: 15%;
    text-align: center;
}

.bill-table th:nth-child(3), /* C·ªôt SL t·∫£i */  
.bill-table td:nth-child(3) {
    width: 15%;
    text-align: center;
}

/* S·ª¨A: ƒê·∫£m b·∫£o c·ªôt Tr·∫°ng th√°i tr√™n desktop cƒÉn gi·ªØa */
.bill-table th:nth-child(4),
.bill-table td:nth-child(4) {
    width: 22%;
    text-align: center;
}

.bill-table th:nth-child(5), /* C·ªôt X√≥a */
.bill-table td:nth-child(5) {
    width: 10%;
    text-align: center;
}



/* S·ª¨A: Refresh notification styles - ƒë·∫£m b·∫£o hi·ªÉn th·ªã ƒë√∫ng */
.refresh-notification {
    position: fixed !important;
    top: 80px !important;
    right: 20px !important;
    z-index: 99999 !important; /* TƒÉng z-index cao h∆°n */
    max-width: 300px !important;
    margin: 0 !important;
    padding: 12px 16px !important;
    border-radius: 6px !important;
    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.25) !important; /* TƒÉng shadow */
    font-weight: 500 !important;
    transform: translateX(350px); /* B·∫Øt ƒë·∫ßu ·ªü ngo√†i m√†n h√¨nh */
    transition: all 0.4s cubic-bezier(0.25, 0.8, 0.25, 1) !important;
    opacity: 0; /* B·∫Øt ƒë·∫ßu v·ªõi opacity 0 */
}

.refresh-notification.show {
    transform: translateX(0) !important;
    opacity: 1 !important; /* Hi·ªÉn th·ªã khi c√≥ class show */
}

.refresh-notification.hide {
    transform: translateX(350px) !important;
    opacity: 0 !important;
}

/* M√†u s·∫Øc cho notification */
.refresh-notification.success {
    background: linear-gradient(135deg, #4caf50, #45a049) !important;
    color: white !important;
    border: 1px solid #4caf50 !important;
}

.refresh-notification.error {
    background: linear-gradient(135deg, #f44336, #d32f2f) !important;
    color: white !important;
    border: 1px solid #f44336 !important;
}

/* Mobile responsive */
@media (max-width: 768px) {
    .refresh-notification {
        top: 70px !important;
        right: 10px !important;
        left: 10px !important;
        max-width: none !important;
        text-align: center !important;
    }
}



/* === Mobile responsive === */
@media (max-width: 768px) {
    .bill-table {
        table-layout: fixed; 
        width: 100%;
    }

    /* === Ph√¢n chia l·∫°i chi·ªÅu r·ªông c√°c c·ªôt === */
    .bill-table th:nth-child(1),
    .bill-table td:nth-child(1) { width: 18%; }

    .bill-table th:nth-child(2), 
    .bill-table td:nth-child(2) { 
        width: 12%;
        text-align: center;
    }

    .bill-table th:nth-child(3), 
    .bill-table td:nth-child(3) { 
        width: 12%;
        text-align: center;
    }
    
    /* S·ª¨A: ƒê·∫£m b·∫£o c·ªôt Tr·∫°ng th√°i tr√™n mobile cƒÉn gi·ªØa */
    .bill-table th:nth-child(4),
    .bill-table td:nth-child(4) { width: 18%; text-align: center; }
    
    .bill-table th:nth-child(5),
    .bill-table td:nth-child(5) { width: 9%; text-align: center; }

    /* Gi·∫£m padding v√† font-size chung cho b·∫£ng tr√™n mobile */
    .bill-table th,
    .bill-table td {
        padding: 8px 5px;
        font-size: 13px;
        vertical-align: middle;
        word-wrap: break-word;
    }

    /* T·ªëi ∆∞u input v√† button trong b·∫£ng */
    .bill-table .form-control {
        font-size: 13px;
        padding: 6px 4px;
    }

    .bill-table .btn-small {
        padding: 5px;
        font-size: 12px;
    }
}

============================================================

============================================================
FILE: static\css\dropdowns.css
============================================================
/* static/css/dropdowns.css - Dropdown Styles */

/* Dropdown components */
.employee-dropdown-component,
.transport-dropdown-component,
.depot-dropdown-component {
    width: 100%;
}

.employee-search,
.transport-search,
.depot-search {
    position: relative;
    width: 100%;
}

/* Dropdown inputs */
.employee-search-input,
.transport-search-input,
.depot-search-input {
    width: 100% !important;
    box-sizing: border-box;
    padding: 12px 16px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 16px;
    transition: border-color 0.2s;
}

.employee-search-input:focus,
.transport-search-input:focus,
.depot-search-input:focus {
    outline: none;
    border-color: #1976d2;
    box-shadow: 0 0 0 2px rgba(25, 118, 210, 0.2);
}

/* Dropdown containers */
.employee-dropdown,
.transport-dropdown,
.depot-dropdown {
    display: none;
    position: absolute;
    background-color: white;
    border: 1px solid #ddd;
    border-radius: 4px;
    max-height: 200px;
    overflow-y: auto;
    z-index: 1000;
    width: 100%;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    margin-top: 2px;
}

/* Transport dropdown show state */
.transport-dropdown.show {
    display: block !important;
}

/* Dropdown options */
.employee-option,
.transport-option,
.depot-option {
    padding: 8px 12px;
    cursor: pointer;
    border-bottom: 1px solid #f0f0f0;
    font-size: 14px;
    transition: background-color 0.2s ease;
}

.employee-option:hover,
.transport-option:hover,
.depot-option:hover {
    background-color: #f5f5f5;
}

.employee-option:last-child,
.transport-option:last-child,
.depot-option:last-child {
    border-bottom: none;
}

.employee-option.selected,
.transport-option.selected,
.depot-option.selected {
    background-color: #e3f2fd;
    font-weight: 500;
}

.employee-option small,
.depot-option small {
    font-size: 11px;
    color: #666;
    display: block;
    margin-top: 2px;
}

/* Dropdown info sections */
.employee-dropdown-info,
.transport-dropdown-info,
.depot-dropdown-info {
    padding: 8px 16px;
    background-color: #f8f9fa;
    border-bottom: 1px solid #e9ecef;
    text-align: center;
    font-style: italic;
    color: #6c757d;
    font-size: 12px;
}

/* Scrollbar styles */
.employee-dropdown::-webkit-scrollbar,
.transport-dropdown::-webkit-scrollbar,
.depot-dropdown::-webkit-scrollbar {
    width: 6px;
}

.employee-dropdown::-webkit-scrollbar-track,
.transport-dropdown::-webkit-scrollbar-track,
.depot-dropdown::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 3px;
}

.employee-dropdown::-webkit-scrollbar-thumb,
.transport-dropdown::-webkit-scrollbar-thumb,
.depot-dropdown::-webkit-scrollbar-thumb {
    background: #c1c1c1;
    border-radius: 3px;
}

.employee-dropdown::-webkit-scrollbar-thumb:hover,
.transport-dropdown::-webkit-scrollbar-thumb:hover,
.depot-dropdown::-webkit-scrollbar-thumb:hover {
    background: #a8a8a8;
}

============================================================

============================================================
FILE: static\css\forms.css
============================================================
/* static/css/forms.css - Form Styles */

/* Form basics */
.search-form {
    display: flex;
    gap: 8px;
    margin-bottom: 24px;
}

.form-group {
    margin-bottom: 16px;
}

.form-label {
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
    color: #555;
    font-size: 14px;
}

/* ƒê·ªìng nh·∫•t height input v√† button trong search-form */
.form-control,
.search-input,
.search-form .btn {
    height: 44px;
    padding-top: 12px;
    padding-bottom: 12px;
    line-height: 20px;
    box-sizing: border-box;
    font-size: 16px;
}

.form-control,
.search-input {
    width: 100% !important;
    padding-left: 16px;
    padding-right: 16px;
    border: 1px solid #ddd;
    border-radius: 4px;
    transition: border-color 0.2s;
}

.form-control:focus,
.search-input:focus {
    outline: none;
    border-color: #1976d2;
    box-shadow: 0 0 0 2px rgba(25, 118, 210, 0.2);
}

/* Buttons v·ªõi responsive text handling */
.btn {
    width: 100%; /* B·ªè !important ƒë·ªÉ class kh√°c ghi ƒë√® */
    box-sizing: border-box;
    padding: 12px 16px;
    border: none;
    border-radius: 4px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.2s;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    min-width: unset;
    white-space: normal;
    height: auto; 
    text-align: center;
    line-height: 1.2;
}

/* CƒÉn ch·ªânh cho m·ªçi n√∫t trong search-form */
.search-form .btn {
    height: 44px;
    padding-top: 12px;
    padding-bottom: 12px;
    font-size: 16px;
    display: inline-flex;
    align-items: center;
    justify-content: center;
}

@media (max-width: 768px) {
    .btn {
        font-size: 12px;
        padding: 10px 12px;
        letter-spacing: 0.3px;
    }
    .search-form .btn,
    .form-control,
    .search-input {
        height: 38px;
        font-size: 14px;
        padding-top: 10px;
        padding-bottom: 10px;
    }
}

@media (max-width: 480px) {
    .btn {
        font-size: 11px;
        padding: 8px 10px;
        letter-spacing: 0.2px;
    }
    .search-form .btn,
    .form-control,
    .search-input {
        height: 32px;
        font-size: 13px;
        padding-top: 7px;
        padding-bottom: 7px;
    }
}

.btn-primary {
    background-color: #1976d2;
    color: white;
}

.btn-primary:hover {
    background-color: #1565c0;
}

.btn-success {
    background-color: #388e3c;
    color: white;
}

.btn-success:hover {
    background-color: #2e7d32;
}

.btn-danger {
    background-color: #d32f2f;
    color: white;
}

.btn-danger:hover {
    background-color: #c62828;
}

/* Special button sizes */
.btn-small {
    width: auto !important;
    padding: 6px 12px !important;
    font-size: 12px;
    flex: 0 0 auto;
    white-space: nowrap;
}

/* Form actions */
.form-actions {
    width: 100%;
}

.form-actions .btn {
    margin-bottom: 8px;
}

/* Button group v·ªõi responsive gap */
.btn-group {
    display: flex;
    gap: 8px;
    width: 100%;
}

.btn-group .btn {
    flex: 1;
    min-width: 0;
}

@media (max-width: 480px) {
    .btn-group {
        gap: 4px;
    }
}

/* Input with refresh button */
.input-with-refresh {
    display: flex;
    gap: 8px;
    /* ‚úÖ S·ª¨A: CƒÉn gi·ªØa theo chi·ªÅu d·ªçc ƒë·ªÉ n√∫t v√† input th·∫≥ng h√†ng */
    align-items: center; 
}

.input-with-refresh > div {
    flex: 1;
}

/* ======================================================================== */
/* === ‚úÖ FIX CU·ªêI C√ôNG: ƒê·ªãnh nghƒ©a class m·ªõi cho n√∫t refresh icon === */
/* ======================================================================== */
.btn-refresh-icon {
    /* √âp n√∫t th√†nh h√¨nh vu√¥ng, k√≠ch th∆∞·ªõc b·∫±ng chi·ªÅu cao √¥ input */
    width: 44px !important;
    height: 44px !important;
    min-width: 44px !important; 
    
    padding: 0 !important; /* B·ªè padding ƒë·ªÉ ki·ªÉm so√°t k√≠ch th∆∞·ªõc tuy·ªát ƒë·ªëi */
    flex-shrink: 0; /* NgƒÉn n√∫t b·ªã co l·∫°i trong flex container */
    font-size: 1.2rem; /* TƒÉng k√≠ch th∆∞·ªõc icon m·ªôt ch√∫t */
}

/* Responsive sizes cho n√∫t icon */
@media (max-width: 768px) {
    .btn-refresh-icon {
        width: 38px !important;
        height: 38px !important;
        min-width: 38px !important;
    }
}

@media (max-width: 480px) {
    .input-with-refresh {
        gap: 4px;
    }
    .btn-refresh-icon {
        width: 32px !important;
        height: 32px !important;
        min-width: 32px !important;
        font-size: 1rem;
    }
}
/* ======================================================================== */

/* C√°c quy t·∫Øc HTMX gi·ªØ nguy√™n */
#htmx-indicator,
.htmx-indicator.global {
    display: none;
}

.btn .htmx-indicator,
button .htmx-indicator {
    display: none;
}

.btn.htmx-request .htmx-indicator,
button.htmx-request .htmx-indicator {
    display: inline-block !important;
}

.table-actions .btn {
    width: auto !important;
    flex: 0 0 auto;
}

/* Kh·ªëi n√†y v·∫´n h·ªØu √≠ch cho c√°c n√∫t c√≥ ch·ªØ kh√°c */
.btn.htmx-request,
button.htmx-request {
    display: inline-flex;
    align-items: center;
    justify-content: center;
}

.btn.htmx-request .btn-text,
button.htmx-request .btn-text {
    display: none;
}
============================================================

============================================================
FILE: static\css\main.css
============================================================
/* static/css/main.css - Base Styles */
@import url('./components.css');
@import url('./forms.css'); 
@import url('./dropdowns.css');
@import url('./reports.css');

* {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

body {
    font-family: 'Roboto', 'Segoe UI', Arial, sans-serif;
    background-color: #f5f5f5;
    color: #333;
    line-height: 1.5;
}

.container {
    max-width: 800px;
    margin: 20px auto;
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    padding: 24px;
}

.title {
    text-align: center;
    color: #1976d2;
    margin-bottom: 32px;
    font-size: 24px;
    font-weight: 400;
}

/* Keyframes for animations */
@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Notification styles */
.notification-popup {
    position: fixed;
    bottom: 20px;
    right: 20px;
    z-index: 9999;
    padding: 16px 20px;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    transform: translateY(400px);
    transition: all 0.4s cubic-bezier(0.25, 0.8, 0.25, 1);
    max-width: 350px;
    font-weight: 500;
}

.notification-popup.success {
    background-color: #4caf50;
    color: white;
}

.notification-popup.show {
    transform: translateY(0);
}

.notification-popup.hide {
    transform: translateY(400px);
    opacity: 0;
}

/* ‚úÖ TH√äM: Responsive cho mobile */
@media (max-width: 768px) {
    .notification-popup {
        bottom: 10px;
        right: 10px;
        left: 10px; /* ‚úÖ TH√äM: Full width tr√™n mobile */
        max-width: none;
        text-align: center;
    }
}

/* User info */
.user-info {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 24px;
    padding: 12px;
    background: #e3f2fd;
    border-radius: 4px;
}

.btn-logout {
    background: none;
    border: 1px solid #1976d2;
    color: #1976d2;
    padding: 4px 8px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 12px;
    width: auto !important;
}

.btn-logout:hover {
    background: #1976d2;
    color: white;
}

/* ‚úÖ S·ª¨A: Navbar Styles - b·∫Øt bu·ªôc gi·ªØ 1 d√≤ng */
.navbar {
    margin: -24px -24px 24px -24px;
    border-radius: 8px 8px 0 0;
    background: #1976d2;
}

.navbar-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px 16px;
    flex-wrap: nowrap;
    min-height: 44px;
    overflow: hidden; /* NgƒÉn content tr√†n ra */
}

.navbar-brand {
    flex-shrink: 0; /* Kh√¥ng cho brand b·ªã co l·∫°i */
}

.navbar-brand .brand-link {
    color: white;
    text-decoration: none;
    font-size: 15px;
    font-weight: 600;
    white-space: nowrap;
}

.navbar-nav {
    display: flex;
    align-items: center;
    gap: 6px;
    flex-wrap: nowrap;
    flex-shrink: 1; /* Cho ph√©p nav co l·∫°i khi c·∫ßn */
    min-width: 0; /* Quan tr·ªçng ƒë·ªÉ cho ph√©p flex shrink */
}

.nav-link {
    color: rgba(255, 255, 255, 0.9);
    text-decoration: none;
    padding: 5px 6px;
    border-radius: 4px;
    transition: background-color 0.2s;
    font-size: 12px;
    white-space: nowrap;
    flex-shrink: 0; /* Kh√¥ng cho links b·ªã co */
}

.nav-link:hover {
    background-color: rgba(255, 255, 255, 0.1);
    color: white;
}

.navbar .user-info {
    display: flex;
    align-items: center;
    gap: 6px;
    margin: 0;
    padding: 0;
    background: none;
    border-radius: 0;
    flex-shrink: 1; /* Cho ph√©p user info co l·∫°i */
    min-width: 0;
}

.user-name {
    color: white;
    font-size: 12px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: 100px; /* Gi·ªõi h·∫°n ƒë·ªô r·ªông t√™n */
}

.navbar .btn-logout {
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.3);
    color: white;
    padding: 3px 6px;
    font-size: 10px;
    white-space: nowrap;
    flex-shrink: 0;
}

.navbar .btn-logout:hover {
    background: rgba(255, 255, 255, 0.2);
}

/* Remove old user-info styles from main pages */
.page-content .user-info {
    display: none;
}

/* ‚úÖ Mobile responsiveness - v·∫´n b·∫Øt bu·ªôc 1 d√≤ng */
@media (max-width: 768px) {
    .navbar-container {
        padding: 8px 12px;
        gap: 4px;
        min-height: 40px;
    }
    
    .navbar-brand .brand-link {
        font-size: 13px;
    }
    
    .navbar-nav {
        gap: 3px;
    }
    
    .nav-link {
        padding: 3px 4px;
        font-size: 11px;
    }
    
    .user-name {
        font-size: 11px;
        max-width: 70px; /* Thu nh·ªè h∆°n tr√™n mobile */
    }
    
    .navbar .btn-logout {
        padding: 2px 4px;
        font-size: 9px;
    }
}

/* ‚úÖ Cho m√†n h√¨nh r·∫•t nh·ªè - v·∫´n gi·ªØ 1 d√≤ng */
@media (max-width: 480px) {
    .navbar-container {
        padding: 6px 8px;
    }
    
    .navbar-brand .brand-link {
        font-size: 12px;
    }
    
    .nav-link {
        font-size: 10px;
        padding: 2px 3px;
    }
    
    .user-name {
        max-width: 50px; /* R·∫•t nh·ªè tr√™n mobile */
        font-size: 10px;
    }
    
    .navbar .btn-logout {
        padding: 2px 3px;
        font-size: 8px;
    }
}

/* ‚úÖ M√†n h√¨nh c·ª±c nh·ªè - ∆∞u ti√™n gi·ªØ ch·ª©c nƒÉng */
@media (max-width: 360px) {
    .user-name {
        display: none; /* ·∫®n t√™n ƒë·ªÉ ti·∫øt ki·ªám kh√¥ng gian */
    }
    
    .nav-link {
        font-size: 9px;
        padding: 2px;
    }
    
    .navbar-brand .brand-link {
        font-size: 11px;
    }
}

============================================================

============================================================
FILE: static\css\reports.css
============================================================
/* static/css/reports.css - Report Styles */

.report-header {
    margin-bottom: 32px;
}

.date-selector {
    background: #f8f9fa;
    padding: 20px;
    border-radius: 8px;
    margin-bottom: 20px;
}

.date-form {
    display: flex;
    gap: 16px;
    align-items: end;
}

.date-form .form-group {
    margin-bottom: 0;
    flex: 1;
}

.date-form .btn {
    width: auto !important;
    white-space: nowrap;
}

.report-nav {
    display: flex;
    gap: 12px;
    justify-content: center;
}

.report-nav .btn {
    width: auto !important;
    padding: 8px 16px;
}

/* Summary cards */
.summary-cards {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 20px;
    margin-bottom: 32px;
}

.summary-card {
    background: white;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    padding: 20px;
    text-align: center;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    transition: transform 0.2s ease;
}

.summary-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
}

.summary-card .card-icon {
    font-size: 2.5rem;
    margin-bottom: 12px;
}

.summary-card h3 {
    font-size: 2rem;
    font-weight: bold;
    margin-bottom: 8px;
    color: #1976d2;
}

.summary-card p {
    color: #666;
    font-size: 0.9rem;
    margin: 0;
}

/* Report sections */
.report-section {
    margin-bottom: 32px;
}

.report-section h2 {
    color: #1976d2;
    margin-bottom: 16px;
    font-size: 1.5rem;
}

/* Tables */
.table-container {
    overflow-x: auto;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.report-table {
    width: 100%;
    border-collapse: collapse;
    background: white;
}

.report-table th,
.report-table td {
    padding: 12px 16px;
    text-align: left;
    border-bottom: 1px solid #e0e0e0;
}

.report-table th {
    background: #f5f5f5;
    font-weight: 600;
    color: #333;
}

.report-table tbody tr:hover {
    background: #f9f9f9;
}

.text-center {
    text-align: center !important;
}

/* Transport and route specific styles */
.transport-name,
.route-name {
    font-weight: 500;
    color: #333;
}

.transport-list {
    display: flex;
    flex-wrap: wrap;
    gap: 4px;
}

.transport-tag {
    background: #e3f2fd;
    color: #1976d2;
    padding: 2px 8px;
    border-radius: 12px;
    font-size: 0.8rem;
    white-space: nowrap;
}

/* Progress bars */
.progress-bar {
    position: relative;
    background: #e0e0e0;
    border-radius: 10px;
    height: 20px;
    width: 100px;
    margin: 0 auto;
    overflow: hidden;
}

.progress-fill {
    background: linear-gradient(90deg, #4caf50, #81c784);
    height: 100%;
    border-radius: 10px;
    transition: width 0.3s ease;
}

.progress-text {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: 0.7rem;
    font-weight: bold;
    color: #333;
}

/* Responsive design */
@media (max-width: 768px) {
    .date-form {
        flex-direction: column;
    }
    
    .summary-cards {
        grid-template-columns: repeat(2, 1fr);
    }
    
    .report-nav {
        flex-direction: column;
    }
    
    .transport-list {
        justify-content: center;
    }
}

@media (max-width: 480px) {
    .summary-cards {
        grid-template-columns: 1fr;
    }
}

/* Mobile optimizations for daily report */
@media (max-width: 767px) {
    .container {
        padding: 12px;
        margin: 10px;
    }
    
    .title {
        font-size: 20px;
        margin-bottom: 20px;
    }
    
    .report-table {
        font-size: 11px;
    }
    
    .report-table th,
    .report-table td {
        padding: 4px 6px; /* Thu nh·ªè padding */
        word-break: keep-all; /* Kh√¥ng break word */
        white-space: nowrap; /* Kh√¥ng xu·ªëng d√≤ng */
    }
    
    /* Ri√™ng c·ªôt tuy·∫øn ƒë∆∞·ªùng - hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß n·ªôi dung */
    .route-name {
        min-width: 150px;
        white-space: nowrap;
        word-break: keep-all;
    }

    .transport-list {
        flex-direction: row; /* Gi·ªØ ngang thay v√¨ xu·ªëng d√≤ng */
        flex-wrap: nowrap;
        overflow-x: auto;
    }
    
    .transport-tag {
        margin: 2px 0;
    }
    
    /* Container cho ph√©p scroll ngang */
    .table-container {
        overflow-x: auto;
        -webkit-overflow-scrolling: touch;
    }
    
    .stat-number {
        font-size: 16px !important;
    }
    
    .report-stats {
        padding: 8px 12px;
        font-size: 12px;
    }
}

/* Mobile-first responsive filters */
.mobile-filters {
    display: flex;
    flex-direction: column;
    gap: 12px;
    background: #f8f9fa;
    padding: 16px;
    border-radius: 8px;
    margin-bottom: 20px;
}

.filter-group {
    display: flex;
    flex-direction: column;
    gap: 4px;
}

.filter-label {
    font-size: 14px;
    font-weight: 500;
    color: #666;
}

.filter-select {
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 14px;
    background: white;
}

.filter-actions {
    display: flex;
    gap: 8px;
    margin-top: 8px;
}

.btn-filter {
    flex: 1;
    padding: 10px;
    background: #1976d2;
    color: white;
    border: none;
    border-radius: 4px;
    font-size: 14px;
    cursor: pointer;
}

.btn-clear {
    flex: 1;
    padding: 10px;
    background: #666;
    color: white;
    border: none;
    border-radius: 4px;
    font-size: 14px;
    cursor: pointer;
    text-decoration: none;
    text-align: center;
}

.report-stats {
    display: flex;
    justify-content: space-between;
    background: #e3f2fd;
    padding: 12px 16px;
    border-radius: 4px;
    margin-bottom: 20px;
    font-size: 14px;
}

.stat-item {
    text-align: center;
}

.stat-number {
    font-size: 18px;
    font-weight: bold;
    color: #1976d2;
    display: block;
}

.empty-state {
    text-align: center;
    padding: 40px 20px;
    color: #666;
    background: #f9f9f9;
    border-radius: 8px;
    margin: 20px 0;
}

.empty-state .emoji {
    font-size: 48px;
    margin-bottom: 12px;
    display: block;
}

/* Mobile responsive filters */
@media (min-width: 768px) {
    .mobile-filters {
        flex-direction: row;
        flex-wrap: wrap;
        align-items: end;
    }
    
    .filter-group {
        flex: 1;
        min-width: 200px;
    }
    
    .filter-actions {
        flex: 0 0 auto;
        margin-top: 0;
        align-items: end;
    }
    
    .btn-filter,
    .btn-clear {
        width: 80px;
        flex: none;
    }
}

/* Route export button */
.btn-export-route {
    background: #4caf50 !important;
    color: white !important;
    text-decoration: none !important;
    padding: 4px 8px !important;
    border-radius: 4px !important;
    font-size: 16px !important;
    display: inline-flex !important;
    align-items: center !important;
    justify-content: center !important;
    width: auto !important;
    min-width: 32px;
    height: 28px;
    transition: all 0.2s ease;
}

.btn-export-route:hover {
    background: #45a049 !important;
    transform: scale(1.1);
    box-shadow: 0 2px 4px rgba(76, 175, 80, 0.3);
}

/* Mobile responsive */
@media (max-width: 767px) {
    .btn-export-route {
        font-size: 14px !important;
        padding: 3px 6px !important;
        min-width: 28px;
        height: 24px;
    }
}

/* Ensure table column widths */
.report-table th:last-child,
.report-table td:last-child {
    width: 80px;
    min-width: 80px;
}

@media (max-width: 767px) {
    .report-table th:last-child,
    .report-table td:last-child {
        width: 60px;
        min-width: 60px;
    }
}

============================================================

============================================================
FILE: static\js\app.js
============================================================
// static/js/app.js - Main Application Logic
import DropdownManager from './dropdown.js';
import BulkFormManager from './bulk-form.js';
import { showNotification, showValidationError, showRefreshNotification } from './validators.js';

document.addEventListener('DOMContentLoaded', () => {
    // Initialize managers
    const dropdownManager = new DropdownManager();
    const bulkFormManager = new BulkFormManager();
    
    // ‚úÖ S·ª¨A: G√°n h√†m v√†o window ƒë·ªÉ <script> trong HTML c√≥ th·ªÉ g·ªçi
    window.showRefreshNotification = showRefreshNotification;
    
    // Global click handler to hide dropdowns
    document.addEventListener('click', (e) => {
        if (!e.target.closest('.employee-search') && 
            !e.target.closest('.transport-search') && 
            !e.target.closest('.depot-search')) {
            dropdownManager.hideAllDropdowns();
        }
    });
    
    // HTMX event handlers (gi·ªØ l·∫°i ƒë·ªÉ x·ª≠ l√Ω l·ªói chung)
    document.body.addEventListener('htmx:afterRequest', function(evt) {
        if (evt.detail.failed) {
            console.error("Y√™u c·∫ßu HTMX th·∫•t b·∫°i:", evt.detail.xhr);
            showNotification("Y√™u c·∫ßu th·∫•t b·∫°i", "error");
        }
    });
    
    document.body.addEventListener('htmx:afterSwap', function(evt) {
        // Re-initialize dropdowns after content swap
        // dropdownManager.initializeNewDropdowns(evt.detail.target);
        dropdownManager.initializeAll();
    });
});

============================================================

============================================================
FILE: static\js\bulk-form.js
============================================================
// // static/js/bulk-form.js
// import { showValidationError } from './validators.js';

// class BulkFormManager {
//     constructor() {
//         this.rowCounter = 0;
//         this.groupCounter = 0;
//         this.lastFromDepotValue = '';
//         this.lastToDepotValue = '';
//         this.revalidateTimeout = null;

//         this.bindGlobalMethods();
//         this.setupCommonFieldsWatcher();
//     }
    
//     bindGlobalMethods() {
//         // G·∫Øn c√°c ph∆∞∆°ng th·ª©c v√†o window ƒë·ªÉ HTML c√≥ th·ªÉ g·ªçi qua onclick
//         window.addSingleBillRow = this.addSingleBillRow.bind(this);
//         window.showGroupedBillModal = this.showGroupedBillModal.bind(this);
//         window.closeGroupedBillModal = this.closeGroupedBillModal.bind(this);
//         window.addGroupedBillRows = this.addGroupedBillRows.bind(this);
//         window.removeBillRow = this.removeBillRow.bind(this);
//         window.removeGroupedRows = this.removeGroupedRows.bind(this);
//         window.validateBillId = this.validateBillId.bind(this);
//         window.submitBulkForm = this.submitBulkForm.bind(this);
//         window.updateTotalSummary = this.updateTotalSummary.bind(this);

//         // C√°c ph∆∞∆°ng th·ª©c c·ªßa Modal
//         window.addModalBillRow = this.addModalBillRow.bind(this);
//         window.removeModalBillRow = this.removeModalBillRow.bind(this);
//         window.validateModalBillId = this.validateModalBillId.bind(this);
//     }

//     setupCommonFieldsWatcher() {
//         const depotInputs = document.querySelectorAll('.depot-hidden-input');
//         const fromDepotInput = depotInputs[0];
//         const toDepotInput = depotInputs[1];
//         this.lastFromDepotValue = fromDepotInput ? fromDepotInput.value : '';
//         this.lastToDepotValue = toDepotInput ? toDepotInput.value : '';

//         setInterval(() => this.checkForValueChanges(), 800);
//     }

//     checkForValueChanges() {
//         const depotInputs = document.querySelectorAll('.depot-hidden-input');
//         const fromDepotInput = depotInputs[0];
//         const toDepotInput = depotInputs[1];

//         if (fromDepotInput && fromDepotInput.value !== this.lastFromDepotValue) {
//             this.lastFromDepotValue = fromDepotInput.value;
//             this.debounceRevalidate();
//         }
//         if (toDepotInput && toDepotInput.value !== this.lastToDepotValue) {
//             this.lastToDepotValue = toDepotInput.value;
//             this.debounceRevalidate();
//         }
//     }

//     debounceRevalidate() {
//         clearTimeout(this.revalidateTimeout);
//         this.revalidateTimeout = setTimeout(() => this.revalidateAllBillIds(), 500);
//     }

//     async revalidateAllBillIds() {
//         const billIdInputs = document.querySelectorAll('.bill-id-input');
//         for (const input of billIdInputs) {
//             if (input.value.trim()) {
//                 await this.validateBillId(input);
//             }
//         }
//     }

//     addSingleBillRow() {
//         const tbody = document.querySelector('#billTable tbody');
//         if (!tbody) return;
//         this.rowCounter++;
//         const row = document.createElement('tr');
//         row.id = `row-${this.rowCounter}`;
//         row.classList.add('single-row');
//         // ========================================================
//         // === ‚úÖ ƒê√É CH·ªàNH S·ª¨A T·∫†I ƒê√ÇY ===
//         // ========================================================
//         row.innerHTML = `
//             <td><input type="text" class="form-control bill-id-input" placeholder="ID" onblur="validateBillId(this)"></td>
//             <td><input type="number" class="form-control bag-quantity-input" placeholder="SL t√∫i" min="0" oninput="updateTotalSummary()"></td>
//             <td><input type="number" class="form-control quantity-input" placeholder="SL bao" min="1" required oninput="updateTotalSummary()"></td>
//             <td class="status-cell"><span class="status-pending">‚è≥ Ch∆∞a ki·ªÉm tra</span></td>
//             <td class="action-cell"><button type="button" class="btn btn-danger btn-small" onclick="removeBillRow('${row.id}')">üóëÔ∏è</button></td>
//         `;
//         tbody.appendChild(row);
//         this.updateTotalSummary();
//     }

//     addModalBillRow() {
//         const modalTbody = document.getElementById('modalBillTbody');
//         if (!modalTbody) return;
        
//         const newRow = modalTbody.insertRow();
//         newRow.innerHTML = `
//             <td><input type="text" class="form-control modal-bill-id-input" placeholder="ID" onblur="validateModalBillId(this)"></td>
//             <td class="status-cell"><span class="status-pending">‚è≥ Ch∆∞a ki·ªÉm tra</span></td>
//             <td class="action-cell"><button type="button" class="btn btn-danger btn-small" onclick="removeModalBillRow(this)">üóëÔ∏è</button></td>
//         `;
//         const newInput = newRow.querySelector('input');
//         if (newInput) {
//             newInput.focus();
//         }
//     }

//     removeModalBillRow(button) {
//         const row = button.closest('tr');
//         if (row) {
//             row.remove();
//         }
//     }

//     async validateModalBillId(input) {
//         const billId = input.value.trim();
//         const row = input.closest('tr');
//         const statusCell = row.querySelector('.status-cell');
        
//         if (!billId) {
//             statusCell.innerHTML = '<span class="status-pending">‚è≥ Ch∆∞a ki·ªÉm tra</span>';
//             return;
//         }

//         const depotInputs = document.querySelectorAll('.depot-hidden-input');
//         const fromDepot = depotInputs[0]?.value || '';
//         const toDepot = depotInputs[1]?.value || '';
        
//         if (!fromDepot || !toDepot) {
//             statusCell.innerHTML = '<span class="status-invalid" title="Vui l√≤ng ch·ªçn Kho ƒëi v√† Kho ƒë·∫øn ·ªü form ch√≠nh tr∆∞·ªõc.">‚ùå Ch·ªçn kho tr∆∞·ªõc</span>';
//             return;
//         }

//         statusCell.innerHTML = '<span class="status-checking">üîÑ ƒêang KT...</span>';
        
//         try {
//             const response = await fetch('/validate-bill-id', {
//                 method: 'POST',
//                 headers: {'Content-Type': 'application/x-www-form-urlencoded'},
//                 body: `bill_id=${billId}&from_depot=${fromDepot}&to_depot=${toDepot}`
//             });
//             const result = await response.json();
            
//             if (result.valid) {
//                 statusCell.innerHTML = '<span class="status-valid">‚úÖ H·ª£p l·ªá</span>';
//             } else {
//                 statusCell.innerHTML = `<span class="status-invalid" title="${result.message}">‚ùå ${result.message}</span>`;
//             }
//         } catch (error) {
//             statusCell.innerHTML = '<span class="status-error" title="L·ªói k·∫øt n·ªëi m√°y ch·ªß.">‚ö†Ô∏è L·ªói</span>';
//         }
//     }

//     showGroupedBillModal() {
//         const modal = document.getElementById('groupedBillModal');
//         const modalTbody = document.getElementById('modalBillTbody');
        
//         if (!modal) return;

//         if (modalTbody) {
//             modalTbody.innerHTML = ''; 
//             this.addModalBillRow();
//             this.addModalBillRow();
//         }

//         modal.classList.add('show');
        
//         setTimeout(() => {
//             const firstInput = modalTbody?.querySelector('input');
//             if (firstInput) firstInput.focus();
//         }, 100);
//     }

//     closeGroupedBillModal() {
//         const modal = document.getElementById('groupedBillModal');
//         if (modal) modal.classList.remove('show');
//     }

//     addGroupedBillRows() {
//         const modalInputs = document.querySelectorAll('#modalBillTbody .modal-bill-id-input');
//         const billIds = Array.from(modalInputs).map(input => input.value.trim()).filter(id => id);

//         if (billIds.length < 2) {
//             alert('Vui l√≤ng nh·∫≠p √≠t nh·∫•t 2 Bill ID ƒë·ªÉ g·ªôp th√†nh m·ªôt t·∫£i.');
//             return;
//         }

//         const invalidBill = Array.from(modalInputs).find(input => {
//             const row = input.closest('tr');
//             return row && row.querySelector('.status-invalid');
//         });
        
//         if (invalidBill) {
//             alert('T·ªìn t·∫°i Bill ID kh√¥ng h·ª£p l·ªá trong danh s√°ch. Vui l√≤ng ki·ªÉm tra l·∫°i.');
//             return;
//         }
        
//         const tbody = document.querySelector('#billTable tbody');
//         if (!tbody) return;

//         this.groupCounter++;
//         const groupId = `group-${this.groupCounter}`;
//         const groupQuantity = 1;

//         billIds.forEach((billId, index) => {
//             this.rowCounter++;
//             const row = document.createElement('tr');
//             row.id = `row-${this.rowCounter}`;
//             row.classList.add('grouped-row');
//             row.dataset.groupId = groupId;
            
//             let rowHtml = `<td><input type="text" class="form-control bill-id-input" value="${billId}" onblur="validateBillId(this)" readonly></td>`;
            
//             // ========================================================
//             // === ‚úÖ ƒê√É CH·ªàNH S·ª¨A T·∫†I ƒê√ÇY ===
//             // ========================================================
//             rowHtml += `<td><input type="number" class="form-control bag-quantity-input" placeholder="SL t√∫i" min="0" oninput="updateTotalSummary()"></td>`;
            
//             if (index === 0) {
//                 rowHtml += `
//                     <td rowspan="${billIds.length}" class="grouped-quantity-cell">
//                         <input type="number" class="form-control quantity-input" value="${groupQuantity}" min="1" required oninput="updateTotalSummary()">
//                         <small class="text-muted">${billIds.length} ID</small>
//                     </td>
//                 `;
//             }
            
//             rowHtml += `<td class="status-cell"><span class="status-valid">‚úÖ H·ª£p l·ªá</span></td>`;
            
//             if (index === 0) {
//                 rowHtml += `<td rowspan="${billIds.length}" class="action-cell"><button type="button" class="btn btn-danger btn-small" onclick="removeGroupedRows('${groupId}')" title="X√≥a nh√≥m">üóëÔ∏è</button></td>`;
//             }
            
//             row.innerHTML = rowHtml;
//             tbody.appendChild(row);
//         });

//         this.closeGroupedBillModal();
//         this.updateTotalSummary();
//     }

//     removeBillRow(rowId) {
//         const row = document.getElementById(rowId);
//         if (row) {
//             row.remove();
//             this.updateTotalSummary();
//         }
//     }

//     removeGroupedRows(groupId) {
//         document.querySelectorAll(`tr[data-group-id="${groupId}"]`).forEach(row => row.remove());
//         this.updateTotalSummary();
//     }

//     async validateBillId(input) {
//         await this.validateModalBillId(input);
//     }

//     updateTotalSummary() {
//         let totalBills = 0;
//         let totalBags = 0;
//         let totalLoads = 0;
        
//         document.querySelectorAll('#billTable tbody tr').forEach(row => {
//             if (row.querySelector('.bill-id-input')?.value.trim()) {
//                 totalBills++;
//             }

//             const bagInput = row.querySelector('.bag-quantity-input');
//             if (bagInput) {
//                 totalBags += parseInt(bagInput.value, 10) || 0;
//             }

//             if (row.querySelector('.quantity-input')) {
//                 const quantity = parseInt(row.querySelector('.quantity-input').value, 10) || 0;
//                 totalLoads += quantity;
//             }
//         });
        
//         const totalBillsSpan = document.getElementById('totalBills');
//         const totalBagsSpan = document.getElementById('totalBags');
//         const totalLoadsSpan = document.getElementById('totalLoads');

//         if(totalBillsSpan) totalBillsSpan.textContent = totalBills;
//         if(totalBagsSpan) totalBagsSpan.textContent = totalBags;
//         if(totalLoadsSpan) totalLoadsSpan.textContent = totalLoads;
//     }

//     hasInvalidIds() {
//         return document.querySelectorAll('#billTable .status-invalid').length > 0;
//     }

//     validateRequiredFields() {
//         const depotInputs = document.querySelectorAll('.depot-hidden-input');
//         const fromDepot = depotInputs[0]?.value || '';
//         const toDepot = depotInputs[1]?.value || '';
        
//         const handoverPersonInput = document.querySelector('.employee-hidden-input');
//         const transportProviderInput = document.querySelector('.transport-hidden-input');
        
//         if (!fromDepot) {
//             return { valid: false, message: `‚ùå Vui l√≤ng ch·ªçn Kho ƒëi.` };
//         }
//         if (!toDepot) {
//             return { valid: false, message: `‚ùå Vui l√≤ng ch·ªçn Kho ƒë·∫øn.` };
//         }
//         if (!handoverPersonInput?.value) {
//             return { valid: false, message: `‚ùå Vui l√≤ng ch·ªçn Ng∆∞·ªùi b√†n giao.` };
//         }
//         if (!transportProviderInput?.value) {
//             return { valid: false, message: `‚ùå Vui l√≤ng ch·ªçn ƒê∆°n v·ªã v·∫≠n chuy·ªÉn.` };
//         }
        
//         return { valid: true };
//     }

//     validateQuantityRequirement() {
//         for (const row of document.querySelectorAll('#billTable tbody tr')) {
//             const billIdInput = row.querySelector('.bill-id-input');
//             const quantityInput = row.querySelector('.quantity-input');
            
//             if (billIdInput?.value.trim() && quantityInput) {
//                  const quantity = parseInt(quantityInput.value, 10);
//                  if (isNaN(quantity) || quantity <= 0) {
//                      // ========================================================
//                      // === ‚úÖ ƒê√É CH·ªàNH S·ª¨A T·∫†I ƒê√ÇY ===
//                      // ========================================================
//                      return { valid: false, message: `‚ùå Bill ID "${billIdInput.value}" ph·∫£i c√≥ s·ªë l∆∞·ª£ng bao l·ªõn h∆°n 0.` };
//                  }
//             }
//         }
//         return { valid: true };
//     }

//     generateGroupId(billIds) {
//         return billIds.join('_');
//     }

//     async submitBulkForm() {
//         const resultContainer = document.getElementById('bulk-result-container');
//         const submitBtn = document.getElementById('submitBtn');
//         if (!resultContainer || !submitBtn) return;

//         resultContainer.innerHTML = '';
        
//         if (this.hasInvalidIds()) {
//             resultContainer.innerHTML = '<div class="error">Vui l√≤ng s·ª≠a c√°c Bill ID kh√¥ng h·ª£p l·ªá tr∆∞·ªõc khi l∆∞u.</div>';
//             return;
//         }

//         const requiredValidation = this.validateRequiredFields();
//         if (!requiredValidation.valid) {
//             resultContainer.innerHTML = `<div class="error">${requiredValidation.message}</div>`;
//             return;
//         }

//         const quantityValidation = this.validateQuantityRequirement();
//         if (!quantityValidation.valid) {
//             resultContainer.innerHTML = `<div class="error">${quantityValidation.message}</div>`;
//             return;
//         }
        
//         const billData = [];
//         const groupQuantities = {};
//         const groupBillIds = {}; 
//         const processedGroups = new Set();

//         document.querySelectorAll('tr.grouped-row .quantity-input').forEach(input => {
//             const row = input.closest('tr');
//             const groupId = row.dataset.groupId;
//             groupQuantities[groupId] = parseInt(input.value, 10) || 0;
//         });

//         document.querySelectorAll('#billTable tbody tr.grouped-row').forEach(row => {
//             const billId = row.querySelector('.bill-id-input')?.value.trim();
//             if (billId) {
//                 const groupId = row.dataset.groupId;
//                 if (!groupBillIds[groupId]) {
//                     groupBillIds[groupId] = [];
//                 }
//                 groupBillIds[groupId].push(billId);
//             }
//         });

//         document.querySelectorAll('#billTable tbody tr').forEach(row => {
//             const billId = row.querySelector('.bill-id-input')?.value.trim();
//             if (billId) {
//                 const bagQuantity = parseInt(row.querySelector('.bag-quantity-input')?.value, 10) || 0;
//                 let quantity = 0;
//                 let groupId = null;

//                 if (row.classList.contains('single-row')) {
//                     quantity = parseInt(row.querySelector('.quantity-input').value, 10) || 0;
//                 } else if (row.classList.contains('grouped-row')) {
//                     const rowGroupId = row.dataset.groupId;
//                     quantity = groupQuantities[rowGroupId] || 0;
                    
//                     if (groupBillIds[rowGroupId] && groupBillIds[rowGroupId].length > 0) {
//                         groupId = groupBillIds[rowGroupId].join('_');
//                     }
//                 }

//                 billData.push({ 
//                     bill_id: billId, 
//                     bag_quantity: bagQuantity,
//                     quantity,
//                     group_id: groupId
//                 });
//             }
//         });

//         if (billData.length === 0) {
//             resultContainer.innerHTML = '<div class="error">Vui l√≤ng nh·∫≠p √≠t nh·∫•t m·ªôt Bill ID.</div>';
//             return;
//         }
        
//         submitBtn.classList.add('htmx-request');
//         resultContainer.innerHTML = '<div class="info">üîÑ ƒêang x·ª≠ l√Ω, vui l√≤ng ch·ªù...</div>';
        
//         const depotInputs = document.querySelectorAll('.depot-hidden-input');
//         const handoverPersonInput = document.querySelector('.employee-hidden-input');
//         const transportProviderInput = document.querySelector('.transport-hidden-input');
        
//         const payload = {
//             from_depot: depotInputs[0]?.value || '',
//             to_depot: depotInputs[1]?.value || '',
//             handover_person: handoverPersonInput?.value || '',
//             transport_provider: transportProviderInput?.value || '',
//             bill_data: billData
//         };
        
//         try {
//             const response = await fetch('/bulk-create-records', {
//                 method: 'POST',
//                 headers: {'Content-Type': 'application/json'},
//                 body: JSON.stringify(payload)
//             });
//             const resultHTML = await response.text();
//             resultContainer.innerHTML = resultHTML;
            
//             if (response.ok && resultHTML.includes('success')) {
//                 const tbody = document.querySelector('#billTable tbody');
//                 if (tbody) tbody.innerHTML = '';
//                 this.addSingleBillRow();
//             }
//         } catch (error) {
//             resultContainer.innerHTML = `<div class="error">L·ªói k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß: ${error.message}</div>`;
//         } finally {
//             submitBtn.classList.remove('htmx-request');
//         }
//     }
// }

// export default BulkFormManager;


// static/js/bulk-form.js
import { showValidationError } from './validators.js';

class BulkFormManager {
    constructor() {
        this.rowCounter = 0;
        this.groupCounter = 0;
        this.lastFromDepotValue = '';
        this.lastToDepotValue = '';
        this.revalidateTimeout = null;

        this.bindGlobalMethods();
        this.setupCommonFieldsWatcher();
    }
    
    bindGlobalMethods() {
        // G·∫Øn c√°c ph∆∞∆°ng th·ª©c v√†o window ƒë·ªÉ HTML c√≥ th·ªÉ g·ªçi qua onclick
        window.addSingleBillRow = this.addSingleBillRow.bind(this);
        window.showGroupedBillModal = this.showGroupedBillModal.bind(this);
        window.closeGroupedBillModal = this.closeGroupedBillModal.bind(this);
        window.addGroupedBillRows = this.addGroupedBillRows.bind(this);
        window.removeBillRow = this.removeBillRow.bind(this);
        window.removeGroupedRows = this.removeGroupedRows.bind(this);
        window.validateBillId = this.validateBillId.bind(this);
        window.submitBulkForm = this.submitBulkForm.bind(this);
        window.updateTotalSummary = this.updateTotalSummary.bind(this);

        // C√°c ph∆∞∆°ng th·ª©c c·ªßa Modal
        window.addModalBillRow = this.addModalBillRow.bind(this);
        window.removeModalBillRow = this.removeModalBillRow.bind(this);
        window.validateModalBillId = this.validateModalBillId.bind(this);
    }

    setupCommonFieldsWatcher() {
        const depotInputs = document.querySelectorAll('.depot-hidden-input');
        const fromDepotInput = depotInputs[0];
        const toDepotInput = depotInputs[1];
        this.lastFromDepotValue = fromDepotInput ? fromDepotInput.value : '';
        this.lastToDepotValue = toDepotInput ? toDepotInput.value : '';

        setInterval(() => this.checkForValueChanges(), 800);
    }

    checkForValueChanges() {
        const depotInputs = document.querySelectorAll('.depot-hidden-input');
        const fromDepotInput = depotInputs[0];
        const toDepotInput = depotInputs[1];

        if (fromDepotInput && fromDepotInput.value !== this.lastFromDepotValue) {
            this.lastFromDepotValue = fromDepotInput.value;
            this.debounceRevalidate();
        }
        if (toDepotInput && toDepotInput.value !== this.lastToDepotValue) {
            this.lastToDepotValue = toDepotInput.value;
            this.debounceRevalidate();
        }
    }

    debounceRevalidate() {
        clearTimeout(this.revalidateTimeout);
        this.revalidateTimeout = setTimeout(() => this.revalidateAllBillIds(), 500);
    }

    async revalidateAllBillIds() {
        const billIdInputs = document.querySelectorAll('.bill-id-input');
        for (const input of billIdInputs) {
            if (input.value.trim()) {
                await this.validateBillId(input);
            }
        }
    }

    addSingleBillRow() {
        const tbody = document.querySelector('#billTable tbody');
        if (!tbody) return;
        this.rowCounter++;
        const row = document.createElement('tr');
        row.id = `row-${this.rowCounter}`;
        row.classList.add('single-row');
        // ========================================================
        // === ‚úÖ ƒê√É CH·ªàNH S·ª¨A T·∫†I ƒê√ÇY ===
        // ========================================================
        row.innerHTML = `
            <td><input type="text" class="form-control bill-id-input" placeholder="ID" onblur="validateBillId(this)"></td>
            <td><input type="number" class="form-control quantity-input" placeholder="SL bao" min="1" required oninput="updateTotalSummary()"></td>
            <td><input type="number" class="form-control bag-quantity-input" placeholder="SL t√∫i" min="0" oninput="updateTotalSummary()"></td>
            <td class="status-cell"><span class="status-pending">‚è≥ Ch∆∞a ki·ªÉm tra</span></td>
            <td class="action-cell"><button type="button" class="btn btn-danger btn-small" onclick="removeBillRow('${row.id}')">üóëÔ∏è</button></td>
        `;
        tbody.appendChild(row);
        this.updateTotalSummary();
    }

    addModalBillRow() {
        const modalTbody = document.getElementById('modalBillTbody');
        if (!modalTbody) return;
        
        const newRow = modalTbody.insertRow();
        newRow.innerHTML = `
            <td><input type="text" class="form-control modal-bill-id-input" placeholder="ID" onblur="validateModalBillId(this)"></td>
            <td class="status-cell"><span class="status-pending">‚è≥ Ch∆∞a ki·ªÉm tra</span></td>
            <td class="action-cell"><button type="button" class="btn btn-danger btn-small" onclick="removeModalBillRow(this)">üóëÔ∏è</button></td>
        `;
        const newInput = newRow.querySelector('input');
        if (newInput) {
            newInput.focus();
        }
    }

    removeModalBillRow(button) {
        const row = button.closest('tr');
        if (row) {
            row.remove();
        }
    }

    async validateModalBillId(input) {
        const billId = input.value.trim();
        const row = input.closest('tr');
        const statusCell = row.querySelector('.status-cell');
        
        if (!billId) {
            statusCell.innerHTML = '<span class="status-pending">‚è≥ Ch∆∞a ki·ªÉm tra</span>';
            return;
        }

        const depotInputs = document.querySelectorAll('.depot-hidden-input');
        const fromDepot = depotInputs[0]?.value || '';
        const toDepot = depotInputs[1]?.value || '';
        
        if (!fromDepot || !toDepot) {
            statusCell.innerHTML = '<span class="status-invalid" title="Vui l√≤ng ch·ªçn Kho ƒëi v√† Kho ƒë·∫øn ·ªü form ch√≠nh tr∆∞·ªõc.">‚ùå Ch·ªçn kho tr∆∞·ªõc</span>';
            return;
        }

        statusCell.innerHTML = '<span class="status-checking">üîÑ ƒêang KT...</span>';
        
        try {
            const response = await fetch('/validate-bill-id', {
                method: 'POST',
                headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                body: `bill_id=${billId}&from_depot=${fromDepot}&to_depot=${toDepot}`
            });
            const result = await response.json();
            
            if (result.valid) {
                statusCell.innerHTML = '<span class="status-valid">‚úÖ H·ª£p l·ªá</span>';
            } else {
                statusCell.innerHTML = `<span class="status-invalid" title="${result.message}">‚ùå ${result.message}</span>`;
            }
        } catch (error) {
            statusCell.innerHTML = '<span class="status-error" title="L·ªói k·∫øt n·ªëi m√°y ch·ªß.">‚ö†Ô∏è L·ªói</span>';
        }
    }

    showGroupedBillModal() {
        const modal = document.getElementById('groupedBillModal');
        const modalTbody = document.getElementById('modalBillTbody');
        
        if (!modal) return;

        if (modalTbody) {
            modalTbody.innerHTML = ''; 
            this.addModalBillRow();
            this.addModalBillRow();
        }

        modal.classList.add('show');
        
        setTimeout(() => {
            const firstInput = modalTbody?.querySelector('input');
            if (firstInput) firstInput.focus();
        }, 100);
    }

    closeGroupedBillModal() {
        const modal = document.getElementById('groupedBillModal');
        if (modal) modal.classList.remove('show');
    }

    addGroupedBillRows() {
        const modalInputs = document.querySelectorAll('#modalBillTbody .modal-bill-id-input');
        const billIds = Array.from(modalInputs).map(input => input.value.trim()).filter(id => id);

        if (billIds.length < 2) {
            alert('Vui l√≤ng nh·∫≠p √≠t nh·∫•t 2 Bill ID ƒë·ªÉ g·ªôp th√†nh m·ªôt t·∫£i.');
            return;
        }

        const invalidBill = Array.from(modalInputs).find(input => {
            const row = input.closest('tr');
            return row && row.querySelector('.status-invalid');
        });
        
        if (invalidBill) {
            alert('T·ªìn t·∫°i Bill ID kh√¥ng h·ª£p l·ªá trong danh s√°ch. Vui l√≤ng ki·ªÉm tra l·∫°i.');
            return;
        }
        
        const tbody = document.querySelector('#billTable tbody');
        if (!tbody) return;

        this.groupCounter++;
        const groupId = `group-${this.groupCounter}`;
        const groupQuantity = 1;

        billIds.forEach((billId, index) => {
            this.rowCounter++;
            const row = document.createElement('tr');
            row.id = `row-${this.rowCounter}`;
            row.classList.add('grouped-row');
            row.dataset.groupId = groupId;
            
            let rowHtml = `<td><input type="text" class="form-control bill-id-input" value="${billId}" onblur="validateBillId(this)" readonly></td>`;
            
            // ========================================================
            // === ‚úÖ ƒê√É CH·ªàNH S·ª¨A T·∫†I ƒê√ÇY ===
            // ========================================================
            if (index === 0) {
                rowHtml += `
                    <td rowspan="${billIds.length}" class="grouped-quantity-cell">
                        <input type="number" class="form-control quantity-input" value="${groupQuantity}" min="1" required oninput="updateTotalSummary()">
                        <small class="text-muted">${billIds.length} ID</small>
                    </td>
                `;
            }

            rowHtml += `<td><input type="number" class="form-control bag-quantity-input" placeholder="SL t√∫i" min="0" oninput="updateTotalSummary()"></td>`;
            
            rowHtml += `<td class="status-cell"><span class="status-valid">‚úÖ H·ª£p l·ªá</span></td>`;
            
            if (index === 0) {
                rowHtml += `<td rowspan="${billIds.length}" class="action-cell"><button type="button" class="btn btn-danger btn-small" onclick="removeGroupedRows('${groupId}')" title="X√≥a nh√≥m">üóëÔ∏è</button></td>`;
            }
            
            row.innerHTML = rowHtml;
            tbody.appendChild(row);
        });

        this.closeGroupedBillModal();
        this.updateTotalSummary();
    }

    removeBillRow(rowId) {
        const row = document.getElementById(rowId);
        if (row) {
            row.remove();
            this.updateTotalSummary();
        }
    }

    removeGroupedRows(groupId) {
        document.querySelectorAll(`tr[data-group-id="${groupId}"]`).forEach(row => row.remove());
        this.updateTotalSummary();
    }

    async validateBillId(input) {
        await this.validateModalBillId(input);
    }

    updateTotalSummary() {
        let totalBills = 0;
        let totalBags = 0;
        let totalLoads = 0;
        
        document.querySelectorAll('#billTable tbody tr').forEach(row => {
            if (row.querySelector('.bill-id-input')?.value.trim()) {
                totalBills++;
            }

            const bagInput = row.querySelector('.bag-quantity-input');
            if (bagInput) {
                totalBags += parseInt(bagInput.value, 10) || 0;
            }

            if (row.querySelector('.quantity-input')) {
                const quantity = parseInt(row.querySelector('.quantity-input').value, 10) || 0;
                totalLoads += quantity;
            }
        });
        
        const totalBillsSpan = document.getElementById('totalBills');
        const totalBagsSpan = document.getElementById('totalBags');
        const totalLoadsSpan = document.getElementById('totalLoads');

        if(totalBillsSpan) totalBillsSpan.textContent = totalBills;
        if(totalBagsSpan) totalBagsSpan.textContent = totalBags;
        if(totalLoadsSpan) totalLoadsSpan.textContent = totalLoads;
    }

    hasInvalidIds() {
        return document.querySelectorAll('#billTable .status-invalid').length > 0;
    }

    validateRequiredFields() {
        const depotInputs = document.querySelectorAll('.depot-hidden-input');
        const fromDepot = depotInputs[0]?.value || '';
        const toDepot = depotInputs[1]?.value || '';
        
        const handoverPersonInput = document.querySelector('.employee-hidden-input');
        const transportProviderInput = document.querySelector('.transport-hidden-input');
        
        if (!fromDepot) {
            return { valid: false, message: `‚ùå Vui l√≤ng ch·ªçn Kho ƒëi.` };
        }
        if (!toDepot) {
            return { valid: false, message: `‚ùå Vui l√≤ng ch·ªçn Kho ƒë·∫øn.` };
        }
        if (!handoverPersonInput?.value) {
            return { valid: false, message: `‚ùå Vui l√≤ng ch·ªçn Ng∆∞·ªùi b√†n giao.` };
        }
        if (!transportProviderInput?.value) {
            return { valid: false, message: `‚ùå Vui l√≤ng ch·ªçn ƒê∆°n v·ªã v·∫≠n chuy·ªÉn.` };
        }
        
        return { valid: true };
    }

    validateQuantityRequirement() {
        for (const row of document.querySelectorAll('#billTable tbody tr')) {
            const billIdInput = row.querySelector('.bill-id-input');
            const quantityInput = row.querySelector('.quantity-input');
            
            if (billIdInput?.value.trim() && quantityInput) {
                 const quantity = parseInt(quantityInput.value, 10);
                 if (isNaN(quantity) || quantity <= 0) {
                     // ========================================================
                     // === ‚úÖ ƒê√É CH·ªàNH S·ª¨A T·∫†I ƒê√ÇY ===
                     // ========================================================
                     return { valid: false, message: `‚ùå Bill ID "${billIdInput.value}" ph·∫£i c√≥ s·ªë l∆∞·ª£ng bao l·ªõn h∆°n 0.` };
                 }
            }
        }
        return { valid: true };
    }

    generateGroupId(billIds) {
        return billIds.join('_');
    }

    async submitBulkForm() {
        const resultContainer = document.getElementById('bulk-result-container');
        const submitBtn = document.getElementById('submitBtn');
        if (!resultContainer || !submitBtn) return;

        resultContainer.innerHTML = '';
        
        if (this.hasInvalidIds()) {
            resultContainer.innerHTML = '<div class="error">Vui l√≤ng s·ª≠a c√°c Bill ID kh√¥ng h·ª£p l·ªá tr∆∞·ªõc khi l∆∞u.</div>';
            return;
        }

        const requiredValidation = this.validateRequiredFields();
        if (!requiredValidation.valid) {
            resultContainer.innerHTML = `<div class="error">${requiredValidation.message}</div>`;
            return;
        }

        const quantityValidation = this.validateQuantityRequirement();
        if (!quantityValidation.valid) {
            resultContainer.innerHTML = `<div class="error">${quantityValidation.message}</div>`;
            return;
        }
        
        const billData = [];
        const groupQuantities = {};
        const groupBillIds = {}; 
        const processedGroups = new Set();

        document.querySelectorAll('tr.grouped-row .quantity-input').forEach(input => {
            const row = input.closest('tr');
            const groupId = row.dataset.groupId;
            groupQuantities[groupId] = parseInt(input.value, 10) || 0;
        });

        document.querySelectorAll('#billTable tbody tr.grouped-row').forEach(row => {
            const billId = row.querySelector('.bill-id-input')?.value.trim();
            if (billId) {
                const groupId = row.dataset.groupId;
                if (!groupBillIds[groupId]) {
                    groupBillIds[groupId] = [];
                }
                groupBillIds[groupId].push(billId);
            }
        });

        document.querySelectorAll('#billTable tbody tr').forEach(row => {
            const billId = row.querySelector('.bill-id-input')?.value.trim();
            if (billId) {
                const bagQuantity = parseInt(row.querySelector('.bag-quantity-input')?.value, 10) || 0;
                let quantity = 0;
                let groupId = null;

                if (row.classList.contains('single-row')) {
                    quantity = parseInt(row.querySelector('.quantity-input').value, 10) || 0;
                } else if (row.classList.contains('grouped-row')) {
                    const rowGroupId = row.dataset.groupId;
                    quantity = groupQuantities[rowGroupId] || 0;
                    
                    if (groupBillIds[rowGroupId] && groupBillIds[rowGroupId].length > 0) {
                        groupId = groupBillIds[rowGroupId].join('_');
                    }
                }

                billData.push({ 
                    bill_id: billId, 
                    bag_quantity: bagQuantity,
                    quantity,
                    group_id: groupId
                });
            }
        });

        if (billData.length === 0) {
            resultContainer.innerHTML = '<div class="error">Vui l√≤ng nh·∫≠p √≠t nh·∫•t m·ªôt Bill ID.</div>';
            return;
        }
        
        submitBtn.classList.add('htmx-request');
        resultContainer.innerHTML = '<div class="info">üîÑ ƒêang x·ª≠ l√Ω, vui l√≤ng ch·ªù...</div>';
        
        const depotInputs = document.querySelectorAll('.depot-hidden-input');
        const handoverPersonInput = document.querySelector('.employee-hidden-input');
        const transportProviderInput = document.querySelector('.transport-hidden-input');
        
        const payload = {
            from_depot: depotInputs[0]?.value || '',
            to_depot: depotInputs[1]?.value || '',
            handover_person: handoverPersonInput?.value || '',
            transport_provider: transportProviderInput?.value || '',
            bill_data: billData
        };
        
        try {
            const response = await fetch('/bulk-create-records', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(payload)
            });
            const resultHTML = await response.text();
            resultContainer.innerHTML = resultHTML;
            
            if (response.ok && resultHTML.includes('success')) {
                const tbody = document.querySelector('#billTable tbody');
                if (tbody) tbody.innerHTML = '';
                this.addSingleBillRow();
            }
        } catch (error) {
            resultContainer.innerHTML = `<div class="error">L·ªói k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß: ${error.message}</div>`;
        } finally {
            submitBtn.classList.remove('htmx-request');
        }
    }
}

export default BulkFormManager;
============================================================

============================================================
FILE: static\js\dropdown.js
============================================================
// static/js/dropdown.js - Dropdown Management
class DropdownManager {
    constructor() {
        this.initializeAll();
    }
    
    initializeAll() {
        this.initEmployeeDropdowns();
        this.initTransportDropdowns();
        this.initDepotDropdowns();
    }
    
    initializeNewDropdowns(container) {
        container.querySelectorAll('.employee-dropdown-component').forEach(this.initEmployeeDropdown.bind(this));
        container.querySelectorAll('.transport-dropdown-component').forEach(this.initTransportDropdown.bind(this));
        container.querySelectorAll('.depot-dropdown-component').forEach(this.initDepotDropdown.bind(this));
    }
    
    hideAllDropdowns() {
        // Employee v√† Depot dropdowns
        document.querySelectorAll('.employee-dropdown, .depot-dropdown').forEach(dd => {
            dd.style.display = 'none';
        });
        // Transport dropdowns
        document.querySelectorAll('.transport-dropdown').forEach(dd => {
            dd.classList.remove('show');
        });
    }
    
    initEmployeeDropdowns() {
        document.querySelectorAll('.employee-dropdown-component').forEach(this.initEmployeeDropdown.bind(this));
    }
    
    initTransportDropdowns() {
        document.querySelectorAll('.transport-dropdown-component').forEach(this.initTransportDropdown.bind(this));
    }
    
    initDepotDropdowns() {
        document.querySelectorAll('.depot-dropdown-component').forEach(this.initDepotDropdown.bind(this));
    }
    
    initEmployeeDropdown(component) {
        const searchInput = component.querySelector('.employee-search-input');
        const hiddenInput = component.querySelector('.employee-hidden-input');
        const dropdown = component.querySelector('.employee-dropdown');
        const options = dropdown.querySelectorAll('.employee-option');
        const infoDiv = dropdown.querySelector('.employee-dropdown-info');

        if (!searchInput || !hiddenInput || !dropdown || !infoDiv) return;
        
        dropdown.style.display = 'none';
        
        // ‚úÖ S·ª¨A: Show existing value khi focus l·∫°i
        if (hiddenInput.value) {
            const selectedOption = dropdown.querySelector(`[data-value="${hiddenInput.value}"]`);
            if (selectedOption) {
                const employeeName = selectedOption.dataset.name;
                const employeeId = selectedOption.dataset.value;
                searchInput.value = `${employeeName} (${employeeId})`;
                selectedOption.classList.add('selected');
            }
        }
        
        searchInput.addEventListener('input', () => {
            const query = searchInput.value.trim().toLowerCase();
            
            if (query.length < 1) {
                dropdown.style.display = 'none';
                hiddenInput.value = '';
                return;
            }
            
            dropdown.style.display = 'block';
            this.filterEmployees(query, options, infoDiv);
        });

        // ‚úÖ S·ª¨A: NgƒÉn ng∆∞·ªùi d√πng nh·∫≠p t·ª± do - ch·ªâ cho ph√©p ch·ªçn t·ª´ dropdown
        searchInput.addEventListener('blur', () => {
            setTimeout(() => {
                if (searchInput.value.trim() && !hiddenInput.value) {
                    searchInput.value = '';
                    this.showValidationError('Vui l√≤ng ch·ªçn nh√¢n vi√™n t·ª´ danh s√°ch');
                }
                dropdown.style.display = 'none';
            }, 200);
        });

        // ‚úÖ S·ª¨A: Show gi√° tr·ªã ƒë√£ ch·ªçn khi focus l·∫°i
        searchInput.addEventListener('focus', () => {
            if (hiddenInput.value) {
                // N·∫øu ƒë√£ c√≥ gi√° tr·ªã ƒë∆∞·ª£c ch·ªçn, hi·ªÉn th·ªã dropdown v·ªõi gi√° tr·ªã ƒë√≥
                dropdown.style.display = 'block';
                this.filterEmployees(searchInput.value.toLowerCase(), options, infoDiv);
            } else {
                const query = searchInput.value.trim().toLowerCase();
                if (query.length >= 1) {
                    dropdown.style.display = 'block';
                    this.filterEmployees(query, options, infoDiv);
                }
            }
        });

        dropdown.addEventListener('click', (e) => {
            const option = e.target.closest('.employee-option');
            if (option) {
                const employeeId = option.dataset.value;
                const employeeName = option.dataset.name;

                searchInput.value = `${employeeName} (${employeeId})`;
                hiddenInput.value = employeeId;
                dropdown.style.display = 'none';

                options.forEach(opt => opt.classList.remove('selected'));
                option.classList.add('selected');
            }
        });

        // ‚úÖ S·ª¨A: NgƒÉn ng∆∞·ªùi d√πng typing sau khi ƒë√£ ch·ªçn
        searchInput.addEventListener('keydown', (e) => {
            // N·∫øu ƒë√£ c√≥ gi√° tr·ªã selected v√† ng∆∞·ªùi d√πng g√µ th√™m, clear selection
            if (hiddenInput.value && e.key !== 'Tab' && e.key !== 'Enter') {
                if (e.key === 'Backspace' || e.key === 'Delete' || e.key.length === 1) {
                    hiddenInput.value = '';
                    options.forEach(opt => opt.classList.remove('selected'));
                }
            }
        });
    }
    
    initTransportDropdown(component) {
        const searchInput = component.querySelector('.transport-search-input');
        const hiddenInput = component.querySelector('.transport-hidden-input');
        const dropdown = component.querySelector('.transport-dropdown');
        const options = dropdown.querySelectorAll('.transport-option');
        const infoDiv = dropdown.querySelector('.transport-dropdown-info');

        if (!searchInput || !hiddenInput || !dropdown || !infoDiv) return;
        
        dropdown.classList.remove('show');
        
        // ‚úÖ S·ª¨A: Show existing value khi focus l·∫°i
        if (hiddenInput.value) {
            const selectedOption = dropdown.querySelector(`[data-value="${hiddenInput.value}"]`);
            if (selectedOption) {
                searchInput.value = selectedOption.dataset.name;
                selectedOption.classList.add('selected');
            }
        }
        
        searchInput.addEventListener('input', () => {
            const query = searchInput.value.trim().toLowerCase();
            
            if (query.length < 1) {
                dropdown.classList.remove('show');
                hiddenInput.value = '';
                return;
            }
            
            dropdown.classList.add('show');
            this.filterTransportProviders(query, options, infoDiv);
        });

        // ‚úÖ S·ª¨A: NgƒÉn ng∆∞·ªùi d√πng nh·∫≠p t·ª± do
        searchInput.addEventListener('blur', () => {
            setTimeout(() => {
                if (searchInput.value.trim() && !hiddenInput.value) {
                    searchInput.value = '';
                    this.showValidationError('Vui l√≤ng ch·ªçn ƒë∆°n v·ªã v·∫≠n chuy·ªÉn t·ª´ danh s√°ch');
                }
                dropdown.classList.remove('show');
            }, 200);
        });

        // ‚úÖ S·ª¨A: Show gi√° tr·ªã ƒë√£ ch·ªçn khi focus l·∫°i
        searchInput.addEventListener('focus', () => {
            if (hiddenInput.value) {
                dropdown.classList.add('show');
                this.filterTransportProviders(searchInput.value.toLowerCase(), options, infoDiv);
            } else {
                const query = searchInput.value.trim().toLowerCase();
                if (query.length >= 1) {
                    dropdown.classList.add('show');
                    this.filterTransportProviders(query, options, infoDiv);
                }
            }
        });

        dropdown.addEventListener('click', (e) => {
            const option = e.target.closest('.transport-option');
            if (option) {
                const providerId = option.dataset.value;
                const providerName = option.dataset.name;

                searchInput.value = providerName;
                hiddenInput.value = providerId;
                dropdown.classList.remove('show');

                options.forEach(opt => opt.classList.remove('selected'));
                option.classList.add('selected');
            }
        });

        // ‚úÖ S·ª¨A: NgƒÉn ng∆∞·ªùi d√πng typing sau khi ƒë√£ ch·ªçn
        searchInput.addEventListener('keydown', (e) => {
            if (hiddenInput.value && e.key !== 'Tab' && e.key !== 'Enter') {
                if (e.key === 'Backspace' || e.key === 'Delete' || e.key.length === 1) {
                    hiddenInput.value = '';
                    options.forEach(opt => opt.classList.remove('selected'));
                }
            }
        });
    }
    
    initDepotDropdown(component) {
        const searchInput = component.querySelector('.depot-search-input');
        const hiddenInput = component.querySelector('.depot-hidden-input');
        const dropdown = component.querySelector('.depot-dropdown');
        const options = dropdown.querySelectorAll('.depot-option');
        const infoDiv = dropdown.querySelector('.depot-dropdown-info');

        if (!searchInput || !hiddenInput || !dropdown || !infoDiv) return;
        
        dropdown.style.display = 'none';
        
        // ‚úÖ S·ª¨A: Show existing value khi focus l·∫°i  
        if (hiddenInput.value) {
            const selectedOption = dropdown.querySelector(`[data-value="${hiddenInput.value}"]`);
            if (selectedOption) {
                searchInput.value = selectedOption.dataset.name;
                selectedOption.classList.add('selected');
            }
        }
        
        searchInput.addEventListener('input', () => {
            const query = searchInput.value.trim().toLowerCase();
            
            if (query.length < 1) {
                dropdown.style.display = 'none';
                hiddenInput.value = '';
                return;
            }
            
            dropdown.style.display = 'block';
            this.filterDepots(query, options, infoDiv);
        });

        // ‚úÖ S·ª¨A: NgƒÉn ng∆∞·ªùi d√πng nh·∫≠p t·ª± do
        searchInput.addEventListener('blur', () => {
            setTimeout(() => {
                if (searchInput.value.trim() && !hiddenInput.value) {
                    searchInput.value = '';
                    this.showValidationError('Vui l√≤ng ch·ªçn depot t·ª´ danh s√°ch');
                }
                dropdown.style.display = 'none';
            }, 200);
        });

        // ‚úÖ S·ª¨A: Show gi√° tr·ªã ƒë√£ ch·ªçn khi focus l·∫°i
        searchInput.addEventListener('focus', () => {
            if (hiddenInput.value) {
                dropdown.style.display = 'block';
                this.filterDepots(searchInput.value.toLowerCase(), options, infoDiv);
            } else {
                const query = searchInput.value.trim().toLowerCase();
                if (query.length >= 1) {
                    dropdown.style.display = 'block';
                    this.filterDepots(query, options, infoDiv);
                }
            }
        });

        dropdown.addEventListener('click', (e) => {
            const option = e.target.closest('.depot-option');
            if (option) {
                const depotId = option.dataset.value;
                const depotName = option.dataset.name;

                searchInput.value = depotName;
                hiddenInput.value = depotId;
                dropdown.style.display = 'none';

                options.forEach(opt => opt.classList.remove('selected'));
                option.classList.add('selected');
            }
        });

        // ‚úÖ S·ª¨A: NgƒÉn ng∆∞·ªùi d√πng typing sau khi ƒë√£ ch·ªçn
        searchInput.addEventListener('keydown', (e) => {
            if (hiddenInput.value && e.key !== 'Tab' && e.key !== 'Enter') {
                if (e.key === 'Backspace' || e.key === 'Delete' || e.key.length === 1) {
                    hiddenInput.value = '';
                    options.forEach(opt => opt.classList.remove('selected'));
                }
            }
        });
    }
    
    filterEmployees(query, options, infoDiv) {
        let visibleCount = 0;
        const maxResults = 5;
        
        options.forEach(option => {
            const name = option.dataset.name.toLowerCase();
            const id = option.dataset.value.toLowerCase();
            const department = option.dataset.department.toLowerCase();
            
            const isMatch = name.includes(query) || id.includes(query) || department.includes(query);
            
            if (isMatch && visibleCount < maxResults) {
                option.style.display = 'block';
                visibleCount++;
            } else {
                option.style.display = 'none';
            }
        });
        
        this.updateInfoDiv(infoDiv, visibleCount, maxResults);
    }
    
    filterTransportProviders(query, options, infoDiv) {
        let visibleCount = 0;
        const maxResults = 5;
        
        options.forEach(option => {
            const name = option.dataset.name.toLowerCase();
            const isMatch = name.includes(query);
            
            if (isMatch && visibleCount < maxResults) {
                option.style.display = 'block';
                visibleCount++;
            } else {
                option.style.display = 'none';
            }
        });
        
        this.updateInfoDiv(infoDiv, visibleCount, maxResults);
    }
    
    filterDepots(query, options, infoDiv) {
        let visibleCount = 0;
        const maxResults = 5;
        
        options.forEach(option => {
            const name = option.dataset.name.toLowerCase();
            const code = option.dataset.code.toLowerCase();
            const address = option.dataset.address.toLowerCase();
            
            const isMatch = name.includes(query) || code.includes(query) || address.includes(query);
            
            if (isMatch && visibleCount < maxResults) {
                option.style.display = 'block';
                visibleCount++;
            } else {
                option.style.display = 'none';
            }
        });
        
        this.updateInfoDiv(infoDiv, visibleCount, maxResults);
    }
    
    updateInfoDiv(infoDiv, visibleCount, maxResults) {
        if (visibleCount === 0) {
            infoDiv.innerHTML = '<small style="color: #c62828;">Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ ph√π h·ª£p</small>';
        } else if (visibleCount >= maxResults) {
            infoDiv.innerHTML = `<small>Hi·ªÉn th·ªã ${maxResults} k·∫øt qu·∫£ ƒë·∫ßu ti√™n. G√µ th√™m ƒë·ªÉ thu h·∫πp.</small>`;
        } else {
            infoDiv.innerHTML = `<small>T√¨m th·∫•y ${visibleCount} k·∫øt qu·∫£</small>`;
        }
    }

    // ‚úÖ TH√äM: Helper method ƒë·ªÉ show validation error
    showValidationError(message) {
        const errorDiv = document.createElement('div');
        errorDiv.className = 'validation-error';
        errorDiv.textContent = message;
        errorDiv.style.cssText = `
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: #f44336;
            color: white;
            padding: 12px 20px;
            border-radius: 4px;
            z-index: 10000;
            font-size: 14px;
        `;
        
        document.body.appendChild(errorDiv);
        
        setTimeout(() => {
            errorDiv.remove();
        }, 3000);
    }
}

export default DropdownManager;

============================================================

============================================================
FILE: static\js\validators.js
============================================================
// static/js/validators.js - Validation Utilities
export function showNotification(message, type = 'success', duration = 3000) {
    const notification = document.createElement('div');
    notification.className = `notification-popup ${type}`;
    notification.textContent = message;
    document.body.appendChild(notification);
    
    setTimeout(() => { notification.classList.add('show'); }, 100);
    
    setTimeout(() => {
        notification.classList.add('hide');
        notification.addEventListener('transitionend', () => notification.remove());
    }, duration);
}

export function showValidationError(message) {
    const errorDiv = document.createElement('div');
    errorDiv.className = 'validation-error';
    errorDiv.textContent = message;
    errorDiv.style.cssText = `
        position: fixed;
        bottom: 20px;
        right: 20px;
        background: #f44336;
        color: white;
        padding: 12px 20px;
        border-radius: 4px;
        z-index: 10000;
        font-size: 14px;
    `;
    
    document.body.appendChild(errorDiv);
    
    setTimeout(() => {
        errorDiv.remove();
    }, 3000);
}

export function showRefreshNotification(message, type = 'success', duration = 3000) {
    const existing = document.querySelector('.refresh-notification');
    if (existing) {
        existing.remove();
    }
    
    const notification = document.createElement('div');
    notification.className = `refresh-notification ${type}`;
    
    notification.innerHTML = `
        <span style="margin-right: 8px;">${type === 'success' ? '‚úÖ' : '‚ùå'}</span>
        <span>${message}</span>
    `;
    
    document.body.appendChild(notification);
    
    // Force reflow
    notification.offsetHeight;
    
    // Show animation
    requestAnimationFrame(() => {
        notification.classList.add('show');
    });
    
    // Auto hide
    setTimeout(() => {
        notification.classList.add('hide');
        setTimeout(() => {
            if (notification.parentNode) {
                notification.remove();
            }
        }, 400);
    }, duration);
}
============================================================


üìä TH·ªêNG K√ä
------------------------------
T·ªïng s·ªë file: 58
File code: 40
C√°c lo·∫°i file code:
  .css: 5 file
  .js: 4 file
  .md: 1 file
  .py: 27 file
  .txt: 2 file
  .yml: 1 file
