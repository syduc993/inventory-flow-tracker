import { showValidationError } from './validators.js';

class BulkFormManager {
    constructor() {
        this.rowCounter = 0;
        this.bindGlobalMethods();
    }
    
    bindGlobalMethods() {
        // Bind methods to window for onclick handlers
        window.addBillRow = this.addBillRow.bind(this);
        window.removeBillRow = this.removeBillRow.bind(this);
        window.validateBillId = this.validateBillId.bind(this);
        // ‚úÖ B·ªé: validateAllIds - kh√¥ng c·∫ßn ki·ªÉm tra t·∫•t c·∫£ n·ªØa
        window.submitBulkForm = this.submitBulkForm.bind(this);
    }
    
    addBillRow() {
        const tbody = document.querySelector('#billTable tbody');
        if (!tbody) return;
        
        this.rowCounter++;
        
        const row = document.createElement('tr');
        row.id = `row-${this.rowCounter}`;
        row.innerHTML = `
            <td>
                <input type="text" 
                    class="form-control bill-id-input" 
                    name="bill_ids[]" 
                    placeholder="Nh·∫≠p Bill ID"
                    onblur="validateBillId(this)">
            </td>
            <td>
                <input type="number" 
                    class="form-control quantity-input" 
                    name="quantities[]" 
                    placeholder="SL bao/t·∫£i"
                    min="1">
            </td>
            <td class="status-cell">
                <span class="status-pending">‚è≥ Ch∆∞a ki·ªÉm tra</span>
            </td>
            <td>
                <button type="button" class="btn btn-danger btn-small" onclick="removeBillRow('${row.id}')">
                    üóëÔ∏è
                </button>
            </td>
        `;
        
        tbody.appendChild(row);
    }
    
    removeBillRow(rowId) {
        const row = document.getElementById(rowId);
        if (row) {
            row.remove();
        }
    }
    
    async validateBillId(input) {
        const billId = input.value.trim();
        const row = input.closest('tr');
        const statusCell = row.querySelector('.status-cell');
        
        if (!billId) {
            statusCell.innerHTML = '<span class="status-pending">‚è≥ Ch∆∞a ki·ªÉm tra</span>';
            return;
        }
        
        statusCell.innerHTML = '<span class="status-checking">üîÑ ƒêang ki·ªÉm tra...</span>';
        
        try {
            const response = await fetch('/validate-bill-id', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `bill_id=${billId}`
            });
            
            const result = await response.json();
            
            if (result.valid) {
                statusCell.innerHTML = '<span class="status-valid">‚úÖ H·ª£p l·ªá</span>';
                const quantityInput = row.querySelector('.quantity-input');
                if (result.quantity && !quantityInput.value) {
                    quantityInput.value = result.quantity;
                }
            } else {
                // ‚úÖ S·ª¨A: R√∫t g·ªçn th√¥ng b√°o l·ªói t·ª´ "ID kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng c√≥ d·ªØ li·ªáu" th√†nh "ID kh√¥ng h·ª£p l·ªá"
                const errorMessage = result.message.replace('ID kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng c√≥ d·ªØ li·ªáu', 'ID kh√¥ng h·ª£p l·ªá');
                statusCell.innerHTML = `<span class="status-invalid">‚ùå ${errorMessage}</span>`;
            }
        } catch (error) {
            statusCell.innerHTML = '<span class="status-error">‚ö†Ô∏è L·ªói ki·ªÉm tra</span>';
            console.error('Error validating bill ID:', error);
        }
    }
    
    // ‚úÖ B·ªé: validateAllIds method - kh√¥ng c·∫ßn n·ªØa v√¨ m·ªói ID ƒë√£ t·ª± ki·ªÉm tra
    
    // ‚úÖ TH√äM: Helper method ƒë·ªÉ ki·ªÉm tra c√≥ ID kh√¥ng h·ª£p l·ªá kh√¥ng
    hasInvalidIds() {
        const invalidStatuses = document.querySelectorAll('.status-invalid');
        return invalidStatuses.length > 0;
    }
    
    async submitBulkForm() {
        const submitBtn = document.getElementById('submitBtn');
        const resultContainer = document.getElementById('bulk-result-container');
        
        // ‚úÖ S·ª¨A: Validation frontend - kh√¥ng cho submit n·∫øu c√≥ ID kh√¥ng h·ª£p l·ªá
        if (this.hasInvalidIds()) {
            resultContainer.innerHTML = '<div class="error">‚ùå Vui l√≤ng s·ª≠a c√°c ID kh√¥ng h·ª£p l·ªá tr∆∞·ªõc khi l∆∞u</div>';
            return;
        }
        
        // Get common fields
        const fromDepot = document.querySelector('input[name="from_depot"]')?.value;
        const toDepot = document.querySelector('input[name="to_depot"]')?.value;
        const handoverPerson = document.querySelector('input[name="handover_person"]')?.value;
        const transportProvider = document.querySelector('input[name="transport_provider"]')?.value || '';
        
        // Validate common fields
        if (!fromDepot || !toDepot || !handoverPerson) {
            resultContainer.innerHTML = '<div class="error">‚ùå Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc (Kho ƒëi, Kho ƒë·∫øn, Ng∆∞·ªùi b√†n giao)</div>';
            return;
        }
        
        // Get bill data
        const rows = document.querySelectorAll('#billTable tbody tr');
        const billData = [];
        
        for (const row of rows) {
            const billId = row.querySelector('.bill-id-input')?.value.trim();
            const quantity = row.querySelector('.quantity-input')?.value;
            
            if (billId) {
                billData.push({
                    bill_id: billId,
                    quantity: quantity || 0
                });
            }
        }
        
        if (billData.length === 0) {
            resultContainer.innerHTML = '<div class="error">‚ùå Vui l√≤ng nh·∫≠p √≠t nh·∫•t 1 Bill ID</div>';
            return;
        }
        
        // Show loading
        submitBtn?.classList.add('htmx-request');
        resultContainer.innerHTML = '<div class="info">üîÑ ƒêang x·ª≠ l√Ω...</div>';
        
        try {
            const response = await fetch('/bulk-create-records', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    from_depot: fromDepot,
                    to_depot: toDepot,
                    handover_person: handoverPerson,
                    transport_provider: transportProvider,
                    bill_data: billData
                })
            });
            
            const result = await response.text();
            resultContainer.innerHTML = result;
            
            // Reset form if successful
            if (result.includes('success')) {
                const tbody = document.querySelector('#billTable tbody');
                if (tbody) {
                    tbody.innerHTML = '';
                    this.addBillRow();
                }
            }
            
        } catch (error) {
            resultContainer.innerHTML = '<div class="error">‚ùå L·ªói h·ªá th·ªëng: ' + error.message + '</div>';
        } finally {
            submitBtn?.classList.remove('htmx-request');
        }
    }
}

export default BulkFormManager;
